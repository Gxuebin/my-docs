import projectConfig from '/pagic.config.js';
import Gitalk from '/_gitalk.js';
export default {
    'prev': {
        "text": "CSS3新特性",
        "link": "start/CSS3.html"
    },
    'next': {
        "text": "移动端常见问题",
        "link": "start/Mobile.html"
    },
    config: { "root": "/", ...projectConfig, branch: 'master' },
    'pagePath': "start/JS.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "start/JS.html",
    'title': "深入 JavaScript",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1 id="%E6%B7%B1%E5%85%A5-javascript">深入 JavaScript<a class="anchor" href="#%E6%B7%B1%E5%85%A5-javascript">§</a></h1>\n<h2 id="%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%97%AD%E5%8C%85">作用域闭包<a class="anchor" href="#%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%97%AD%E5%8C%85">§</a></h2>\n<h3 id="%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87">执行上下文<a class="anchor" href="#%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87">§</a></h3>\n<p>当执行 JS 代码时，会产生三种执行上下文</p>\n<ul>\n<li>全局执行上下文</li>\n<li>函数执行上下文</li>\n<li>eval 执行上下文</li>\n</ul>\n<p>每个执行上下文中都有三个重要的属性</p>\n<ul>\n<li>变量对象（VO），包含变量、函数声明和函数的形参，该属性只能在全局上下文中访问</li>\n<li>作用域链（JS 采用词法作用域，也就是说变量的作用域是在定义时就决定了）</li>\n<li>this</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<p>对于上述代码，执行栈中有两个上下文：全局上下文和函数 <code>foo</code> 上下文。</p>\n<pre class="language-js"><code class="language-js">stack <span class="token operator">=</span> <span class="token punctuation">[</span>globalContext<span class="token punctuation">,</span> fooContext<span class="token punctuation">]</span>\n</code></pre>\n<p>对于全局上下文来说，VO 大概是这样的</p>\n<pre class="language-js"><code class="language-js">globalContext<span class="token punctuation">.</span><span class="token constant">VO</span> <span class="token operator">===</span> globe\nglobalContext<span class="token punctuation">.</span><span class="token constant">VO</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    a<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>\n  foo<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token known-class-name class-name">Function</span><span class="token operator">></span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>对于函数 <code>foo</code> 来说，VO 不能访问，只能访问到活动对象（AO）</p>\n<pre class="language-js"><code class="language-js">fooContext<span class="token punctuation">.</span><span class="token constant">VO</span> <span class="token operator">===</span> foo<span class="token punctuation">.</span><span class="token constant">AO</span>\nfooContext<span class="token punctuation">.</span><span class="token constant">AO</span> <span class="token punctuation">{</span>\n    i<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>\n  b<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>\n    arguments<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">></span>\n<span class="token punctuation">}</span>\n<span class="token comment">// arguments 是函数独有的对象(箭头函数没有)</span>\n<span class="token comment">// 该对象是一个伪数组，有 `length` 属性且可以通过下标访问元素</span>\n<span class="token comment">// 该对象中的 `callee` 属性代表函数本身</span>\n<span class="token comment">// `caller` 属性代表函数的调用者</span>\n</code></pre>\n<p>对于作用域链，可以把它理解成包含自身变量对象和上级变量对象的列表，通过 <code>[[Scope]]</code> 属性查找上级变量</p>\n<pre class="language-js"><code class="language-js">fooContext<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token maybe-class-name">Scope</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n    globalContext<span class="token punctuation">.</span><span class="token constant">VO</span>\n<span class="token punctuation">]</span>\nfooContext<span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">Scope</span></span> <span class="token operator">=</span> fooContext<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token maybe-class-name">Scope</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> fooContext<span class="token punctuation">.</span><span class="token constant">VO</span>\nfooContext<span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">Scope</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n    fooContext<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">,</span>\n    globalContext<span class="token punctuation">.</span><span class="token constant">VO</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>接下来让我们看一个老生常谈的例子，<code>var</code></p>\n<pre class="language-js"><code class="language-js"><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// call b</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">\'Hello world\'</span>\n\n<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'call b\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>想必以上的输出大家肯定都已经明白了，这是因为函数和变量提升的原因。通常提升的解释是说将声明的代码移动到了顶部，这其实没有什么错误，便于大家理解。但是更准确的解释应该是：在生成执行上下文时，会有两个阶段。第一个阶段是创建的阶段（具体步骤是创建 VO），JS 解释器会找出需要提升的变量和函数，并且给他们提前在内存中开辟好空间，函数的话会将整个函数存入内存中，变量只声明并且赋值为 undefined，所以在第二个阶段，也就是代码执行阶段，我们可以直接提前使用。</p>\n<p>在提升的过程中，相同的函数会覆盖上一个函数，并且函数优先于变量提升</p>\n<pre class="language-js"><code class="language-js"><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// call b second</span>\n\n<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'call b fist\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'call b second\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">\'Hello world\'</span>\n</code></pre>\n<p><code>var</code> 会产生很多错误，所以在 ES6 中引入了 <code>let</code>。<code>let</code> 不能在声明前使用，但是这并不是常说的 <code>let</code> 不会提升，<code>let</code> 提升了声明但没有赋值，因为临时死区导致了并不能在声明前使用。</p>\n<p>对于非匿名的立即执行函数需要注意以下一点</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    foo <span class="token operator">=</span> <span class="token number">10</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token comment">// -> ƒ foo() { foo = 10 ; console.log(foo) }</span>\n</code></pre>\n<p>因为当 JS 解释器在遇到非匿名的立即执行函数时，会创建一个辅助的特定对象，然后将函数名称作为这个对象的属性，因此函数内部才可以访问到 <code>foo</code>，但是这个值又是只读的，所以对它的赋值并不生效，所以打印的结果还是这个函数，并且外部的值也没有发生更改。</p>\n<pre class="language-js"><code class="language-js">specialObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token maybe-class-name">Scope</span> <span class="token operator">=</span> specialObject <span class="token operator">+</span> <span class="token maybe-class-name">Scope</span><span class="token punctuation">;</span>\n\nfoo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FunctionExpression</span><span class="token punctuation">;</span>\nfoo<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token maybe-class-name">Scope</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token maybe-class-name">Scope</span><span class="token punctuation">;</span>\nspecialObject<span class="token punctuation">.</span><span class="token property-access">foo</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span> <span class="token comment">// {DontDelete}, {ReadOnly}</span>\n\n<span class="token keyword">delete</span> <span class="token maybe-class-name">Scope</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// remove specialObject from the front of scope chain</span>\n</code></pre>\n<h3 id="%E9%97%AD%E5%8C%85">闭包<a class="anchor" href="#%E9%97%AD%E5%8C%85">§</a></h3>\n<p>闭包的定义很简单：函数 A 返回了一个函数 B，并且函数 B 中使用了函数 A 的变量，函数 B 就被称为闭包。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> <span class="token constant">B</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>你是否会疑惑，为什么函数 A 已经弹出调用栈了，为什么函数 B 还能引用到函数 A 中的变量。因为函数 A 中的变量这时候是存储在堆上的。现在的 JS 引擎可以通过逃逸分析辨别出哪些变量需要存储在堆上，哪些需要存储在栈上。</p>\n<p>经典面试题，循环中使用闭包解决 <code>var</code> 定义函数的问题</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">for</span> <span class="token punctuation">(</span> var i<span class="token operator">=</span><span class="token number">1</span><span class="token comment">; i&lt;=5; i++) {</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> function <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token comment">;</span>\n  }<span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token comment">;</span>\n}\n</code></pre>\n<p>首先因为 <code>setTimeout</code> 是个异步函数，所有会先把循环全部执行完毕，这时候 <code>i</code> 就是 6 了，所以会输出一堆 6。</p>\n<p>解决办法两种，第一种使用闭包</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> j <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>第二种就是使用 <code>setTimeout</code> 的第三个参数</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span>\n    <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span>\n    i\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>第三种就是使用 <code>let</code> 定义 <code>i</code> 了</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>因为对于 <code>let</code> 来说，他会创建一个块级作用域，相当于</p>\n<pre class="language-js"><code class="language-js"><span class="token punctuation">{</span> <span class="token comment">// 形成块级作用域</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> ii <span class="token operator">=</span> i\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span> ii <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  i<span class="token operator">++</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> ii <span class="token operator">=</span> i\n  <span class="token punctuation">}</span>\n  i<span class="token operator">++</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> ii <span class="token operator">=</span> i\n  <span class="token punctuation">}</span>\n  <span class="token spread operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="this-%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90">this 全面解析<a class="anchor" href="#this-%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90">§</a></h2>\n<p><code>this</code> 是很多人会混淆的概念，但是其实他一点都不难，你只需要记住几个规则就可以了。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">a</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  foo<span class="token operator">:</span> foo\n<span class="token punctuation">}</span>\nobj<span class="token punctuation">.</span><span class="token method function property-access">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 以上两者情况 `this` 只依赖于调用函数前的对象，优先级是第二个情况大于第一个情况</span>\n\n<span class="token comment">// 以下情况是优先级最高的，`this` 只会绑定在 `c` 上，不会被任何方式修改 `this` 指向</span>\n<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nc<span class="token punctuation">.</span><span class="token property-access">a</span> <span class="token operator">=</span> <span class="token number">3</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token property-access">a</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 还有种就是利用 call，apply，bind 改变 this，这个优先级仅次于 new</span>\n</code></pre>\n<p>以上几种情况明白了，很多代码中的 <code>this</code> 应该就没什么问题了，下面让我们看看箭头函数中的 <code>this</code></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n          <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>箭头函数其实是没有 <code>this</code> 的，这个函数中的 <code>this</code> 只取决于他外面的第一个不是箭头函数的函数的 <code>this</code>。在这个例子中，因为调用 <code>a</code> 符合前面代码中的第一个情况，所以 <code>this</code> 是 <code>window</code>。并且 <code>this</code> 一旦绑定了上下文，就不会被任何代码改变。</p>\n<h2 id="%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%8E%9F%E7%90%86">深浅拷贝原理<a class="anchor" href="#%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%8E%9F%E7%90%86">§</a></h2>\n<blockquote></blockquote>\n<p>::: tip\n作者：木易杨说</p>\n<p>链接：<a href="https://juejin.im/post/5c45112e6fb9a04a027aa8fe">https://juejin.im/post/5c45112e6fb9a04a027aa8fe</a></p>\n<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n:::</p>\n<h3 id="%E8%B5%8B%E5%80%BC%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB">赋值、浅拷贝和深拷贝的区别<a class="anchor" href="#%E8%B5%8B%E5%80%BC%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB">§</a></h3>\n<h4 id="%E4%B8%80%E8%B5%8B%E5%80%BCcopy">一、赋值（Copy）<a class="anchor" href="#%E4%B8%80%E8%B5%8B%E5%80%BCcopy">§</a></h4>\n<p>赋值是将某一数值或对象赋给某个变量的过程，分为下面 2 部分</p>\n<ul>\n<li>基本数据类型：赋值，赋值之后两个变量互不影响</li>\n<li>引用数据类型：赋址，两个变量具有相同的引用，指向同一个对象，相互之间有影响</li>\n</ul>\n<p>对基本类型进行赋值操作，两个变量互不影响。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">\'muyiy\'</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> a\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// muyiy</span>\n\na <span class="token operator">=</span> <span class="token string">\'change\'</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token comment">// change</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// muyiy</span>\n</code></pre>\n<p>对引用类型进行赋址操作，两个变量指向同一个对象，改变变量 <code>a</code> 之后会影响变量 <code>b</code>，哪怕改变的只是对象 <code>a</code> 中的基本类型数据。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'muyiy\'</span><span class="token punctuation">,</span>\n  book<span class="token operator">:</span> <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">"You Don\'t Know JS"</span><span class="token punctuation">,</span>\n    price<span class="token operator">:</span> <span class="token string">\'45\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> a\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "45"}</span>\n<span class="token comment">// }</span>\n\na<span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'change\'</span>\na<span class="token punctuation">.</span><span class="token property-access">book</span><span class="token punctuation">.</span><span class="token property-access">price</span> <span class="token operator">=</span> <span class="token string">\'55\'</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "change",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "55"}</span>\n<span class="token comment">// }</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "change",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "55"}</span>\n<span class="token comment">// }</span>\n</code></pre>\n<p>通常在开发中并不希望改变变量 <code>a</code> 之后会影响到变量 <code>b</code>，这时就需要用到浅拷贝和深拷贝。</p>\n<h4 id="%E4%BA%8C%E6%B5%85%E6%8B%B7%E8%B4%9Dshallow-copy">二、浅拷贝（Shallow Copy）<a class="anchor" href="#%E4%BA%8C%E6%B5%85%E6%8B%B7%E8%B4%9Dshallow-copy">§</a></h4>\n<p><strong>1、什么是浅拷贝</strong>\n创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。\n<img src="https://user-gold-cdn.xitu.io/2018/12/24/167de3ac36bb9de7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>\n<p>上图中，SourceObject 是原对象，其中包含基本类型属性 field1 和引用类型属性 refObj。浅拷贝之后基本类型数据 field2 和 filed1 是不同属性，互不影响。但引用类型 refObj 仍然是同一个，改变之后会对另一个对象产生影响。</p>\n<p>简单来说可以理解为浅拷贝只解决了第一层的问题，拷贝第一层的基本类型值，以及第一层的引用类型地址。</p>\n<p><strong>2、浅拷贝使用场景</strong></p>\n<ul>\n<li><code>Object.assign()</code></li>\n</ul>\n<p><code>Object.assign()</code> 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</p>\n<p>有些文章说<code>Object.assign()</code> 是深拷贝，其实这是不正确的。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'muyiy\'</span><span class="token punctuation">,</span>\n  book<span class="token operator">:</span> <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">"You Don\'t Know JS"</span><span class="token punctuation">,</span>\n    price<span class="token operator">:</span> <span class="token string">\'45\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "45"}</span>\n<span class="token comment">// }</span>\n\na<span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'change\'</span>\na<span class="token punctuation">.</span><span class="token property-access">book</span><span class="token punctuation">.</span><span class="token property-access">price</span> <span class="token operator">=</span> <span class="token string">\'55\'</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "change",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "55"}</span>\n<span class="token comment">// }</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "55"}</span>\n<span class="token comment">// }</span>\n</code></pre>\n<p>上面代码改变对象 <code>a</code> 之后，对象 <code>b</code> 的基本属性保持不变。但是当改变对象 <code>a</code> 中的对象 <code>book</code> 时，对象 <code>b</code> 相应的位置也发生了变化。</p>\n<ul>\n<li>展开语法 <code>Spread</code></li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'muyiy\'</span><span class="token punctuation">,</span>\n  book<span class="token operator">:</span> <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">"You Don\'t Know JS"</span><span class="token punctuation">,</span>\n    price<span class="token operator">:</span> <span class="token string">\'45\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token spread operator">...</span>a <span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "45"}</span>\n<span class="token comment">// }</span>\n\na<span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'change\'</span>\na<span class="token punctuation">.</span><span class="token property-access">book</span><span class="token punctuation">.</span><span class="token property-access">price</span> <span class="token operator">=</span> <span class="token string">\'55\'</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "change",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "55"}</span>\n<span class="token comment">// }</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "55"}</span>\n<span class="token comment">// }</span>\n</code></pre>\n<p>通过代码可以看出实际效果和 <code>Object.assign()</code> 是一样的。</p>\n<ul>\n<li><code>Array.prototype.slice()</code></li>\n</ul>\n<p><code>slice()</code> 方法返回一个新的数组对象，这一对象是一个由 <code>begin</code>和 <code>end</code>（不包括<code>end</code>）决定的原数组的浅拷贝。原始数组不会被改变。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">\'1\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// ["1", [2, 3]]</span>\n\na<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'99\'</span>\na<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token comment">// [0, "99", [4, 3]]</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">//  ["1", [4, 3]]</span>\n</code></pre>\n<p>可以看出，改变 <code>a[1]</code> 之后 <code>b[0]</code> 的值并没有发生变化，但改变 <code>a[2][0]</code> 之后，相应的 <code>b[1][0]</code> 的值也发生变化。说明 <code>slice()</code> 方法是浅拷贝，相应的还有<code>concat</code>等，在工作中面对复杂数组结构要额外注意。</p>\n<h4 id="%E4%B8%89%E6%B7%B1%E6%8B%B7%E8%B4%9Ddeep-copy">三、深拷贝（Deep Copy）<a class="anchor" href="#%E4%B8%89%E6%B7%B1%E6%8B%B7%E8%B4%9Ddeep-copy">§</a></h4>\n<p><strong>1、什么是深拷贝</strong></p>\n<p>深拷贝会拷贝所有的属性，并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。深拷贝相比于浅拷贝速度较慢并且花销较大。拷贝前后两个对象互不影响。</p>\n<p><img src="https://user-gold-cdn.xitu.io/2018/12/24/167de3ac3846927b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>\n<p><strong>2、深拷贝使用场景</strong></p>\n<p><code>JSON.parse(JSON.stringify(object))</code></p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'muyiy\'</span><span class="token punctuation">,</span>\n  book<span class="token operator">:</span> <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">"You Don\'t Know JS"</span><span class="token punctuation">,</span>\n    price<span class="token operator">:</span> <span class="token string">\'45\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "45"}</span>\n<span class="token comment">// }</span>\n\na<span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'change\'</span>\na<span class="token punctuation">.</span><span class="token property-access">book</span><span class="token punctuation">.</span><span class="token property-access">price</span> <span class="token operator">=</span> <span class="token string">\'55\'</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "change",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "55"}</span>\n<span class="token comment">// }</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "45"}</span>\n<span class="token comment">// }</span>\n</code></pre>\n<p>完全改变变量 a 之后对 b 没有任何影响，这就是深拷贝的魔力。</p>\n<p>我们看下对数组深拷贝效果如何。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">\'1\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// ["1", [2, 3]]</span>\n\na<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'99\'</span>\na<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token comment">// [0, "99", [4, 3]]</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">//  ["1", [2, 3]]</span>\n</code></pre>\n<p>对数组深拷贝之后，改变原数组不会影响到拷贝之后的数组。</p>\n<p>但是该方法有以下几个问题。</p>\n<p>1、会忽略 <code>undefined</code></p>\n<p>2、会忽略 <code>symbol</code></p>\n<p>3、不能序列化函数</p>\n<p>4、不能解决循环引用的对象</p>\n<p>5、不能正确处理<code>new Date()</code></p>\n<p>6、不能处理正则</p>\n<ul>\n<li><code>undefined</code>、<code>symbol</code> 和函数这三种情况，会直接忽略。</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'muyiy\'</span><span class="token punctuation">,</span>\n  a<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>\n  b<span class="token operator">:</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">(</span><span class="token string">\'muyiy\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">c</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//   a: undefined,</span>\n<span class="token comment">//  b: Symbol(muyiy),</span>\n<span class="token comment">//  c: ƒ ()</span>\n<span class="token comment">// }</span>\n\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {name: "muyiy"}</span>\n</code></pre>\n<ul>\n<li>循环引用情况下，会报错。</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  b<span class="token operator">:</span> <span class="token punctuation">{</span>\n    c<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    d<span class="token operator">:</span> <span class="token number">3</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nobj<span class="token punctuation">.</span><span class="token property-access">a</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token property-access">b</span>\nobj<span class="token punctuation">.</span><span class="token property-access">b</span><span class="token punctuation">.</span><span class="token property-access">c</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token property-access">a</span>\n\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// Uncaught TypeError: Converting circular structure to JSON</span>\n</code></pre>\n<ul>\n<li><code>new Date</code> 情况下，转换结果不正确。</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// Mon Dec 24 2018 10:59:14 GMT+0800 (China Standard Time)</span>\n\n<span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// ""2018-12-24T02:59:25.776Z""</span>\n\n<span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// "2018-12-24T02:59:41.523Z"</span>\n</code></pre>\n<p>解决方法转成字符串或者时间戳就好了。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 1545620645915</span>\n\n<span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span>\n<span class="token comment">// "1545620673267"</span>\n\n<span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// 1545620658688</span>\n</code></pre>\n<ul>\n<li>正则情况下</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'muyiy\'</span><span class="token punctuation">,</span>\n  a<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\'123\'</span><span class="token regex-delimiter">/</span></span>\n<span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n<span class="token comment">// {name: "muyiy", a: /\'123\'/}</span>\n\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {name: "muyiy", a: {}}</span>\n</code></pre>\n<p>PS：为什么会存在这些问题可以学习一下 <code>JSON</code>。</p>\n<p>除了上面介绍的深拷贝方法，常用的还有<code>jQuery.extend()</code> 和 <code>lodash.cloneDeep()</code>，后面文章会详细介绍源码实现，敬请期待！</p>\n<h4 id="%E5%9B%9B%E6%80%BB%E7%BB%93">四、总结<a class="anchor" href="#%E5%9B%9B%E6%80%BB%E7%BB%93">§</a></h4>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>---</th>\n<th>和原数据是否指向同一对象</th>\n<th>第一层数据为基本数据类型</th>\n<th>原数据中包含子对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>赋值</td>\n<td>是</td>\n<td>改变会使原数据一同改变</td>\n<td>改变会使原数据一同改变</td>\n</tr>\n<tr>\n<td>浅拷贝</td>\n<td>否</td>\n<td>改变不会使原数据一同改变</td>\n<td>改变会使原数据一同改变</td>\n</tr>\n<tr>\n<td>深拷贝</td>\n<td>否</td>\n<td>改变不会使原数据一同改变</td>\n<td>改变不会使原数据一同改变</td>\n</tr>\n</tbody>\n</table></div>\n<h3 id="%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%B5%85%E6%8B%B7%E8%B4%9D">实现一个浅拷贝<a class="anchor" href="#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%B5%85%E6%8B%B7%E8%B4%9D">§</a></h3>\n<h4 id="%E6%B5%85%E6%8B%B7%E8%B4%9D-objectassign">浅拷贝 <code>Object.assign</code><a class="anchor" href="#%E6%B5%85%E6%8B%B7%E8%B4%9D-objectassign">§</a></h4>\n<p><code>Object.assign</code>，将所有可枚举属性的值从一个或多个源对象复制到目标对象，同时返回目标对象。（来自 <code>MDN</code>）</p>\n<p>语法如下所示：</p>\n<blockquote>\n<p><code>Object.assign(target, ...sources)</code></p>\n</blockquote>\n<p>其中 <code>target</code> 是目标对象，<code>sources</code> 是源对象，可以有多个，返回修改后的目标对象 <code>target</code>。</p>\n<p>如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后来的源对象的属性将类似地覆盖早先的属性。</p>\n<p><strong>示例 1</strong></p>\n<p>我们知道浅拷贝就是拷贝第一层的<strong>基本类型值</strong>，以及第一层的<strong>引用类型地址</strong>。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token comment">// 第一步</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'advanced\'</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">18</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'muyiy\'</span><span class="token punctuation">,</span>\n  book<span class="token operator">:</span> <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">"You Don\'t Know JS"</span><span class="token punctuation">,</span>\n    price<span class="token operator">:</span> <span class="token string">\'45\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//  age: 18,</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "45"}</span>\n<span class="token comment">// }</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> c<span class="token punctuation">)</span>\n<span class="token comment">// true</span>\n\n<span class="token comment">// 第二步</span>\nb<span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'change\'</span>\nb<span class="token punctuation">.</span><span class="token property-access">book</span><span class="token punctuation">.</span><span class="token property-access">price</span> <span class="token operator">=</span> <span class="token string">\'55\'</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "change",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "55"}</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// 第三步</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//  age: 18,</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "55"}</span>\n<span class="token comment">// }</span>\n</code></pre>\n<p>1、在第一步中，使用 <code>Object.assign</code> 把源对象 <code>b</code> 的值复制到目标对象 <code>a</code> 中，这里把返回值定义为对象 <code>c</code>，可以看出 <code>b</code> 会替换掉 <code>a</code> 中具有相同键的值，即如果目标对象（<code>a</code>）中的属性具有相同的键，则属性将被源对象（<code>b</code>）中的属性覆盖。这里需要注意下，返回对象 <code>c</code> 就是 目标对象 <code>a</code>。</p>\n<p>2、在第二步中，修改源对象 <code>b</code> 的基本类型值（<code>name</code>）和引用类型值（<code>book</code>）。</p>\n<p>3、在第三步中，浅拷贝之后目标对象 <code>a</code> 的基本类型值没有改变，但是引用类型值发生了改变，因为 <code>Object.assign()</code> 拷贝的是属性值。假如源对象的属性值是一个指向对象的引用，它也<strong>只拷贝那个引用地址</strong>。</p>\n<p><strong>示例 2</strong></p>\n<p><code>String</code> 类型和 <code>Symbol</code> 类型的属性都会被拷贝，而且不会跳过那些值为 <code>null</code> 或 <code>undefined</code> 的源对象。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token comment">// 第一步</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'muyiy\'</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">18</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>\n  b1<span class="token operator">:</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">(</span><span class="token string">\'muyiy\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  b2<span class="token operator">:</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span>\n  b3<span class="token operator">:</span> <span class="token keyword nil">undefined</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//  age: 18,</span>\n<span class="token comment">//   b1: Symbol(muyiy),</span>\n<span class="token comment">//   b2: null,</span>\n<span class="token comment">//   b3: undefined</span>\n<span class="token comment">// }</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> c<span class="token punctuation">)</span>\n<span class="token comment">// true</span>\n</code></pre>\n<h4 id="objectassign-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0"><code>Object.assign</code> 模拟实现<a class="anchor" href="#objectassign-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0">§</a></h4>\n<p>实现一个 <code>Object.assign</code> 大致思路如下：</p>\n<p>1、判断原生 <code>Object</code> 是否支持该函数，如果不存在的话创建一个函数 <code>assign</code>，并使用 <code>Object.defineProperty</code> 将该函数绑定到 <code>Object</code> 上。</p>\n<p>2、判断参数是否正确（目标对象不能为空，我们可以直接设置{}传递进去,但必须设置值）。</p>\n<p>3、使用 <code>Object()</code> 转成对象，并保存为 <code>to</code>，最后返回这个对象 <code>to</code>。</p>\n<p>4、使用 <code>for..in</code> 循环遍历出所有可枚举的自有属性。并复制给新的目标对象（使用 <code>hasOwnProperty</code> 获取自有属性，即非原型链上的属性）。</p>\n<p>实现代码如下，这里为了验证方便，使用 <code>assign2</code> 代替 <code>assign</code>。注意此模拟实现不支持 <code>symbol</code> 属性，因为<code>ES5</code> 中根本没有 <code>symbol</code> 。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">assign2</span> <span class="token operator">!=</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Attention 1</span>\n  <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">defineProperty</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">,</span> <span class="token string">\'assign2\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token string">\'use strict\'</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Attention 2</span>\n        <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">\'Cannot convert undefined or null to object\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// Attention 3</span>\n      <span class="token keyword">var</span> to <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>\n\n      <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> nextSource <span class="token operator">=</span> arguments<span class="token punctuation">[</span>index<span class="token punctuation">]</span>\n\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>nextSource <span class="token operator">!=</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// Attention 2</span>\n          <span class="token comment">// Attention 4</span>\n          <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> nextKey <span class="token keyword">in</span> nextSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>nextSource<span class="token punctuation">,</span> nextKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              to<span class="token punctuation">[</span>nextKey<span class="token punctuation">]</span> <span class="token operator">=</span> nextSource<span class="token punctuation">[</span>nextKey<span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword control-flow">return</span> to\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    configurable<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>针对上面的代码做如下扩展。</p>\n<p><strong>注意 1：可枚举性</strong></p>\n<p>原生情况下挂载在 <code>Object</code> 上的属性是不可枚举的，但是直接在 <code>Object</code> 上挂载属性 <code>a</code> 之后是可枚举的，所以这里必须使用 <code>Object.defineProperty</code>，并设置 <code>enumerable: false</code> 以及 <code>writable: true</code>, <code>configurable: true</code>。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 无输出</span>\n\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">)</span>\n<span class="token comment">// []</span>\n</code></pre>\n<p>上面代码说明原生 <code>Object</code> 上的属性不可枚举。</p>\n<p>我们可以使用 2 种方法查看 <code>Object.assign</code> 是否可枚举，使用 <code>Object.getOwnPropertyDescriptor</code> 或者 <code>Object.propertyIsEnumerable</code> 都可以，其中<code>propertyIsEnumerable(..)</code> 会检查给定的属性名是否直接存在于对象中（而不是在原型链上）并且满足 <code>enumerable: true</code>。具体用法如下：</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token comment">// 方法1</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyDescriptor</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">,</span> <span class="token string">\'assign\'</span><span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   value: ƒ,</span>\n<span class="token comment">//  writable: true,   // 可写</span>\n<span class="token comment">//  enumerable: false,  // 不可枚举，注意这里是 false</span>\n<span class="token comment">//  configurable: true  // 可配置</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// 方法2</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">\'assign\'</span><span class="token punctuation">)</span>\n<span class="token comment">// false</span>\n</code></pre>\n<p>上面代码说明 <code>Object.assign</code> 是不可枚举的。</p>\n<p>介绍这么多是因为直接在 <code>Object</code> 上挂载属性 <code>a</code> 之后是可枚举的，我们来看如下代码。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">a</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'log a\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyDescriptor</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">,</span> <span class="token string">\'a\'</span><span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   value: ƒ,</span>\n<span class="token comment">//  writable: true,</span>\n<span class="token comment">//  enumerable: true,  // 注意这里是 true</span>\n<span class="token comment">//  configurable: true</span>\n<span class="token comment">// }</span>\n\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">)</span>\n<span class="token comment">// true</span>\n</code></pre>\n<p>所以要实现 <code>Object.assign</code> 必须使用 <code>Object.defineProperty</code>，并设置 <code>writable: true</code>, <code>enumerable: false</code>, <code>configurable: true</code>，当然默认情况下不设置就是 <code>false</code>。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">defineProperty</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'log b\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyDescriptor</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   value: ƒ,</span>\n<span class="token comment">//  writable: false,   // 注意这里是 false</span>\n<span class="token comment">//  enumerable: false,  // 注意这里是 false</span>\n<span class="token comment">//  configurable: false  // 注意这里是 false</span>\n<span class="token comment">// }</span>\n</code></pre>\n<p>所以具体到本次模拟实现中，相关代码如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token comment">// 判断原生 Object 中是否存在函数 assign2</span>\n<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">assign2</span> <span class="token operator">!=</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 使用属性描述符定义新属性 assign2</span>\n  <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">defineProperty</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">,</span> <span class="token string">"assign2"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token spread operator">...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 默认值是 false，即 enumerable: false</span>\n    writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    configurable<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>注意 2：判断参数是否正确</strong></p>\n<p>有些文章判断参数是否正确是这样的。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>target <span class="token operator">===</span> <span class="token keyword nil">undefined</span> <span class="token operator">||</span> target <span class="token operator">===</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">\'Cannot convert undefined or null to object\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>这样肯定没问题，但是这样写没有必要，因为 <code>undefined</code> 和 <code>null</code> 是相等的（高程 3 P52 ），即 <code>undefined == null</code> 返回 <code>true</code>，只需要按照如下方式判断就好了。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// TypeError if undefined or null</span>\n  <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">\'Cannot convert undefined or null to object\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>注意 3：原始类型被包装为对象</strong></p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> v1 <span class="token operator">=</span> <span class="token string">\'abc\'</span>\n<span class="token keyword">var</span> v2 <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token keyword">var</span> v3 <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token keyword">var</span> v4 <span class="token operator">=</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> v1<span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> v2<span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v4<span class="token punctuation">)</span>\n<span class="token comment">// 原始类型会被包装，null 和 undefined 会被忽略。</span>\n<span class="token comment">// 注意，只有字符串的包装对象才可能有自身可枚举属性。</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n<span class="token comment">// { "0": "a", "1": "b", "2": "c" }</span>\n</code></pre>\n<p>上面代码中的源对象 <code>v2</code>、<code>v3</code>、<code>v4</code> 实际上被忽略了，原因在于他们自身没有可枚举属性。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> v1 <span class="token operator">=</span> <span class="token string">\'abc\'</span>\n<span class="token keyword">var</span> v2 <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token keyword">var</span> v3 <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token keyword">var</span> v4 <span class="token operator">=</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> v5 <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n\n<span class="token comment">// Object.keys(..) 返回一个数组，包含所有可枚举属性</span>\n<span class="token comment">// 只会查找对象直接包含的属性，不查找[[Prototype]]链</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token comment">// [ \'0\', \'1\', \'2\' ]</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span> <span class="token comment">// []</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span> <span class="token comment">// []</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span> <span class="token comment">// []</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span>\n<span class="token comment">// TypeError: Cannot convert undefined or null to object</span>\n\n<span class="token comment">// Object.getOwnPropertyNames(..) 返回一个数组，包含所有属性，无论它们是否可枚举</span>\n<span class="token comment">// 只会查找对象直接包含的属性，不查找[[Prototype]]链</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyNames</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token comment">// [ \'0\', \'1\', \'2\', \'length\' ]</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyNames</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span> <span class="token comment">// []</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyNames</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span> <span class="token comment">// []</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyNames</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span> <span class="token comment">// []</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyNames</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span>\n<span class="token comment">// TypeError: Cannot convert undefined or null to object</span>\n</code></pre>\n<p>但是下面的代码是可以执行的。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">\'abc\'</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>\n  v1<span class="token operator">:</span> <span class="token string">\'def\'</span><span class="token punctuation">,</span>\n  v2<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  v3<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  v4<span class="token operator">:</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  v5<span class="token operator">:</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span>\n  v6<span class="token operator">:</span> <span class="token keyword nil">undefined</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   [String: \'abc\']</span>\n<span class="token comment">//   v1: \'def\',</span>\n<span class="token comment">//   v2: true,</span>\n<span class="token comment">//   v3: 10,</span>\n<span class="token comment">//   v4: Symbol(foo),</span>\n<span class="token comment">//   v5: null,</span>\n<span class="token comment">//   v6: undefined</span>\n<span class="token comment">// }</span>\n</code></pre>\n<p>原因很简单，因为此时 <code>undefined</code>、<code>true</code> 等不是作为对象，而是作为对象 <code>b</code> 的属性值，对象 <code>b</code> 是可枚举的。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token comment">// 接上面的代码</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// [ \'v1\', \'v2\', \'v3\', \'v4\', \'v5\', \'v6\' ]</span>\n</code></pre>\n<p>这里其实又可以看出一个问题来，那就是目标对象是原始类型，会包装成对象，对应上面的代码就是目标对象 <code>a</code> 会被包装成 <code>[String: \'abc\']</code>，那模拟实现时应该如何处理呢？很简单，使用 <code>Object(..)</code> 就可以了。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">\'abc\'</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// [String: \'abc\']</span>\n</code></pre>\n<p>到这里已经介绍很多知识了，让我们再来延伸一下，看看下面的代码能不能执行。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">\'abc\'</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">\'def\'</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n</code></pre>\n<p>答案是否定的，会提示以下错误。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token known-class-name class-name">TypeError</span><span class="token operator">:</span> <span class="token maybe-class-name">Cannot</span> assign to read only property <span class="token string">\'0\'</span> <span class="token keyword">of</span> object <span class="token string">\'[object String]\'</span>\n</code></pre>\n<p>原因在于 <code>Object(&quot;abc&quot;)</code> 时，其属性描述符为不可写，即 <code>writable: false</code>。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">(</span><span class="token string">\'abc\'</span><span class="token punctuation">)</span>\n\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyNames</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span>\n<span class="token comment">// [ \'0\', \'1\', \'2\', \'length\' ]</span>\n\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>myObject<span class="token punctuation">,</span> <span class="token string">\'0\'</span><span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   value: \'a\',</span>\n<span class="token comment">//   writable: false, // 注意这里</span>\n<span class="token comment">//   enumerable: true,</span>\n<span class="token comment">//   configurable: false</span>\n<span class="token comment">// }</span>\n</code></pre>\n<p>同理，下面的代码也会报错。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">\'abc\'</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">\'d\'</span>\n<span class="token punctuation">}</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n<span class="token comment">// TypeError: Cannot assign to read only property \'0\' of object \'[object String]\'</span>\n</code></pre>\n<p>但是并不是说只要 <code>writable: false</code> 就会报错，看下面的代码。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">(</span><span class="token string">\'abc\'</span><span class="token punctuation">)</span>\n\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>myObject<span class="token punctuation">,</span> <span class="token string">\'0\'</span><span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   value: \'a\',</span>\n<span class="token comment">//   writable: false, // 注意这里</span>\n<span class="token comment">//   enumerable: true,</span>\n<span class="token comment">//   configurable: false</span>\n<span class="token comment">// }</span>\n\nmyObject<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'d\'</span>\n<span class="token comment">// \'d\'</span>\n\nmyObject<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n<span class="token comment">// \'a\'</span>\n</code></pre>\n<p>这里并没有报错，原因在于 <code>JS</code> 对于不可写的属性值的修改静默失败（<code>silently failed</code>）,在严格模式下才会提示错误。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token string">\'use strict\'</span>\n<span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">(</span><span class="token string">\'abc\'</span><span class="token punctuation">)</span>\n\nmyObject<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'d\'</span>\n<span class="token comment">// TypeError: Cannot assign to read only property \'0\' of object \'[object String]\'</span>\n</code></pre>\n<p>所以我们在模拟实现 <code>Object.assign</code> 时需要使用严格模式。</p>\n<p><strong>注意 4：存在性</strong></p>\n<p>如何在不访问属性值的情况下判断对象中是否存在某个属性呢，看下面的代码。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> anotherObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 创建一个关联到 anotherObject 的对象</span>\n<span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span>anotherObject<span class="token punctuation">)</span>\nmyObject<span class="token punctuation">.</span><span class="token property-access">b</span> <span class="token operator">=</span> <span class="token number">2</span>\n\n<span class="token string">\'a\'</span> <span class="token keyword">in</span> myObject <span class="token comment">// true</span>\n<span class="token string">\'b\'</span> <span class="token keyword">in</span> myObject <span class="token comment">// true</span>\n\nmyObject<span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\nmyObject<span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">\'b\'</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre>\n<p>这边使用了 <code>in</code> 操作符和 <code>hasOwnProperty</code> 方法，区别如下（你不知道的 JS 上卷 P119）：</p>\n<p>1、<code>in</code> 操作符会检查属性是否在对象及其 <code>[[Prototype]]</code> 原型链中。</p>\n<p>2、<code>hasOwnProperty(..)</code> 只会检查属性是否在 myObject 对象中，不会检查 <code>[[Prototype]]</code> 原型链。</p>\n<p><code>Object.assign</code> 方法肯定不会拷贝原型链上的属性，所以模拟实现时需要用 <code>hasOwnProperty(..)</code> 判断处理下，但是直接使用 <code>myObject.hasOwnProperty(..)</code> 是有问题的，因为有的对象可能没有连接到 <code>Object.prototype</code> 上（比如通过 <code>Object.create(null)</code> 来创建），这种情况下，使用 <code>myObject.hasOwnProperty(..)</code> 就会失败。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">)</span>\nmyObject<span class="token punctuation">.</span><span class="token property-access">b</span> <span class="token operator">=</span> <span class="token number">2</span>\n\n<span class="token string">\'b\'</span> <span class="token keyword">in</span> myObject\n<span class="token comment">// true</span>\n\nmyObject<span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">\'b\'</span><span class="token punctuation">)</span>\n<span class="token comment">// TypeError: myObject.hasOwnProperty is not a function</span>\n</code></pre>\n<p>解决方法也很简单，使用<code>call</code> 就可以了，使用如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">)</span>\nmyObject<span class="token punctuation">.</span><span class="token property-access">b</span> <span class="token operator">=</span> <span class="token number">2</span>\n\n<span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>myObject<span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">)</span>\n<span class="token comment">// true</span>\n</code></pre>\n<p>所以具体到本次模拟实现中，相关代码如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token comment">// 使用 for..in 遍历对象 nextSource 获取属性值</span>\n<span class="token comment">// 此处会同时检查其原型链上的属性</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> nextKey <span class="token keyword">in</span> nextSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 使用 hasOwnProperty 判断对象 nextSource 中是否存在属性 nextKey</span>\n  <span class="token comment">// 过滤其原型链上的属性</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>nextSource<span class="token punctuation">,</span> nextKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 赋值给对象 to,并在遍历结束后返回对象 to</span>\n    to<span class="token punctuation">[</span>nextKey<span class="token punctuation">]</span> <span class="token operator">=</span> nextSource<span class="token punctuation">[</span>nextKey<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%B7%B1%E6%8B%B7%E8%B4%9D">实现一个深拷贝<a class="anchor" href="#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%B7%B1%E6%8B%B7%E8%B4%9D">§</a></h3>\n<h4 id="%E7%AC%AC%E4%B8%80%E6%AD%A5%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0">第一步：简单实现<a class="anchor" href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0">§</a></h4>\n<p>其实深拷贝可以拆分成 2 步，浅拷贝 + 递归，浅拷贝时判断属性值是否是对象，如果是对象就进行递归操作，两个一结合就实现了深拷贝。\n我们可以写出简单浅拷贝代码如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">function</span> <span class="token function">cloneShallow</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> target\n<span class="token punctuation">}</span>\n</code></pre>\n<p>上面代码是浅拷贝实现，只要稍微改动下，加上是否是对象的判断并在相应的位置使用递归就可以实现简单深拷贝。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">function</span> <span class="token function">cloneDeep1</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneDeep1</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 注意这里</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> target\n<span class="token punctuation">}</span>\n</code></pre>\n<p>一个简单的深拷贝就完成了，但是这个实现还存在很多问题。</p>\n<ul>\n<li>1、没有对传入参数进行校验，传入 <code>null</code> 时应该返回 <code>null</code> 而不是 <code>{}</code></li>\n<li>2、对于对象的判断逻辑不严谨，因为 <code>typeof null === \'object\'</code></li>\n<li>3、没有考虑数组的兼容</li>\n</ul>\n<h4 id="%E7%AC%AC%E4%BA%8C%E6%AD%A5%E6%8B%B7%E8%B4%9D%E6%95%B0%E7%BB%84">第二步：拷贝数组<a class="anchor" href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E6%8B%B7%E8%B4%9D%E6%95%B0%E7%BB%84">§</a></h4>\n<p>我们来看下对于对象的判断，判断方案如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">\'[object Object]\'</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>但是用在这里并不合适，因为我们要保留数组这种情况，所以这里使用 <code>typeof</code> 来处理。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">typeof</span> <span class="token keyword null nil">null</span> <span class="token comment">//"object"</span>\n<span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//"object"</span>\n<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//"object"</span>\n<span class="token keyword">typeof</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//"function" (特殊情况)</span>\n</code></pre>\n<p>改动过后的 <code>isObject</code> 判断逻辑如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!=</span> <span class="token keyword null nil">null</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>所以兼容数组的写法如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">function</span> <span class="token function">cloneDeep2</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> source <span class="token comment">// 非对象返回自身</span>\n\n  <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneDeep2</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 注意这里</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> target\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E7%AC%AC%E4%B8%89%E6%AD%A5%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8">第三步：循环引用<a class="anchor" href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8">§</a></h4>\n<p>我们知道 <code>JSON</code> 无法深拷贝循环引用，遇到这种情况会抛出异常。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token comment">// 此处 a 是文章开始的测试用例</span>\na<span class="token punctuation">.</span><span class="token property-access">circleRef</span> <span class="token operator">=</span> a\n\n<span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// TypeError: Converting circular structure to JSON</span>\n</code></pre>\n<p><strong>1、使用哈希表</strong></p>\n<p>解决方案很简单，其实就是循环检测，我们设置一个数组或者哈希表存储已拷贝过的对象，当检测到当前对象已存在于哈希表中时，取出该值并返回即可。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">function</span> <span class="token function">cloneDeep3</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> source\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token method function property-access">has</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> hash<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token comment">// 新增代码，查哈希表</span>\n\n  <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  hash<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token comment">// 新增代码，哈希表设值</span>\n\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneDeep3</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token comment">// 新增代码，传入哈希表</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> target\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>2、使用数组</strong></p>\n<p>这里使用了 <code>ES6</code> 中的 <code>WeakMap</code> 来处理，那在 <code>ES5</code> 下应该如何处理呢？</p>\n<p>也很简单，使用数组来处理就好啦，代码如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">function</span> <span class="token function">cloneDeep3</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> uniqueList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> source\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>uniqueList<span class="token punctuation">)</span> uniqueList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 新增代码，初始化数组</span>\n\n  <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token comment">// ============= 新增代码</span>\n  <span class="token comment">// 数据已经存在，返回保存的数据</span>\n  <span class="token keyword">var</span> uniqueData <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>uniqueList<span class="token punctuation">,</span> source<span class="token punctuation">)</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>uniqueData<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> uniqueData<span class="token punctuation">.</span><span class="token property-access">target</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 数据不存在，保存源数据，以及对应的引用</span>\n  uniqueList<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    source<span class="token operator">:</span> source<span class="token punctuation">,</span>\n    target<span class="token operator">:</span> target\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token comment">// =============</span>\n\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneDeep3</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> uniqueList<span class="token punctuation">)</span> <span class="token comment">// 新增代码，传入数组</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> target\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 新增方法，用于查找</span>\n<span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">source</span> <span class="token operator">===</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword null nil">null</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 用上面测试用例已测试通过</span>\n</code></pre>\n<p>现在已经很完美的解决了循环引用这种情况，那其实还是一种情况是引用丢失，我们看下面的例子。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> obj1<span class="token punctuation">,</span> b<span class="token operator">:</span> obj1 <span class="token punctuation">}</span>\n\nobj2<span class="token punctuation">.</span><span class="token property-access">a</span> <span class="token operator">===</span> obj2<span class="token punctuation">.</span><span class="token property-access">b</span>\n<span class="token comment">// true</span>\n\n<span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token function">cloneDeep2</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>\nobj3<span class="token punctuation">.</span><span class="token property-access">a</span> <span class="token operator">===</span> obj3<span class="token punctuation">.</span><span class="token property-access">b</span>\n<span class="token comment">// false</span>\n</code></pre>\n<p>引用丢失在某些情况下是有问题的，比如上面的对象 <code>obj2</code>，<code>obj2</code> 的键值 <code>a</code> 和 <code>b</code> 同时引用了同一个对象 <code>obj1</code>，使用 <code>cloneDeep2</code> 进行深拷贝后就丢失了引用关系变成了两个不同的对象，那如何处理呢。</p>\n<p>其实你有没有发现，我们的 <code>cloneDeep3</code> 已经解决了这个问题，因为只要存储已拷贝过的对象就可以了。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token function">cloneDeep3</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>\nobj3<span class="token punctuation">.</span><span class="token property-access">a</span> <span class="token operator">===</span> obj3<span class="token punctuation">.</span><span class="token property-access">b</span>\n<span class="token comment">// true</span>\n</code></pre>\n<h4 id="%E7%AC%AC%E5%9B%9B%E6%AD%A5%E6%8B%B7%E8%B4%9D-symbol">第四步：拷贝 Symbol<a class="anchor" href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%E6%8B%B7%E8%B4%9D-symbol">§</a></h4>\n<p>这个时候可能要搞事情了，那我们能不能拷贝 <code>Symbol</code> 类型呢？</p>\n<p>当然可以，不过 <code>Symbol</code> 在 <code>ES6</code> 下才有，我们需要一些方法来检测出 <code>Symbol</code> 类型。</p>\n<pre class="language-autoit"><code class="language-autoit">方法一：Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>\n方法二：Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>\n</code></pre>\n<p>对于方法一可以查找一个给定对象的符号属性时返回一个 <code>?symbol</code> 类型的数组。注意，每个初始化的对象都是没有自己的 <code>symbol</code> 属性的，因此这个数组可能为空，除非你已经在对象上设置了 <code>symbol</code> 属性。（来自 <code>MDN</code>）</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">)</span> <span class="token comment">// 创建新的symbol类型</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">.</span><span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token string">\'b\'</span><span class="token punctuation">)</span> <span class="token comment">// 从全局的symbol注册?表设置和取得symbol</span>\n\nobj<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'localSymbol\'</span>\nobj<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'globalSymbol\'</span>\n\n<span class="token keyword">var</span> objectSymbols <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>objectSymbols<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>objectSymbols<span class="token punctuation">)</span> <span class="token comment">// [Symbol(a), Symbol(b)]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>objectSymbols<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// Symbol(a)</span>\n</code></pre>\n<p>对于方法二返回一个由目标对象自身的属性键组成的数组。它的返回值等同于 <code>Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))</code>。(来自 <code>MDN</code>)</p>\n<pre class="language-js"><code class="language-js"><span class="token known-class-name class-name">Reflect</span><span class="token punctuation">.</span><span class="token method function property-access">ownKeys</span><span class="token punctuation">(</span><span class="token punctuation">{</span> z<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// [ "z", "y", "x" ]</span>\n<span class="token known-class-name class-name">Reflect</span><span class="token punctuation">.</span><span class="token method function property-access">ownKeys</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// ["length"]</span>\n\n<span class="token keyword">var</span> sym <span class="token operator">=</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">.</span><span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token string">\'comet\'</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> sym2 <span class="token operator">=</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">.</span><span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token string">\'meteor\'</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>sym<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  str<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token string">\'773\'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token string">\'0\'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>sym2<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token string">\'-1\'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token string">\'8\'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token string">\'second str\'</span><span class="token operator">:</span> <span class="token number">0</span>\n<span class="token punctuation">}</span>\n<span class="token known-class-name class-name">Reflect</span><span class="token punctuation">.</span><span class="token method function property-access">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n<span class="token comment">// [ "0", "8", "773", "str", "-1", "second str", Symbol(comet), Symbol(meteor) ]</span>\n<span class="token comment">// 注意顺序</span>\n<span class="token comment">// Indexes in numeric order,</span>\n<span class="token comment">// strings in insertion order,</span>\n<span class="token comment">// symbols in insertion order</span>\n</code></pre>\n<p><strong>1、方法一</strong></p>\n<p>思路就是先查找有没有 <code>Symbol</code> 属性，如果查找到则先遍历处理 <code>Symbol</code> 情况，然后再处理正常情况，多出来的逻辑就是下面的新增代码。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">function</span> <span class="token function">cloneDeep4</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> source\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token method function property-access">has</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> hash<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>\n\n  <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  hash<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span>\n\n  <span class="token comment">// ============= 新增代码</span>\n  <span class="token keyword">let</span> symKeys <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertySymbols</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token comment">// 查找</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>symKeys<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 查找成功</span>\n    symKeys<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">symKey</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>symKey<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>symKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneDeep4</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>symKey<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>symKey<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>symKey<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// =============</span>\n\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneDeep4</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> target\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>2、方法二</strong></p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">function</span> <span class="token function">cloneDeep4</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> source\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token method function property-access">has</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> hash<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>\n\n  <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  hash<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span>\n\n  <span class="token known-class-name class-name">Reflect</span><span class="token punctuation">.</span><span class="token method function property-access">ownKeys</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 改动</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneDeep4</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword control-flow">return</span> target\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 测试已通过</span>\n</code></pre>\n<p>这里使用了 <code>Reflect.ownKeys()</code> 获取所有的键值，同时包括 <code>Symbol</code>，对 <code>source</code> 遍历赋值即可。</p>\n<p>写到这里已经差不多了，我们再延伸下，对于 <code>target</code> 换一种写法，改动如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">function</span> <span class="token function">cloneDeep4</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> source\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token method function property-access">has</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> hash<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>\n\n  <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>source<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token spread operator">...</span>source <span class="token punctuation">}</span> <span class="token comment">// 改动 1</span>\n  hash<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span>\n\n  <span class="token known-class-name class-name">Reflect</span><span class="token punctuation">.</span><span class="token method function property-access">ownKeys</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 改动 2</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneDeep4</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword control-flow">return</span> target\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 测试已通过</span>\n</code></pre>\n<p>在改动 1 中，返回一个新数组或者新对象，获取到源对象之后就可以如改动 2 所示传入 <code>target</code> 遍历赋值即可。</p>\n<p><code>Reflect.ownKeys()</code> 这种方式的问题在于不能深拷贝原型链上的数据，因为返回的是目标对象自身的属性键组成的数组。如果想深拷贝原型链上的数据怎么办，那用 <code>for..in</code> 就可以了。</p>\n<p>我们再介绍下两个知识点，分别是构造字面量数组时使用展开语法和构造字面量对象时使用展开语法。（以下代码示例来源于 <code>MDN</code>）</p>\n<p><strong>1、展开语法之字面量数组</strong></p>\n<p>这是 <code>ES2015 （ES6）</code> 才有的语法，可以通过字面量方式, 构造新数组，而不再需要组合使用 <code>push</code>, <code>splice</code>, <code>concat</code> 等方法。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> parts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'shoulders\'</span><span class="token punctuation">,</span> <span class="token string">\'knees\'</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> lyrics <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'head\'</span><span class="token punctuation">,</span> <span class="token spread operator">...</span>parts<span class="token punctuation">,</span> <span class="token string">\'and\'</span><span class="token punctuation">,</span> <span class="token string">\'toes\'</span><span class="token punctuation">]</span>\n<span class="token comment">// ["head", "shoulders", "knees", "and", "toes"]</span>\n</code></pre>\n<p>这里的使用方法和参数列表的展开有点类似。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> w<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token spread operator">...</span>args<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token spread operator">...</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre>\n<p>返回的是新数组，对新数组修改之后不会影响到旧数组，类似于 <code>arr.slice()</code>。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>arr<span class="token punctuation">]</span> <span class="token comment">// like arr.slice()</span>\narr2<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\n\n<span class="token comment">// arr2 此时变成 [1, 2, 3, 4]</span>\n<span class="token comment">// arr 不受影响</span>\n</code></pre>\n<p>展开语法和 <code>Object.assign()</code> 行为一致, 执行的都是浅拷贝（即只遍历一层）。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>a<span class="token punctuation">]</span>\nb<span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>\n<span class="token comment">// [[], [2], [3]]</span>\n</code></pre>\n<p>这里 <code>a</code> 是多层数组，<code>b</code> 只拷贝了第一层，对于第二层依旧和 <code>a</code> 持有同一个地址，所以对 <code>b</code> 的修改会影响到 <code>a</code>。</p>\n<p><strong>2、展开语法之字面量对象</strong></p>\n<p>这是 <code>ES2018</code> 才有的语法，将已有对象的所有可枚举属性拷贝到新构造的对象中，类似于 <code>Object.assign()</code> 方法。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">\'bar\'</span><span class="token punctuation">,</span> x<span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">\'baz\'</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">13</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> clonedObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token spread operator">...</span>obj1 <span class="token punctuation">}</span>\n<span class="token comment">// { foo: "bar", x: 42 }</span>\n\n<span class="token keyword">var</span> mergedObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token spread operator">...</span>obj1<span class="token punctuation">,</span> <span class="token spread operator">...</span>obj2 <span class="token punctuation">}</span>\n<span class="token comment">// { foo: "baz", x: 42, y: 13 }</span>\n</code></pre>\n<p><code>Object.assign()</code> 函数会触发 <code>setters</code>，而展开语法不会。有时候不能替换或者模拟 <code>Object.assign()</code> 函数，因为会得到意想不到的结果，如下所示。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">\'bar\'</span><span class="token punctuation">,</span> x<span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">\'baz\'</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">13</span> <span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>objects</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token spread operator">...</span>objects <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> mergedObj <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span>\n<span class="token comment">// { 0: { foo: \'bar\', x: 42 }, 1: { foo: \'baz\', y: 13 } }</span>\n\n<span class="token keyword">var</span> mergedObj <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span>\n<span class="token comment">// { 0: {}, 1: { foo: \'bar\', x: 42 }, 2: { foo: \'baz\', y: 13 } }</span>\n</code></pre>\n<p>这里实际上是将多个解构变为剩余参数（ <code>rest</code> ），然后再将剩余参数展开为字面量对象.</p>\n<h4 id="%E7%AC%AC%E4%BA%94%E6%AD%A5%E7%A0%B4%E8%A7%A3%E9%80%92%E5%BD%92%E7%88%86%E6%A0%88">第五步：破解递归爆栈<a class="anchor" href="#%E7%AC%AC%E4%BA%94%E6%AD%A5%E7%A0%B4%E8%A7%A3%E9%80%92%E5%BD%92%E7%88%86%E6%A0%88">§</a></h4>\n<p>上面四步使用的都是递归方法，但是有一个问题在于会爆栈，错误提示如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// RangeError: Maximum call stack size exceeded</span>\n</code></pre>\n<p>那应该如何解决呢？其实我们使用循环就可以了，代码如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">cloneDeep5</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token comment">// 栈</span>\n  <span class="token keyword">const</span> loopList <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      parent<span class="token operator">:</span> root<span class="token punctuation">,</span>\n      key<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>\n      data<span class="token operator">:</span> x\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>loopList<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 深度优先</span>\n    <span class="token keyword">const</span> node <span class="token operator">=</span> loopList<span class="token punctuation">.</span><span class="token method function property-access">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> parent <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token property-access">parent</span>\n    <span class="token keyword">const</span> key <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token property-access">key</span>\n    <span class="token keyword">const</span> data <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token property-access">data</span>\n\n    <span class="token comment">// 初始化赋值目标，key为undefined则拷贝到父元素，否则拷贝到子元素</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> parent\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> key <span class="token operator">!==</span> <span class="token string">\'undefined\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      res <span class="token operator">=</span> parent<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 下一次循环</span>\n          loopList<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            parent<span class="token operator">:</span> res<span class="token punctuation">,</span>\n            key<span class="token operator">:</span> k<span class="token punctuation">,</span>\n            data<span class="token operator">:</span> data<span class="token punctuation">[</span>k<span class="token punctuation">]</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n          res<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>k<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword control-flow">return</span> root\n<span class="token punctuation">}</span>\n</code></pre>\n<p>由于篇幅问题就不过多介绍了，详情请参考下面这篇文章。</p>\n<p><a href="https://segmentfault.com/a/1190000016672263">深拷贝的终极探索（99%的人都不知道）</a></p>\n<h2 id="%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0">高阶函数<a class="anchor" href="#%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0">§</a></h2>\n<h3 id="%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0">箭头函数<a class="anchor" href="#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0">§</a></h3>\n<p>箭头函数表达式的语法比函数表达式更短，并且没有自己的this，arguments，super或 new.target。这些函数表达式更适用于那些本来需要匿名函数的地方，并且它们不能用作构造函数。</p>\n<p>引入箭头函数有两个方面的作用：更简短的函数并且不绑定this。</p>\n<p>由于 箭头函数没有自己的this指针，通过 call() 或 apply() 方法调用一个函数时，只能传递参数（不能绑定this---译者注），他们的第一个参数会被忽略。（这种现象对于bind方法同样成立---译者注）</p>\n<p>箭头函数不能用作构造器，和 new一起用会抛出错误。</p>\n<p>箭头函数没有prototype属性。</p>\n<p>yield 关键字通常不能在箭头函数中使用（除非是嵌套在允许使用的函数内）。因此，箭头函数不能用作生成器。</p>\n<h2 id="%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6">事件机制<a class="anchor" href="#%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6">§</a></h2>\n<h2 id="event-loop%E5%8E%9F%E7%90%86">Event Loop原理<a class="anchor" href="#event-loop%E5%8E%9F%E7%90%86">§</a></h2>\n<p><code>Event Loop</code>即事件循环，是指浏览器或<code>Node</code>的一种解决<code>javaScript</code>单线程运行时不会阻塞的一种机制，也就是我们经常使用异步的原理。</p>\n<p>在<code>JavaScript</code>中，任务被分为两种，一种宏任务（<code>MacroTask</code>）也叫<code>Task</code>，一种叫微任务（<code>MicroTask</code>）。</p>\n<h2 id="%E5%8E%9F%E5%9E%8B-prototype">原型 Prototype<a class="anchor" href="#%E5%8E%9F%E5%9E%8B-prototype">§</a></h2>\n<p><img src="https://camo.githubusercontent.com/71cab2efcf6fb8401a2f0ef49443dd94bffc1373/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f332f31332f313632316538613962636230383732643f773d34383826683d35393026663d706e6726733d313531373232" alt="prototype"></p>\n<p>每个函数都有 <code>prototype</code> 属性，除了 <code>Function.prototype.bind()</code>，该属性指向原型。</p>\n<p>每个对象都有 <code>__proto__</code> 属性，指向了创建该对象的构造函数的原型。其实这个属性指向了 <code>[[prototype]]</code>，但是 <code>[[prototype]]</code> 是内部属性，我们并不能访问到，所以使用 <code>_proto_</code> 来访问。</p>\n<p>对象可以通过 <code>__proto__</code> 来寻找不属于该对象的属性，<code>__proto__</code> 将对象连接起来组成了原型链。</p>\n<p>如果你想更进一步的了解原型，可以仔细阅读 <a href="https://github.com/KieSun/Blog/issues/2">深度解析原型中的各个难点</a>。</p>\n<h2 id="new-%E5%8E%9F%E7%90%86">new 原理<a class="anchor" href="#new-%E5%8E%9F%E7%90%86">§</a></h2>\n<ol>\n<li>新生成了一个对象</li>\n<li>链接到原型</li>\n<li>绑定 this</li>\n<li>返回新对象</li>\n</ol>\n<p>在调用 <code>new</code> 的过程中会发生以上四件事情，我们也可以试着来自己实现一个 <code>new</code></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 创建一个空的对象</span>\n    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 获得构造函数</span>\n    <span class="token keyword">let</span> <span class="token maybe-class-name">Con</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n    <span class="token comment">// 链接到原型</span>\n    obj<span class="token punctuation">.</span><span class="token property-access">__proto__</span> <span class="token operator">=</span> <span class="token class-name">Con</span><span class="token punctuation">.</span><span class="token property-access">prototype</span>\n    <span class="token comment">// 绑定 this，执行构造函数</span>\n    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token maybe-class-name">Con</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>\n    <span class="token comment">// 确保 new 出来的是个对象</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj\n<span class="token punctuation">}</span>\n</code></pre>\n<p>对于实例对象来说，都是通过 <code>new</code> 产生的，无论是 <code>function Foo()</code> 还是 <code>let a = { b : 1 }</code> 。</p>\n<p>对于创建一个对象来说，更推荐使用字面量的方式创建对象（无论性能上还是可读性）。因为你使用 <code>new Object()</code> 的方式创建对象需要通过作用域链一层层找到 <code>Object</code>，但是你使用字面量的方式就没这个问题。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Foo</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">// function 就是个语法糖</span>\n<span class="token comment">// 内部等同于 new Function()</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n<span class="token comment">// 这个字面量内部也是使用了 new Object()</span>\n</code></pre>\n<p>对于 <code>new</code> 来说，还需要注意下运算符优先级。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Foo</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token maybe-class-name">Foo</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token class-name">Foo</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'2\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Foo<span class="token punctuation">.</span>getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// -> 1</span>\n<span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -> 2       </span>\n</code></pre>\n<p><img src="https://user-gold-cdn.xitu.io/2018/4/9/162a9c56c838aa88?w=2100&amp;h=540&amp;f=png&amp;s=127506" alt=""></p>\n<p>从上图可以看出，<code>new Foo() </code> 的优先级大于 <code>new Foo</code> ，所以对于上述代码来说可以这样划分执行顺序</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token maybe-class-name">Foo</span><span class="token punctuation">.</span><span class="token method function property-access">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>对于第一个函数来说，先执行了 <code>Foo.getName()</code> ，所以结果为 1；对于后者来说，先执行 <code>new Foo()</code> 产生了一个实例，然后通过原型链找到了 <code>Foo</code> 上的 <code>getName</code> 函数，所以结果为 2。</p>\n<h2 id="promise-%E5%8E%9F%E7%90%86">Promise 原理<a class="anchor" href="#promise-%E5%8E%9F%E7%90%86">§</a></h2>\n<p><code>Promise</code> 是 <code>ES6</code> 新增的语法，解决了回调地狱的问题。</p>\n<p>可以把 <code>Promise</code> 看成一个状态机。初始是 <code>pending</code> 状态，可以通过函数 <code>resolve</code> 和 <code>reject</code> ，将状态转变为 <code>resolved</code> 或者 <code>rejected</code> 状态，状态一旦改变就不能再次变化。</p>\n<p><code>then</code> 函数会返回一个 <code>Promise</code> 实例，并且该返回值是一个新的实例而不是之前的实例。因为 <code>Promise</code> 规范规定除了 <code>pending</code> 状态，其他状态是不可以改变的，如果返回的是一个相同实例的话，多个 <code>then</code> 调用就失去意义了。</p>\n<p>对于 <code>then</code> 来说，本质上可以把它看成是 <code>flatMap</code></p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 三种状态</span>\n<span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">\'pending\'</span>\n<span class="token keyword">const</span> <span class="token constant">RESOLVED</span> <span class="token operator">=</span> <span class="token string">\'resolved\'</span>\n<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">\'rejected\'</span>\n<span class="token comment">// promise 接收一个函数参数，该函数会立即执行</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">MyPromise</span></span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>\n  _this<span class="token punctuation">.</span><span class="token property-access">currentState</span> <span class="token operator">=</span> <span class="token constant">PENDING</span>\n  _this<span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">=</span> <span class="token keyword nil">undefined</span>\n  <span class="token comment">// 用于保存 then 中的回调，只有当 promise</span>\n  <span class="token comment">// 状态为 pending 时才会缓存，并且每个实例至多缓存一个</span>\n  _this<span class="token punctuation">.</span><span class="token property-access">resolvedCallbacks</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  _this<span class="token punctuation">.</span><span class="token property-access">rejectedCallbacks</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  _this<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">resolve</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果 value 是个 Promise，递归执行</span>\n      <span class="token keyword control-flow">return</span> value<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>_this<span class="token punctuation">.</span><span class="token property-access">resolve</span><span class="token punctuation">,</span> _this<span class="token punctuation">.</span><span class="token property-access">reject</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// 异步执行，保证执行顺序</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">.</span><span class="token property-access">currentState</span> <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        _this<span class="token punctuation">.</span><span class="token property-access">currentState</span> <span class="token operator">=</span> <span class="token constant">RESOLVED</span>\n        _this<span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">=</span> value\n        _this<span class="token punctuation">.</span><span class="token property-access">resolvedCallbacks</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token arrow operator">=></span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  _this<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">reject</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// 异步执行，保证执行顺序</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">.</span><span class="token property-access">currentState</span> <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        _this<span class="token punctuation">.</span><span class="token property-access">currentState</span> <span class="token operator">=</span> <span class="token constant">REJECTED</span>\n        _this<span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">=</span> reason\n        _this<span class="token punctuation">.</span><span class="token property-access">rejectedCallbacks</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token arrow operator">=></span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 用于解决以下问题</span>\n  <span class="token comment">// new Promise(() => throw Error(\'error))</span>\n  <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n    <span class="token function">fn</span><span class="token punctuation">(</span>_this<span class="token punctuation">.</span><span class="token property-access">resolve</span><span class="token punctuation">,</span> _this<span class="token punctuation">.</span><span class="token property-access">reject</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    _this<span class="token punctuation">.</span><span class="token method function property-access">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">MyPromise</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">then</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">onResolved<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span>\n  <span class="token comment">// 规范 2.2.7，then 必须返回一个新的 promise</span>\n  <span class="token keyword">var</span> promise2\n  <span class="token comment">// 规范 2.2.onResolved 和 onRejected 都为可选参数</span>\n  <span class="token comment">// 如果类型不是函数需要忽略，同时也实现了透传</span>\n  <span class="token comment">// Promise.resolve(4).then().then((value) => console.log(value))</span>\n  onResolved <span class="token operator">=</span> <span class="token keyword">typeof</span> onResolved <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">?</span> <span class="token function-variable function">onResolved</span> <span class="token operator">:</span> <span class="token parameter">v</span> <span class="token arrow operator">=></span> v\n  onRejected <span class="token operator">=</span> <span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">?</span> <span class="token function-variable function">onRejected</span> <span class="token operator">:</span> <span class="token parameter">r</span> <span class="token arrow operator">=></span> <span class="token keyword control-flow">throw</span> r\n\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">currentState</span> <span class="token operator">===</span> <span class="token constant">RESOLVED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 规范 2.2.4，保证 onFulfilled，onRjected 异步执行</span>\n      <span class="token comment">// 所以用了 setTimeout 包裹下</span>\n      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n          <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">onResolved</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n          <span class="token function">resolutionProcedure</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">currentState</span> <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 异步执行onRejected</span>\n        <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n          <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n          <span class="token function">resolutionProcedure</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">currentState</span> <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      self<span class="token punctuation">.</span><span class="token property-access">resolvedCallbacks</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 考虑到可能会有报错，所以使用 try/catch 包裹</span>\n        <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n          <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">onResolved</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n          <span class="token function">resolutionProcedure</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n      self<span class="token punctuation">.</span><span class="token property-access">rejectedCallbacks</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n          <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n          <span class="token function">resolutionProcedure</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 规范 2.3</span>\n<span class="token keyword">function</span> <span class="token function">resolutionProcedure</span><span class="token punctuation">(</span><span class="token parameter">promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 规范 2.3.1，x 不能和 promise2 相同，避免循环引用</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>promise2 <span class="token operator">===</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">\'Error\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 规范 2.3.2</span>\n  <span class="token comment">// 如果 x 为 Promise，状态为 pending 需要继续等待否则执行</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token property-access">currentState</span> <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      x<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 再次调用该函数是为了确认 x resolve 的</span>\n        <span class="token comment">// 参数是什么类型，如果是基本类型就再次 resolve</span>\n        <span class="token comment">// 把值传给下个 then</span>\n        <span class="token function">resolutionProcedure</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> value<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      x<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 规范 2.3.3.3.3</span>\n  <span class="token comment">// reject 或者 resolve 其中一个执行过得话，忽略其他的</span>\n  <span class="token keyword">let</span> called <span class="token operator">=</span> <span class="token boolean">false</span>\n  <span class="token comment">// 规范 2.3.3，判断 x 是否为对象或者函数</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>x <span class="token operator">!==</span> <span class="token keyword null nil">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 规范 2.3.3.2，如果不能取出 then，就 reject</span>\n    <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 规范 2.3.3.1</span>\n      <span class="token keyword">let</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token property-access">then</span>\n      <span class="token comment">// 如果 then 是函数，调用 x.then</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 规范 2.3.3.3</span>\n        then<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>\n          x<span class="token punctuation">,</span>\n          <span class="token parameter">y</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n            called <span class="token operator">=</span> <span class="token boolean">true</span>\n            <span class="token comment">// 规范 2.3.3.3.1</span>\n            <span class="token function">resolutionProcedure</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token parameter">e</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n            called <span class="token operator">=</span> <span class="token boolean">true</span>\n            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 规范 2.3.3.4</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n      called <span class="token operator">=</span> <span class="token boolean">true</span>\n      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 规范 2.3.4，x 为基本类型</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>以上就是根据 Promise / A+ 规范来实现的代码，可以通过 <code>promises-aplus-tests</code> 的完整测试</p>\n<p><img src="https://user-gold-cdn.xitu.io/2018/3/29/162715e8e37e689d?w=1164&amp;h=636&amp;f=png&amp;s=300285" alt=""></p>\n<h2 id="asyncawait-%E5%8E%9F%E7%90%86">Async/Await 原理<a class="anchor" href="#asyncawait-%E5%8E%9F%E7%90%86">§</a></h2>\n<p>一个函数如果加上 <code>async</code> ，那么该函数就会返回一个 <code>Promise</code></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token string">\'1\'</span>\n<span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -> Promise {&lt;resolved>: "1"}</span>\n</code></pre>\n<p>可以把 <code>async</code> 看成将函数返回值使用 <code>Promise.resolve()</code> 包裹了下。</p>\n<p><code>await</code> 只能在 <code>async</code> 函数中使用</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'finish\'</span><span class="token punctuation">)</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'sleep\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'object\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<p>上面代码会先打印 <code>finish</code> 然后再打印 <code>object</code> 。因为 <code>await</code> 会等待 <code>sleep</code> 函数 <code>resolve</code> ，所以即使后面是同步代码，也不会先去执行同步代码再来执行异步代码。</p>\n<p><code>async 和 await</code> 相比直接使用 <code>Promise</code> 来说，优势在于处理 <code>then</code> 的调用链，能够更清晰准确的写出代码。缺点在于滥用 <code>await</code> 可能会导致性能问题，因为 <code>await</code> 会阻塞代码，也许之后的异步代码并不依赖于前者，但仍然需要等待前者完成，导致代码失去了并发性。</p>\n<p>下面来看一个使用 <code>await</code> 的代码。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">var</span> <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword control-flow">await</span> <span class="token number">10</span><span class="token punctuation">)</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'2\'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment">// -> \'2\' 10</span>\n  a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword control-flow">await</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> a\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'3\'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment">// -> \'3\' 20</span>\n<span class="token punctuation">}</span>\n<span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\na<span class="token operator">++</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'1\'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment">// -> \'1\' 1</span>\n</code></pre>\n<p>对于以上代码你可能会有疑惑，这里说明下原理</p>\n<ul>\n<li>首先函数 <code>b</code> 先执行，在执行到 <code>await 10</code> 之前变量 <code>a</code> 还是 0，因为在 <code>await</code> 内部实现了 <code>generators</code> ，<code>generators</code> 会保留堆栈中东西，所以这时候 <code>a = 0</code> 被保存了下来</li>\n<li>因为 <code>await</code> 是异步操作，遇到<code>await</code>就会立即返回一个<code>pending</code>状态的<code>Promise</code>对象，暂时返回执行代码的控制权，使得函数外的代码得以继续执行，所以会先执行 <code>console.log(\'1\', a)</code></li>\n<li>这时候同步代码执行完毕，开始执行异步代码，将保存下来的值拿出来使用，这时候 <code>a = 10</code></li>\n<li>然后后面就是常规执行代码了</li>\n</ul>\n<h2 id="call-apply-bind-%E5%8C%BA%E5%88%AB">call, apply, bind 区别<a class="anchor" href="#call-apply-bind-%E5%8C%BA%E5%88%AB">§</a></h2>\n<p>首先说下前两者的区别。</p>\n<p><code>call</code> 和 <code>apply</code> 都是为了解决改变 <code>this</code> 的指向。作用都是相同的，只是传参的方式不同。</p>\n<p>除了第一个参数外，<code>call</code> 可以接收一个参数列表，<code>apply</code> 只接受一个参数数组。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\ngetValue<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">\'yck\'</span><span class="token punctuation">,</span> <span class="token string">\'24\'</span><span class="token punctuation">)</span>\ngetValue<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'yck\'</span><span class="token punctuation">,</span> <span class="token string">\'24\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0-call-%E5%92%8C-apply">模拟实现 call 和 apply<a class="anchor" href="#%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0-call-%E5%92%8C-apply">§</a></h3>\n<p>可以从以下几点来考虑如何实现</p>\n<ul>\n<li>不传入第一个参数，那么默认为 <code>window</code></li>\n<li>改变了 this 指向，让新的对象可以执行该函数。那么思路是否可以变成给新的对象添加一个函数，然后在执行完以后删除？</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> context <span class="token operator">=</span> context <span class="token operator">||</span> <span class="token dom variable">window</span>\n  <span class="token comment">// 给 context 添加一个属性</span>\n  <span class="token comment">// getValue.call(a, \'yck\', \'24\') => a.fn = getValue</span>\n  context<span class="token punctuation">.</span><span class="token property-access">fn</span> <span class="token operator">=</span> <span class="token keyword">this</span>\n  <span class="token comment">// 将 context 后面的参数取出来</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token comment">// getValue.call(a, \'yck\', \'24\') => a.fn(\'yck\', \'24\')</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token method function property-access">fn</span><span class="token punctuation">(</span><span class="token spread operator">...</span>args<span class="token punctuation">)</span>\n  <span class="token comment">// 删除 fn</span>\n  <span class="token keyword">delete</span> context<span class="token punctuation">.</span><span class="token property-access">fn</span>\n  <span class="token keyword control-flow">return</span> result\n<span class="token punctuation">}</span>\n</code></pre>\n<p>以上就是 <code>call</code> 的思路，<code>apply</code> 的实现也类似</p>\n<pre class="language-js"><code class="language-js"><span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> context <span class="token operator">=</span> context <span class="token operator">||</span> <span class="token dom variable">window</span>\n  context<span class="token punctuation">.</span><span class="token property-access">fn</span> <span class="token operator">=</span> <span class="token keyword">this</span>\n\n  <span class="token keyword">var</span> result\n  <span class="token comment">// 需要判断是否存储第二个参数</span>\n  <span class="token comment">// 如果存在，就将第二个参数展开</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token method function property-access">fn</span><span class="token punctuation">(</span><span class="token spread operator">...</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token method function property-access">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">delete</span> context<span class="token punctuation">.</span><span class="token property-access">fn</span>\n  <span class="token keyword control-flow">return</span> result\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0-bind">模拟实现 bind<a class="anchor" href="#%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0-bind">§</a></h3>\n<p><code>bind</code> 和其他两个方法作用也是一致的，只是该方法会返回一个函数。并且我们可以通过 <code>bind</code> 实现柯里化。</p>\n<p>同样的，也来模拟实现下 <code>bind</code></p>\n<pre class="language-js"><code class="language-js"><span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">\'Error\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token comment">// 返回一个函数</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 因为返回了一个函数，我们可以 new F()，所以需要判断</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">F</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">_this</span><span class="token punctuation">(</span><span class="token spread operator">...</span>args<span class="token punctuation">,</span> <span class="token spread operator">...</span>arguments<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> _this<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span><span class="token spread operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81%E5%8E%9F%E7%90%86">防抖/节流原理<a class="anchor" href="#%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81%E5%8E%9F%E7%90%86">§</a></h2>\n<h3 id="%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0">实现一个防抖函数<a class="anchor" href="#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0">§</a></h3>\n<p>你是否在日常开发中遇到一个问题，在滚动事件中需要做个复杂计算或者实现一个按钮的防二次点击操作。</p>\n<p>这些需求都可以通过函数防抖动来实现。尤其是第一个需求，如果在频繁的事件回调中做复杂计算，很有可能导致页面卡顿，不如将多次计算合并为一次计算，只在一个精确点做操作。</p>\n<p>PS：防抖和节流的作用都是防止函数多次调用。区别在于，假设一个用户一直触发这个函数，且每次触发函数的间隔小于 wait，防抖的情况下只会调用一次，而节流的 情况会每隔一定时间（参数 wait）调用函数。</p>\n<p>我们先来看一个袖珍版的防抖理解一下防抖的实现：</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// func是用户传入需要防抖的函数</span>\n<span class="token comment">// wait是等待时间</span>\n<span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait <span class="token operator">=</span> <span class="token number">50</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 缓存一个定时器id</span>\n  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token comment">// 这里返回的函数是每次用户实际调用的防抖函数</span>\n  <span class="token comment">// 如果已经设定过定时器了就清空上一次的定时器</span>\n  <span class="token comment">// 开始一个新的定时器，延迟执行用户传入的方法</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 不难看出如果用户调用该函数的间隔小于wait的情况下，上一次的时间还未到就被清除了，并不会执行函数</span>\n</code></pre>\n<p>这是一个简单版的防抖，但是有缺陷，这个防抖只能在最后调用。一般的防抖会有 immediate 选项，表示是否立即调用。这两者的区别，举个栗子来说：</p>\n<ul>\n<li>例如在搜索引擎搜索问题的时候，我们当然是希望用户输入完最后一个字才调用查询接口，这个时候适用<code>延迟执行</code>的防抖函数，它总是在一连串（间隔小于 wait 的）函数触发之后调用。</li>\n<li>例如用户给 interviewMap 点 star 的时候，我们希望用户点第一下的时候就去调用接口，并且成功之后改变 star 按钮的样子，用户就可以立马得到反馈是否 star 成功了，这个情况适用<code>立即执行</code>的防抖函数，它总是在第一次调用，并且下一次调用必须与前一次调用的时间间隔大于 wait 才会触发。</li>\n</ul>\n<p>下面我们来实现一个带有立即执行选项的防抖函数</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 这个是用来获取当前时间戳的</span>\n<span class="token keyword">function</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行\n *\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">function</span><span class="token punctuation">}</span></span> <span class="token parameter">func</span>        回调函数\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>   <span class="token parameter">wait</span>        表示时间窗口的间隔\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>  <span class="token parameter">immediate</span>   设置为ture时，是否立即调用函数\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">function</span><span class="token punctuation">}</span></span>             返回客户调用函数\n */</span>\n<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">,</span> immediate <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> timer<span class="token punctuation">,</span> context<span class="token punctuation">,</span> args\n\n  <span class="token comment">// 延迟执行函数</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// 延迟函数执行完毕，清空缓存的定时器序号</span>\n      timer <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n      <span class="token comment">// 延迟执行的情况下，函数会在延迟函数中执行</span>\n      <span class="token comment">// 使用到之前缓存的参数和上下文</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n        context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>\n\n  <span class="token comment">// 这里返回的函数是每次实际调用的函数</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果没有创建延迟执行函数（later），就创建一个</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      timer <span class="token operator">=</span> <span class="token function">later</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token comment">// 如果是立即执行，调用函数</span>\n      <span class="token comment">// 否则缓存参数和调用上下文</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        context <span class="token operator">=</span> <span class="token keyword">this</span>\n        args <span class="token operator">=</span> params\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个</span>\n      <span class="token comment">// 这样做延迟函数会重新计时</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n      timer <span class="token operator">=</span> <span class="token function">later</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>整体函数实现的不难，总结一下。</p>\n<ul>\n<li>对于按钮防点击来说的实现：如果函数是立即执行的，就立即调用，如果函数是延迟执行的，就缓存上下文和参数，放到延迟函数中去执行。一旦我开始一个定时器，只要我定时器还在，你每次点击我都重新计时。一旦你点累了，定时器时间到，定时器重置为 <code>null</code>，就可以再次点击了。</li>\n<li>对于延时执行函数来说的实现：清除定时器 ID，如果是延迟调用就调用函数</li>\n</ul>\n<h3 id="%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0">实现一个节流函数<a class="anchor" href="#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0">§</a></h3>\n<p>防抖动和节流本质是不一样的。防抖动是将多次执行变为最后一次执行，节流是将多次执行变成每隔一段时间执行。</p>\n<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/**\n * underscore 节流函数，返回函数连续调用时，func 执行频率限定为 次 / wait\n *\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">function</span><span class="token punctuation">}</span></span>   <span class="token parameter">func</span>      回调函数\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>     <span class="token parameter">wait</span>      表示时间窗口的间隔\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span>     <span class="token parameter">options</span>   如果想忽略开始函数的的调用，传入<span class="token punctuation">{</span>leading: false<span class="token punctuation">}</span>。\n *                                如果想忽略结尾函数的调用，传入<span class="token punctuation">{</span>trailing: false<span class="token punctuation">}</span>\n *                                两者不能共存，否则函数不能执行\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">function</span><span class="token punctuation">}</span></span>             返回客户调用函数\n */</span>\n_<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">throttle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> context<span class="token punctuation">,</span> args<span class="token punctuation">,</span> result\n  <span class="token keyword">var</span> timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n  <span class="token comment">// 之前的时间戳</span>\n  <span class="token keyword">var</span> previous <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token comment">// 如果 options 没传则设为空对象</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">)</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token comment">// 定时器回调函数</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果设置了 leading，就将 previous 设为 0</span>\n    <span class="token comment">// 用于下面函数的第一个 if 判断</span>\n    previous <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token property-access">leading</span> <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> _<span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 置空一是为了防止内存泄漏，二是为了下面的定时器判断</span>\n    timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n    result <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 获得当前时间戳</span>\n    <span class="token keyword">var</span> now <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 首次进入前者肯定为 true</span>\n    <span class="token comment">// 如果需要第一次不执行函数</span>\n    <span class="token comment">// 就将上次时间戳设为当前的</span>\n    <span class="token comment">// 这样在接下来计算 remaining 的值时会大于0</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>previous <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token property-access">leading</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> previous <span class="token operator">=</span> now\n    <span class="token comment">// 计算剩余时间</span>\n    <span class="token keyword">var</span> remaining <span class="token operator">=</span> wait <span class="token operator">-</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous<span class="token punctuation">)</span>\n    context <span class="token operator">=</span> <span class="token keyword">this</span>\n    args <span class="token operator">=</span> arguments\n    <span class="token comment">// 如果当前调用已经大于上次调用时间 + wait</span>\n    <span class="token comment">// 或者用户手动调了时间</span>\n    <span class="token comment">// 如果设置了 trailing，只会进入这个条件</span>\n    <span class="token comment">// 如果没有设置 leading，那么第一次会进入这个条件</span>\n    <span class="token comment">// 还有一点，你可能会觉得开启了定时器那么应该不会进入这个 if 条件了</span>\n    <span class="token comment">// 其实还是会进入的，因为定时器的延时</span>\n    <span class="token comment">// 并不是准确的时间，很可能你设置了2秒</span>\n    <span class="token comment">// 但是他需要2.2秒才触发，这时候就会进入这个条件</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> remaining <span class="token operator">></span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果存在定时器就清理掉否则会调用二次回调</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>\n        timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n      <span class="token punctuation">}</span>\n      previous <span class="token operator">=</span> now\n      result <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token property-access">trailing</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 判断是否设置了定时器和 trailing</span>\n      <span class="token comment">// 没有的话就开启一个定时器</span>\n      <span class="token comment">// 并且不能不能同时设置 leading 和 trailing</span>\n      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> result\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AF%A6%E8%A7%A3">模块化详解<a class="anchor" href="#%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AF%A6%E8%A7%A3">§</a></h2>\n<p>在有 Babel 的情况下，我们可以直接使用 ES6 的模块化</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// file a.js</span>\n<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">// file b.js</span>\n<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">\'./a.js\'</span>\n<span class="token keyword module">import</span> <span class="token constant">XXX</span> <span class="token keyword module">from</span> <span class="token string">\'./b.js\'</span>\n</code></pre>\n<h3 id="commonjs">CommonJS<a class="anchor" href="#commonjs">§</a></h3>\n<p><code>CommonJs</code> 是 Node 独有的规范，浏览器中使用就需要用到 <code>Browserify</code> 解析了。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// a.js</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// or</span>\nexports<span class="token punctuation">.</span><span class="token property-access">a</span> <span class="token operator">=</span> <span class="token number">1</span>\n\n<span class="token comment">// b.js</span>\n<span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./a.js\'</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">a</span> <span class="token comment">// -> log 1</span>\n</code></pre>\n<p>在上述代码中，<code>module.exports</code> 和 <code>exports</code> 很容易混淆，让我们来看看大致内部实现</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./a.js\'</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">a</span>\n<span class="token comment">// 这里其实就是包装了一层立即执行函数，这样就不会污染全局变量了，</span>\n<span class="token comment">// 重要的是 module 这里，module 是 Node 独有的一个变量</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 基本实现</span>\n<span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">{</span>\n  exports<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// exports 就是个空对象</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 这个是为什么 exports 和 module.exports 用法相似的原因</span>\n<span class="token keyword">var</span> exports <span class="token operator">=</span> module<span class="token punctuation">.</span><span class="token property-access">exports</span>\n<span class="token keyword">var</span> <span class="token function-variable function">load</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 导出的东西</span>\n  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>\n  module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> a\n  <span class="token keyword control-flow">return</span> module<span class="token punctuation">.</span><span class="token property-access">exports</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>再来说说 <code>module.exports</code> 和 <code>exports</code>，用法其实是相似的，但是不能对 <code>exports</code> 直接赋值，不会有任何效果。</p>\n<p>对于 <code>CommonJS</code> 和 ES6 中的模块化的两者区别是：</p>\n<ul>\n<li>\n<p>前者支持动态导入，也就是 <code>require(${path}/xx.js)</code>，后者目前不支持，但是已有提案</p>\n</li>\n<li>\n<p>前者是同步导入，因为用于服务端，文件都在本地，同步导入即使卡住主线程影响也不大。而后者是异步导入，因为用于浏览器，需要下载文件，如果也采用同步导入会对渲染有很大影响</p>\n</li>\n<li>\n<p>前者在导出时都是值拷贝，就算导出的值变了，导入的值也不会改变，所以如果想更新值，必须重新导入一次。但是后者采用实时绑定的方式，导入导出的值都指向同一个内存地址，所以导入值会跟随导出值变化</p>\n</li>\n<li>\n<p>后者会编译成 <code>require/exports</code> 来执行的</p>\n</li>\n</ul>\n<h3 id="amd">AMD<a class="anchor" href="#amd">§</a></h3>\n<p>AMD 是由 <code>RequireJS</code> 提出的</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// AMD</span>\n<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'./a\'</span><span class="token punctuation">,</span> <span class="token string">\'./b\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  a<span class="token punctuation">.</span><span class="token keyword control-flow">do</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  b<span class="token punctuation">.</span><span class="token keyword control-flow">do</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./a\'</span><span class="token punctuation">)</span>\n  a<span class="token punctuation">.</span><span class="token method function property-access">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./b\'</span><span class="token punctuation">)</span>\n  b<span class="token punctuation">.</span><span class="token method function property-access">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement("link", { href: "/favicon.png", rel: "icon", type: "image/png" }),
        React.createElement("script", { async: true, "data-ad-client": "ca-pub-5052023368276507", src: "https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0", id: "%E6%B7%B1%E5%85%A5-javascript" },
        "\u6DF1\u5165 JavaScript",
        React.createElement("a", { className: "anchor", href: "#%E6%B7%B1%E5%85%A5-javascript" }, "\u00A7")),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%97%AD%E5%8C%85">作用域闭包<a class="anchor" href="#%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%97%AD%E5%8C%85">§</a></h2>\n<h3 id="%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87">执行上下文<a class="anchor" href="#%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87">§</a></h3>\n<p>当执行 JS 代码时，会产生三种执行上下文</p>\n<ul>\n<li>全局执行上下文</li>\n<li>函数执行上下文</li>\n<li>eval 执行上下文</li>\n</ul>\n<p>每个执行上下文中都有三个重要的属性</p>\n<ul>\n<li>变量对象（VO），包含变量、函数声明和函数的形参，该属性只能在全局上下文中访问</li>\n<li>作用域链（JS 采用词法作用域，也就是说变量的作用域是在定义时就决定了）</li>\n<li>this</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<p>对于上述代码，执行栈中有两个上下文：全局上下文和函数 <code>foo</code> 上下文。</p>\n<pre class="language-js"><code class="language-js">stack <span class="token operator">=</span> <span class="token punctuation">[</span>globalContext<span class="token punctuation">,</span> fooContext<span class="token punctuation">]</span>\n</code></pre>\n<p>对于全局上下文来说，VO 大概是这样的</p>\n<pre class="language-js"><code class="language-js">globalContext<span class="token punctuation">.</span><span class="token constant">VO</span> <span class="token operator">===</span> globe\nglobalContext<span class="token punctuation">.</span><span class="token constant">VO</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    a<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>\n  foo<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token known-class-name class-name">Function</span><span class="token operator">></span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>对于函数 <code>foo</code> 来说，VO 不能访问，只能访问到活动对象（AO）</p>\n<pre class="language-js"><code class="language-js">fooContext<span class="token punctuation">.</span><span class="token constant">VO</span> <span class="token operator">===</span> foo<span class="token punctuation">.</span><span class="token constant">AO</span>\nfooContext<span class="token punctuation">.</span><span class="token constant">AO</span> <span class="token punctuation">{</span>\n    i<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>\n  b<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>\n    arguments<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">></span>\n<span class="token punctuation">}</span>\n<span class="token comment">// arguments 是函数独有的对象(箭头函数没有)</span>\n<span class="token comment">// 该对象是一个伪数组，有 `length` 属性且可以通过下标访问元素</span>\n<span class="token comment">// 该对象中的 `callee` 属性代表函数本身</span>\n<span class="token comment">// `caller` 属性代表函数的调用者</span>\n</code></pre>\n<p>对于作用域链，可以把它理解成包含自身变量对象和上级变量对象的列表，通过 <code>[[Scope]]</code> 属性查找上级变量</p>\n<pre class="language-js"><code class="language-js">fooContext<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token maybe-class-name">Scope</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n    globalContext<span class="token punctuation">.</span><span class="token constant">VO</span>\n<span class="token punctuation">]</span>\nfooContext<span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">Scope</span></span> <span class="token operator">=</span> fooContext<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token maybe-class-name">Scope</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> fooContext<span class="token punctuation">.</span><span class="token constant">VO</span>\nfooContext<span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">Scope</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n    fooContext<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">,</span>\n    globalContext<span class="token punctuation">.</span><span class="token constant">VO</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>接下来让我们看一个老生常谈的例子，<code>var</code></p>\n<pre class="language-js"><code class="language-js"><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// call b</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">\'Hello world\'</span>\n\n<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'call b\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>想必以上的输出大家肯定都已经明白了，这是因为函数和变量提升的原因。通常提升的解释是说将声明的代码移动到了顶部，这其实没有什么错误，便于大家理解。但是更准确的解释应该是：在生成执行上下文时，会有两个阶段。第一个阶段是创建的阶段（具体步骤是创建 VO），JS 解释器会找出需要提升的变量和函数，并且给他们提前在内存中开辟好空间，函数的话会将整个函数存入内存中，变量只声明并且赋值为 undefined，所以在第二个阶段，也就是代码执行阶段，我们可以直接提前使用。</p>\n<p>在提升的过程中，相同的函数会覆盖上一个函数，并且函数优先于变量提升</p>\n<pre class="language-js"><code class="language-js"><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// call b second</span>\n\n<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'call b fist\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'call b second\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">\'Hello world\'</span>\n</code></pre>\n<p><code>var</code> 会产生很多错误，所以在 ES6 中引入了 <code>let</code>。<code>let</code> 不能在声明前使用，但是这并不是常说的 <code>let</code> 不会提升，<code>let</code> 提升了声明但没有赋值，因为临时死区导致了并不能在声明前使用。</p>\n<p>对于非匿名的立即执行函数需要注意以下一点</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    foo <span class="token operator">=</span> <span class="token number">10</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token comment">// -> ƒ foo() { foo = 10 ; console.log(foo) }</span>\n</code></pre>\n<p>因为当 JS 解释器在遇到非匿名的立即执行函数时，会创建一个辅助的特定对象，然后将函数名称作为这个对象的属性，因此函数内部才可以访问到 <code>foo</code>，但是这个值又是只读的，所以对它的赋值并不生效，所以打印的结果还是这个函数，并且外部的值也没有发生更改。</p>\n<pre class="language-js"><code class="language-js">specialObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token maybe-class-name">Scope</span> <span class="token operator">=</span> specialObject <span class="token operator">+</span> <span class="token maybe-class-name">Scope</span><span class="token punctuation">;</span>\n\nfoo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FunctionExpression</span><span class="token punctuation">;</span>\nfoo<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token maybe-class-name">Scope</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token maybe-class-name">Scope</span><span class="token punctuation">;</span>\nspecialObject<span class="token punctuation">.</span><span class="token property-access">foo</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span> <span class="token comment">// {DontDelete}, {ReadOnly}</span>\n\n<span class="token keyword">delete</span> <span class="token maybe-class-name">Scope</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// remove specialObject from the front of scope chain</span>\n</code></pre>\n<h3 id="%E9%97%AD%E5%8C%85">闭包<a class="anchor" href="#%E9%97%AD%E5%8C%85">§</a></h3>\n<p>闭包的定义很简单：函数 A 返回了一个函数 B，并且函数 B 中使用了函数 A 的变量，函数 B 就被称为闭包。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> <span class="token constant">B</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>你是否会疑惑，为什么函数 A 已经弹出调用栈了，为什么函数 B 还能引用到函数 A 中的变量。因为函数 A 中的变量这时候是存储在堆上的。现在的 JS 引擎可以通过逃逸分析辨别出哪些变量需要存储在堆上，哪些需要存储在栈上。</p>\n<p>经典面试题，循环中使用闭包解决 <code>var</code> 定义函数的问题</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">for</span> <span class="token punctuation">(</span> var i<span class="token operator">=</span><span class="token number">1</span><span class="token comment">; i&lt;=5; i++) {</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> function <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token comment">;</span>\n  }<span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token comment">;</span>\n}\n</code></pre>\n<p>首先因为 <code>setTimeout</code> 是个异步函数，所有会先把循环全部执行完毕，这时候 <code>i</code> 就是 6 了，所以会输出一堆 6。</p>\n<p>解决办法两种，第一种使用闭包</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> j <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>第二种就是使用 <code>setTimeout</code> 的第三个参数</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span>\n    <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span>\n    i\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>第三种就是使用 <code>let</code> 定义 <code>i</code> 了</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>因为对于 <code>let</code> 来说，他会创建一个块级作用域，相当于</p>\n<pre class="language-js"><code class="language-js"><span class="token punctuation">{</span> <span class="token comment">// 形成块级作用域</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> ii <span class="token operator">=</span> i\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span> ii <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  i<span class="token operator">++</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> ii <span class="token operator">=</span> i\n  <span class="token punctuation">}</span>\n  i<span class="token operator">++</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> ii <span class="token operator">=</span> i\n  <span class="token punctuation">}</span>\n  <span class="token spread operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="this-%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90">this 全面解析<a class="anchor" href="#this-%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90">§</a></h2>\n<p><code>this</code> 是很多人会混淆的概念，但是其实他一点都不难，你只需要记住几个规则就可以了。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">a</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  foo<span class="token operator">:</span> foo\n<span class="token punctuation">}</span>\nobj<span class="token punctuation">.</span><span class="token method function property-access">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 以上两者情况 `this` 只依赖于调用函数前的对象，优先级是第二个情况大于第一个情况</span>\n\n<span class="token comment">// 以下情况是优先级最高的，`this` 只会绑定在 `c` 上，不会被任何方式修改 `this` 指向</span>\n<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nc<span class="token punctuation">.</span><span class="token property-access">a</span> <span class="token operator">=</span> <span class="token number">3</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token property-access">a</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 还有种就是利用 call，apply，bind 改变 this，这个优先级仅次于 new</span>\n</code></pre>\n<p>以上几种情况明白了，很多代码中的 <code>this</code> 应该就没什么问题了，下面让我们看看箭头函数中的 <code>this</code></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n          <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>箭头函数其实是没有 <code>this</code> 的，这个函数中的 <code>this</code> 只取决于他外面的第一个不是箭头函数的函数的 <code>this</code>。在这个例子中，因为调用 <code>a</code> 符合前面代码中的第一个情况，所以 <code>this</code> 是 <code>window</code>。并且 <code>this</code> 一旦绑定了上下文，就不会被任何代码改变。</p>\n<h2 id="%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%8E%9F%E7%90%86">深浅拷贝原理<a class="anchor" href="#%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%8E%9F%E7%90%86">§</a></h2>\n<blockquote></blockquote>\n<p>::: tip\n作者：木易杨说</p>\n<p>链接：<a href="https://juejin.im/post/5c45112e6fb9a04a027aa8fe">https://juejin.im/post/5c45112e6fb9a04a027aa8fe</a></p>\n<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n:::</p>\n<h3 id="%E8%B5%8B%E5%80%BC%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB">赋值、浅拷贝和深拷贝的区别<a class="anchor" href="#%E8%B5%8B%E5%80%BC%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB">§</a></h3>\n<h4 id="%E4%B8%80%E8%B5%8B%E5%80%BCcopy">一、赋值（Copy）<a class="anchor" href="#%E4%B8%80%E8%B5%8B%E5%80%BCcopy">§</a></h4>\n<p>赋值是将某一数值或对象赋给某个变量的过程，分为下面 2 部分</p>\n<ul>\n<li>基本数据类型：赋值，赋值之后两个变量互不影响</li>\n<li>引用数据类型：赋址，两个变量具有相同的引用，指向同一个对象，相互之间有影响</li>\n</ul>\n<p>对基本类型进行赋值操作，两个变量互不影响。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">\'muyiy\'</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> a\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// muyiy</span>\n\na <span class="token operator">=</span> <span class="token string">\'change\'</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token comment">// change</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// muyiy</span>\n</code></pre>\n<p>对引用类型进行赋址操作，两个变量指向同一个对象，改变变量 <code>a</code> 之后会影响变量 <code>b</code>，哪怕改变的只是对象 <code>a</code> 中的基本类型数据。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'muyiy\'</span><span class="token punctuation">,</span>\n  book<span class="token operator">:</span> <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">"You Don\'t Know JS"</span><span class="token punctuation">,</span>\n    price<span class="token operator">:</span> <span class="token string">\'45\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> a\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "45"}</span>\n<span class="token comment">// }</span>\n\na<span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'change\'</span>\na<span class="token punctuation">.</span><span class="token property-access">book</span><span class="token punctuation">.</span><span class="token property-access">price</span> <span class="token operator">=</span> <span class="token string">\'55\'</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "change",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "55"}</span>\n<span class="token comment">// }</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "change",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "55"}</span>\n<span class="token comment">// }</span>\n</code></pre>\n<p>通常在开发中并不希望改变变量 <code>a</code> 之后会影响到变量 <code>b</code>，这时就需要用到浅拷贝和深拷贝。</p>\n<h4 id="%E4%BA%8C%E6%B5%85%E6%8B%B7%E8%B4%9Dshallow-copy">二、浅拷贝（Shallow Copy）<a class="anchor" href="#%E4%BA%8C%E6%B5%85%E6%8B%B7%E8%B4%9Dshallow-copy">§</a></h4>\n<p><strong>1、什么是浅拷贝</strong>\n创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。\n<img src="https://user-gold-cdn.xitu.io/2018/12/24/167de3ac36bb9de7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>\n<p>上图中，SourceObject 是原对象，其中包含基本类型属性 field1 和引用类型属性 refObj。浅拷贝之后基本类型数据 field2 和 filed1 是不同属性，互不影响。但引用类型 refObj 仍然是同一个，改变之后会对另一个对象产生影响。</p>\n<p>简单来说可以理解为浅拷贝只解决了第一层的问题，拷贝第一层的基本类型值，以及第一层的引用类型地址。</p>\n<p><strong>2、浅拷贝使用场景</strong></p>\n<ul>\n<li><code>Object.assign()</code></li>\n</ul>\n<p><code>Object.assign()</code> 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</p>\n<p>有些文章说<code>Object.assign()</code> 是深拷贝，其实这是不正确的。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'muyiy\'</span><span class="token punctuation">,</span>\n  book<span class="token operator">:</span> <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">"You Don\'t Know JS"</span><span class="token punctuation">,</span>\n    price<span class="token operator">:</span> <span class="token string">\'45\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "45"}</span>\n<span class="token comment">// }</span>\n\na<span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'change\'</span>\na<span class="token punctuation">.</span><span class="token property-access">book</span><span class="token punctuation">.</span><span class="token property-access">price</span> <span class="token operator">=</span> <span class="token string">\'55\'</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "change",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "55"}</span>\n<span class="token comment">// }</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "55"}</span>\n<span class="token comment">// }</span>\n</code></pre>\n<p>上面代码改变对象 <code>a</code> 之后，对象 <code>b</code> 的基本属性保持不变。但是当改变对象 <code>a</code> 中的对象 <code>book</code> 时，对象 <code>b</code> 相应的位置也发生了变化。</p>\n<ul>\n<li>展开语法 <code>Spread</code></li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'muyiy\'</span><span class="token punctuation">,</span>\n  book<span class="token operator">:</span> <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">"You Don\'t Know JS"</span><span class="token punctuation">,</span>\n    price<span class="token operator">:</span> <span class="token string">\'45\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token spread operator">...</span>a <span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "45"}</span>\n<span class="token comment">// }</span>\n\na<span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'change\'</span>\na<span class="token punctuation">.</span><span class="token property-access">book</span><span class="token punctuation">.</span><span class="token property-access">price</span> <span class="token operator">=</span> <span class="token string">\'55\'</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "change",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "55"}</span>\n<span class="token comment">// }</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "55"}</span>\n<span class="token comment">// }</span>\n</code></pre>\n<p>通过代码可以看出实际效果和 <code>Object.assign()</code> 是一样的。</p>\n<ul>\n<li><code>Array.prototype.slice()</code></li>\n</ul>\n<p><code>slice()</code> 方法返回一个新的数组对象，这一对象是一个由 <code>begin</code>和 <code>end</code>（不包括<code>end</code>）决定的原数组的浅拷贝。原始数组不会被改变。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">\'1\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// ["1", [2, 3]]</span>\n\na<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'99\'</span>\na<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token comment">// [0, "99", [4, 3]]</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">//  ["1", [4, 3]]</span>\n</code></pre>\n<p>可以看出，改变 <code>a[1]</code> 之后 <code>b[0]</code> 的值并没有发生变化，但改变 <code>a[2][0]</code> 之后，相应的 <code>b[1][0]</code> 的值也发生变化。说明 <code>slice()</code> 方法是浅拷贝，相应的还有<code>concat</code>等，在工作中面对复杂数组结构要额外注意。</p>\n<h4 id="%E4%B8%89%E6%B7%B1%E6%8B%B7%E8%B4%9Ddeep-copy">三、深拷贝（Deep Copy）<a class="anchor" href="#%E4%B8%89%E6%B7%B1%E6%8B%B7%E8%B4%9Ddeep-copy">§</a></h4>\n<p><strong>1、什么是深拷贝</strong></p>\n<p>深拷贝会拷贝所有的属性，并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。深拷贝相比于浅拷贝速度较慢并且花销较大。拷贝前后两个对象互不影响。</p>\n<p><img src="https://user-gold-cdn.xitu.io/2018/12/24/167de3ac3846927b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>\n<p><strong>2、深拷贝使用场景</strong></p>\n<p><code>JSON.parse(JSON.stringify(object))</code></p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'muyiy\'</span><span class="token punctuation">,</span>\n  book<span class="token operator">:</span> <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">"You Don\'t Know JS"</span><span class="token punctuation">,</span>\n    price<span class="token operator">:</span> <span class="token string">\'45\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "45"}</span>\n<span class="token comment">// }</span>\n\na<span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'change\'</span>\na<span class="token punctuation">.</span><span class="token property-access">book</span><span class="token punctuation">.</span><span class="token property-access">price</span> <span class="token operator">=</span> <span class="token string">\'55\'</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "change",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "55"}</span>\n<span class="token comment">// }</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "45"}</span>\n<span class="token comment">// }</span>\n</code></pre>\n<p>完全改变变量 a 之后对 b 没有任何影响，这就是深拷贝的魔力。</p>\n<p>我们看下对数组深拷贝效果如何。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">\'1\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// ["1", [2, 3]]</span>\n\na<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'99\'</span>\na<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token comment">// [0, "99", [4, 3]]</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">//  ["1", [2, 3]]</span>\n</code></pre>\n<p>对数组深拷贝之后，改变原数组不会影响到拷贝之后的数组。</p>\n<p>但是该方法有以下几个问题。</p>\n<p>1、会忽略 <code>undefined</code></p>\n<p>2、会忽略 <code>symbol</code></p>\n<p>3、不能序列化函数</p>\n<p>4、不能解决循环引用的对象</p>\n<p>5、不能正确处理<code>new Date()</code></p>\n<p>6、不能处理正则</p>\n<ul>\n<li><code>undefined</code>、<code>symbol</code> 和函数这三种情况，会直接忽略。</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'muyiy\'</span><span class="token punctuation">,</span>\n  a<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>\n  b<span class="token operator">:</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">(</span><span class="token string">\'muyiy\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">c</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//   a: undefined,</span>\n<span class="token comment">//  b: Symbol(muyiy),</span>\n<span class="token comment">//  c: ƒ ()</span>\n<span class="token comment">// }</span>\n\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {name: "muyiy"}</span>\n</code></pre>\n<ul>\n<li>循环引用情况下，会报错。</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  b<span class="token operator">:</span> <span class="token punctuation">{</span>\n    c<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    d<span class="token operator">:</span> <span class="token number">3</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nobj<span class="token punctuation">.</span><span class="token property-access">a</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token property-access">b</span>\nobj<span class="token punctuation">.</span><span class="token property-access">b</span><span class="token punctuation">.</span><span class="token property-access">c</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token property-access">a</span>\n\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// Uncaught TypeError: Converting circular structure to JSON</span>\n</code></pre>\n<ul>\n<li><code>new Date</code> 情况下，转换结果不正确。</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// Mon Dec 24 2018 10:59:14 GMT+0800 (China Standard Time)</span>\n\n<span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// ""2018-12-24T02:59:25.776Z""</span>\n\n<span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// "2018-12-24T02:59:41.523Z"</span>\n</code></pre>\n<p>解决方法转成字符串或者时间戳就好了。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 1545620645915</span>\n\n<span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span>\n<span class="token comment">// "1545620673267"</span>\n\n<span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// 1545620658688</span>\n</code></pre>\n<ul>\n<li>正则情况下</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'muyiy\'</span><span class="token punctuation">,</span>\n  a<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\'123\'</span><span class="token regex-delimiter">/</span></span>\n<span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n<span class="token comment">// {name: "muyiy", a: /\'123\'/}</span>\n\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {name: "muyiy", a: {}}</span>\n</code></pre>\n<p>PS：为什么会存在这些问题可以学习一下 <code>JSON</code>。</p>\n<p>除了上面介绍的深拷贝方法，常用的还有<code>jQuery.extend()</code> 和 <code>lodash.cloneDeep()</code>，后面文章会详细介绍源码实现，敬请期待！</p>\n<h4 id="%E5%9B%9B%E6%80%BB%E7%BB%93">四、总结<a class="anchor" href="#%E5%9B%9B%E6%80%BB%E7%BB%93">§</a></h4>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>---</th>\n<th>和原数据是否指向同一对象</th>\n<th>第一层数据为基本数据类型</th>\n<th>原数据中包含子对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>赋值</td>\n<td>是</td>\n<td>改变会使原数据一同改变</td>\n<td>改变会使原数据一同改变</td>\n</tr>\n<tr>\n<td>浅拷贝</td>\n<td>否</td>\n<td>改变不会使原数据一同改变</td>\n<td>改变会使原数据一同改变</td>\n</tr>\n<tr>\n<td>深拷贝</td>\n<td>否</td>\n<td>改变不会使原数据一同改变</td>\n<td>改变不会使原数据一同改变</td>\n</tr>\n</tbody>\n</table></div>\n<h3 id="%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%B5%85%E6%8B%B7%E8%B4%9D">实现一个浅拷贝<a class="anchor" href="#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%B5%85%E6%8B%B7%E8%B4%9D">§</a></h3>\n<h4 id="%E6%B5%85%E6%8B%B7%E8%B4%9D-objectassign">浅拷贝 <code>Object.assign</code><a class="anchor" href="#%E6%B5%85%E6%8B%B7%E8%B4%9D-objectassign">§</a></h4>\n<p><code>Object.assign</code>，将所有可枚举属性的值从一个或多个源对象复制到目标对象，同时返回目标对象。（来自 <code>MDN</code>）</p>\n<p>语法如下所示：</p>\n<blockquote>\n<p><code>Object.assign(target, ...sources)</code></p>\n</blockquote>\n<p>其中 <code>target</code> 是目标对象，<code>sources</code> 是源对象，可以有多个，返回修改后的目标对象 <code>target</code>。</p>\n<p>如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后来的源对象的属性将类似地覆盖早先的属性。</p>\n<p><strong>示例 1</strong></p>\n<p>我们知道浅拷贝就是拷贝第一层的<strong>基本类型值</strong>，以及第一层的<strong>引用类型地址</strong>。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token comment">// 第一步</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'advanced\'</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">18</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'muyiy\'</span><span class="token punctuation">,</span>\n  book<span class="token operator">:</span> <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">"You Don\'t Know JS"</span><span class="token punctuation">,</span>\n    price<span class="token operator">:</span> <span class="token string">\'45\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//  age: 18,</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "45"}</span>\n<span class="token comment">// }</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> c<span class="token punctuation">)</span>\n<span class="token comment">// true</span>\n\n<span class="token comment">// 第二步</span>\nb<span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'change\'</span>\nb<span class="token punctuation">.</span><span class="token property-access">book</span><span class="token punctuation">.</span><span class="token property-access">price</span> <span class="token operator">=</span> <span class="token string">\'55\'</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "change",</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "55"}</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// 第三步</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//  age: 18,</span>\n<span class="token comment">//   book: {title: "You Don\'t Know JS", price: "55"}</span>\n<span class="token comment">// }</span>\n</code></pre>\n<p>1、在第一步中，使用 <code>Object.assign</code> 把源对象 <code>b</code> 的值复制到目标对象 <code>a</code> 中，这里把返回值定义为对象 <code>c</code>，可以看出 <code>b</code> 会替换掉 <code>a</code> 中具有相同键的值，即如果目标对象（<code>a</code>）中的属性具有相同的键，则属性将被源对象（<code>b</code>）中的属性覆盖。这里需要注意下，返回对象 <code>c</code> 就是 目标对象 <code>a</code>。</p>\n<p>2、在第二步中，修改源对象 <code>b</code> 的基本类型值（<code>name</code>）和引用类型值（<code>book</code>）。</p>\n<p>3、在第三步中，浅拷贝之后目标对象 <code>a</code> 的基本类型值没有改变，但是引用类型值发生了改变，因为 <code>Object.assign()</code> 拷贝的是属性值。假如源对象的属性值是一个指向对象的引用，它也<strong>只拷贝那个引用地址</strong>。</p>\n<p><strong>示例 2</strong></p>\n<p><code>String</code> 类型和 <code>Symbol</code> 类型的属性都会被拷贝，而且不会跳过那些值为 <code>null</code> 或 <code>undefined</code> 的源对象。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token comment">// 第一步</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'muyiy\'</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">18</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>\n  b1<span class="token operator">:</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">(</span><span class="token string">\'muyiy\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  b2<span class="token operator">:</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span>\n  b3<span class="token operator">:</span> <span class="token keyword nil">undefined</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   name: "muyiy",</span>\n<span class="token comment">//  age: 18,</span>\n<span class="token comment">//   b1: Symbol(muyiy),</span>\n<span class="token comment">//   b2: null,</span>\n<span class="token comment">//   b3: undefined</span>\n<span class="token comment">// }</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> c<span class="token punctuation">)</span>\n<span class="token comment">// true</span>\n</code></pre>\n<h4 id="objectassign-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0"><code>Object.assign</code> 模拟实现<a class="anchor" href="#objectassign-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0">§</a></h4>\n<p>实现一个 <code>Object.assign</code> 大致思路如下：</p>\n<p>1、判断原生 <code>Object</code> 是否支持该函数，如果不存在的话创建一个函数 <code>assign</code>，并使用 <code>Object.defineProperty</code> 将该函数绑定到 <code>Object</code> 上。</p>\n<p>2、判断参数是否正确（目标对象不能为空，我们可以直接设置{}传递进去,但必须设置值）。</p>\n<p>3、使用 <code>Object()</code> 转成对象，并保存为 <code>to</code>，最后返回这个对象 <code>to</code>。</p>\n<p>4、使用 <code>for..in</code> 循环遍历出所有可枚举的自有属性。并复制给新的目标对象（使用 <code>hasOwnProperty</code> 获取自有属性，即非原型链上的属性）。</p>\n<p>实现代码如下，这里为了验证方便，使用 <code>assign2</code> 代替 <code>assign</code>。注意此模拟实现不支持 <code>symbol</code> 属性，因为<code>ES5</code> 中根本没有 <code>symbol</code> 。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">assign2</span> <span class="token operator">!=</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Attention 1</span>\n  <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">defineProperty</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">,</span> <span class="token string">\'assign2\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token string">\'use strict\'</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Attention 2</span>\n        <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">\'Cannot convert undefined or null to object\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// Attention 3</span>\n      <span class="token keyword">var</span> to <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>\n\n      <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> nextSource <span class="token operator">=</span> arguments<span class="token punctuation">[</span>index<span class="token punctuation">]</span>\n\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>nextSource <span class="token operator">!=</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// Attention 2</span>\n          <span class="token comment">// Attention 4</span>\n          <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> nextKey <span class="token keyword">in</span> nextSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>nextSource<span class="token punctuation">,</span> nextKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              to<span class="token punctuation">[</span>nextKey<span class="token punctuation">]</span> <span class="token operator">=</span> nextSource<span class="token punctuation">[</span>nextKey<span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword control-flow">return</span> to\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    configurable<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>针对上面的代码做如下扩展。</p>\n<p><strong>注意 1：可枚举性</strong></p>\n<p>原生情况下挂载在 <code>Object</code> 上的属性是不可枚举的，但是直接在 <code>Object</code> 上挂载属性 <code>a</code> 之后是可枚举的，所以这里必须使用 <code>Object.defineProperty</code>，并设置 <code>enumerable: false</code> 以及 <code>writable: true</code>, <code>configurable: true</code>。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 无输出</span>\n\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">)</span>\n<span class="token comment">// []</span>\n</code></pre>\n<p>上面代码说明原生 <code>Object</code> 上的属性不可枚举。</p>\n<p>我们可以使用 2 种方法查看 <code>Object.assign</code> 是否可枚举，使用 <code>Object.getOwnPropertyDescriptor</code> 或者 <code>Object.propertyIsEnumerable</code> 都可以，其中<code>propertyIsEnumerable(..)</code> 会检查给定的属性名是否直接存在于对象中（而不是在原型链上）并且满足 <code>enumerable: true</code>。具体用法如下：</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token comment">// 方法1</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyDescriptor</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">,</span> <span class="token string">\'assign\'</span><span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   value: ƒ,</span>\n<span class="token comment">//  writable: true,   // 可写</span>\n<span class="token comment">//  enumerable: false,  // 不可枚举，注意这里是 false</span>\n<span class="token comment">//  configurable: true  // 可配置</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// 方法2</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">\'assign\'</span><span class="token punctuation">)</span>\n<span class="token comment">// false</span>\n</code></pre>\n<p>上面代码说明 <code>Object.assign</code> 是不可枚举的。</p>\n<p>介绍这么多是因为直接在 <code>Object</code> 上挂载属性 <code>a</code> 之后是可枚举的，我们来看如下代码。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">a</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'log a\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyDescriptor</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">,</span> <span class="token string">\'a\'</span><span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   value: ƒ,</span>\n<span class="token comment">//  writable: true,</span>\n<span class="token comment">//  enumerable: true,  // 注意这里是 true</span>\n<span class="token comment">//  configurable: true</span>\n<span class="token comment">// }</span>\n\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">)</span>\n<span class="token comment">// true</span>\n</code></pre>\n<p>所以要实现 <code>Object.assign</code> 必须使用 <code>Object.defineProperty</code>，并设置 <code>writable: true</code>, <code>enumerable: false</code>, <code>configurable: true</code>，当然默认情况下不设置就是 <code>false</code>。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">defineProperty</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'log b\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyDescriptor</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   value: ƒ,</span>\n<span class="token comment">//  writable: false,   // 注意这里是 false</span>\n<span class="token comment">//  enumerable: false,  // 注意这里是 false</span>\n<span class="token comment">//  configurable: false  // 注意这里是 false</span>\n<span class="token comment">// }</span>\n</code></pre>\n<p>所以具体到本次模拟实现中，相关代码如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token comment">// 判断原生 Object 中是否存在函数 assign2</span>\n<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">assign2</span> <span class="token operator">!=</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 使用属性描述符定义新属性 assign2</span>\n  <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">defineProperty</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">,</span> <span class="token string">"assign2"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token spread operator">...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 默认值是 false，即 enumerable: false</span>\n    writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    configurable<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>注意 2：判断参数是否正确</strong></p>\n<p>有些文章判断参数是否正确是这样的。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>target <span class="token operator">===</span> <span class="token keyword nil">undefined</span> <span class="token operator">||</span> target <span class="token operator">===</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">\'Cannot convert undefined or null to object\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>这样肯定没问题，但是这样写没有必要，因为 <code>undefined</code> 和 <code>null</code> 是相等的（高程 3 P52 ），即 <code>undefined == null</code> 返回 <code>true</code>，只需要按照如下方式判断就好了。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// TypeError if undefined or null</span>\n  <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">\'Cannot convert undefined or null to object\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>注意 3：原始类型被包装为对象</strong></p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> v1 <span class="token operator">=</span> <span class="token string">\'abc\'</span>\n<span class="token keyword">var</span> v2 <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token keyword">var</span> v3 <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token keyword">var</span> v4 <span class="token operator">=</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> v1<span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> v2<span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v4<span class="token punctuation">)</span>\n<span class="token comment">// 原始类型会被包装，null 和 undefined 会被忽略。</span>\n<span class="token comment">// 注意，只有字符串的包装对象才可能有自身可枚举属性。</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n<span class="token comment">// { "0": "a", "1": "b", "2": "c" }</span>\n</code></pre>\n<p>上面代码中的源对象 <code>v2</code>、<code>v3</code>、<code>v4</code> 实际上被忽略了，原因在于他们自身没有可枚举属性。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> v1 <span class="token operator">=</span> <span class="token string">\'abc\'</span>\n<span class="token keyword">var</span> v2 <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token keyword">var</span> v3 <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token keyword">var</span> v4 <span class="token operator">=</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> v5 <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n\n<span class="token comment">// Object.keys(..) 返回一个数组，包含所有可枚举属性</span>\n<span class="token comment">// 只会查找对象直接包含的属性，不查找[[Prototype]]链</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token comment">// [ \'0\', \'1\', \'2\' ]</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span> <span class="token comment">// []</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span> <span class="token comment">// []</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span> <span class="token comment">// []</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span>\n<span class="token comment">// TypeError: Cannot convert undefined or null to object</span>\n\n<span class="token comment">// Object.getOwnPropertyNames(..) 返回一个数组，包含所有属性，无论它们是否可枚举</span>\n<span class="token comment">// 只会查找对象直接包含的属性，不查找[[Prototype]]链</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyNames</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token comment">// [ \'0\', \'1\', \'2\', \'length\' ]</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyNames</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span> <span class="token comment">// []</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyNames</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span> <span class="token comment">// []</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyNames</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span> <span class="token comment">// []</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyNames</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span>\n<span class="token comment">// TypeError: Cannot convert undefined or null to object</span>\n</code></pre>\n<p>但是下面的代码是可以执行的。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">\'abc\'</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>\n  v1<span class="token operator">:</span> <span class="token string">\'def\'</span><span class="token punctuation">,</span>\n  v2<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  v3<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  v4<span class="token operator">:</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  v5<span class="token operator">:</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span>\n  v6<span class="token operator">:</span> <span class="token keyword nil">undefined</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   [String: \'abc\']</span>\n<span class="token comment">//   v1: \'def\',</span>\n<span class="token comment">//   v2: true,</span>\n<span class="token comment">//   v3: 10,</span>\n<span class="token comment">//   v4: Symbol(foo),</span>\n<span class="token comment">//   v5: null,</span>\n<span class="token comment">//   v6: undefined</span>\n<span class="token comment">// }</span>\n</code></pre>\n<p>原因很简单，因为此时 <code>undefined</code>、<code>true</code> 等不是作为对象，而是作为对象 <code>b</code> 的属性值，对象 <code>b</code> 是可枚举的。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token comment">// 接上面的代码</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// [ \'v1\', \'v2\', \'v3\', \'v4\', \'v5\', \'v6\' ]</span>\n</code></pre>\n<p>这里其实又可以看出一个问题来，那就是目标对象是原始类型，会包装成对象，对应上面的代码就是目标对象 <code>a</code> 会被包装成 <code>[String: \'abc\']</code>，那模拟实现时应该如何处理呢？很简单，使用 <code>Object(..)</code> 就可以了。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">\'abc\'</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// [String: \'abc\']</span>\n</code></pre>\n<p>到这里已经介绍很多知识了，让我们再来延伸一下，看看下面的代码能不能执行。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">\'abc\'</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">\'def\'</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n</code></pre>\n<p>答案是否定的，会提示以下错误。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token known-class-name class-name">TypeError</span><span class="token operator">:</span> <span class="token maybe-class-name">Cannot</span> assign to read only property <span class="token string">\'0\'</span> <span class="token keyword">of</span> object <span class="token string">\'[object String]\'</span>\n</code></pre>\n<p>原因在于 <code>Object(&quot;abc&quot;)</code> 时，其属性描述符为不可写，即 <code>writable: false</code>。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">(</span><span class="token string">\'abc\'</span><span class="token punctuation">)</span>\n\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyNames</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span>\n<span class="token comment">// [ \'0\', \'1\', \'2\', \'length\' ]</span>\n\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>myObject<span class="token punctuation">,</span> <span class="token string">\'0\'</span><span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   value: \'a\',</span>\n<span class="token comment">//   writable: false, // 注意这里</span>\n<span class="token comment">//   enumerable: true,</span>\n<span class="token comment">//   configurable: false</span>\n<span class="token comment">// }</span>\n</code></pre>\n<p>同理，下面的代码也会报错。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">\'abc\'</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">\'d\'</span>\n<span class="token punctuation">}</span>\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n<span class="token comment">// TypeError: Cannot assign to read only property \'0\' of object \'[object String]\'</span>\n</code></pre>\n<p>但是并不是说只要 <code>writable: false</code> 就会报错，看下面的代码。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">(</span><span class="token string">\'abc\'</span><span class="token punctuation">)</span>\n\n<span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>myObject<span class="token punctuation">,</span> <span class="token string">\'0\'</span><span class="token punctuation">)</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   value: \'a\',</span>\n<span class="token comment">//   writable: false, // 注意这里</span>\n<span class="token comment">//   enumerable: true,</span>\n<span class="token comment">//   configurable: false</span>\n<span class="token comment">// }</span>\n\nmyObject<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'d\'</span>\n<span class="token comment">// \'d\'</span>\n\nmyObject<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n<span class="token comment">// \'a\'</span>\n</code></pre>\n<p>这里并没有报错，原因在于 <code>JS</code> 对于不可写的属性值的修改静默失败（<code>silently failed</code>）,在严格模式下才会提示错误。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token string">\'use strict\'</span>\n<span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">(</span><span class="token string">\'abc\'</span><span class="token punctuation">)</span>\n\nmyObject<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'d\'</span>\n<span class="token comment">// TypeError: Cannot assign to read only property \'0\' of object \'[object String]\'</span>\n</code></pre>\n<p>所以我们在模拟实现 <code>Object.assign</code> 时需要使用严格模式。</p>\n<p><strong>注意 4：存在性</strong></p>\n<p>如何在不访问属性值的情况下判断对象中是否存在某个属性呢，看下面的代码。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> anotherObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 创建一个关联到 anotherObject 的对象</span>\n<span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span>anotherObject<span class="token punctuation">)</span>\nmyObject<span class="token punctuation">.</span><span class="token property-access">b</span> <span class="token operator">=</span> <span class="token number">2</span>\n\n<span class="token string">\'a\'</span> <span class="token keyword">in</span> myObject <span class="token comment">// true</span>\n<span class="token string">\'b\'</span> <span class="token keyword">in</span> myObject <span class="token comment">// true</span>\n\nmyObject<span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\nmyObject<span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">\'b\'</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre>\n<p>这边使用了 <code>in</code> 操作符和 <code>hasOwnProperty</code> 方法，区别如下（你不知道的 JS 上卷 P119）：</p>\n<p>1、<code>in</code> 操作符会检查属性是否在对象及其 <code>[[Prototype]]</code> 原型链中。</p>\n<p>2、<code>hasOwnProperty(..)</code> 只会检查属性是否在 myObject 对象中，不会检查 <code>[[Prototype]]</code> 原型链。</p>\n<p><code>Object.assign</code> 方法肯定不会拷贝原型链上的属性，所以模拟实现时需要用 <code>hasOwnProperty(..)</code> 判断处理下，但是直接使用 <code>myObject.hasOwnProperty(..)</code> 是有问题的，因为有的对象可能没有连接到 <code>Object.prototype</code> 上（比如通过 <code>Object.create(null)</code> 来创建），这种情况下，使用 <code>myObject.hasOwnProperty(..)</code> 就会失败。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">)</span>\nmyObject<span class="token punctuation">.</span><span class="token property-access">b</span> <span class="token operator">=</span> <span class="token number">2</span>\n\n<span class="token string">\'b\'</span> <span class="token keyword">in</span> myObject\n<span class="token comment">// true</span>\n\nmyObject<span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">\'b\'</span><span class="token punctuation">)</span>\n<span class="token comment">// TypeError: myObject.hasOwnProperty is not a function</span>\n</code></pre>\n<p>解决方法也很简单，使用<code>call</code> 就可以了，使用如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">)</span>\nmyObject<span class="token punctuation">.</span><span class="token property-access">b</span> <span class="token operator">=</span> <span class="token number">2</span>\n\n<span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>myObject<span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">)</span>\n<span class="token comment">// true</span>\n</code></pre>\n<p>所以具体到本次模拟实现中，相关代码如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token comment">// 使用 for..in 遍历对象 nextSource 获取属性值</span>\n<span class="token comment">// 此处会同时检查其原型链上的属性</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> nextKey <span class="token keyword">in</span> nextSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 使用 hasOwnProperty 判断对象 nextSource 中是否存在属性 nextKey</span>\n  <span class="token comment">// 过滤其原型链上的属性</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>nextSource<span class="token punctuation">,</span> nextKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 赋值给对象 to,并在遍历结束后返回对象 to</span>\n    to<span class="token punctuation">[</span>nextKey<span class="token punctuation">]</span> <span class="token operator">=</span> nextSource<span class="token punctuation">[</span>nextKey<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%B7%B1%E6%8B%B7%E8%B4%9D">实现一个深拷贝<a class="anchor" href="#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%B7%B1%E6%8B%B7%E8%B4%9D">§</a></h3>\n<h4 id="%E7%AC%AC%E4%B8%80%E6%AD%A5%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0">第一步：简单实现<a class="anchor" href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0">§</a></h4>\n<p>其实深拷贝可以拆分成 2 步，浅拷贝 + 递归，浅拷贝时判断属性值是否是对象，如果是对象就进行递归操作，两个一结合就实现了深拷贝。\n我们可以写出简单浅拷贝代码如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">function</span> <span class="token function">cloneShallow</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> target\n<span class="token punctuation">}</span>\n</code></pre>\n<p>上面代码是浅拷贝实现，只要稍微改动下，加上是否是对象的判断并在相应的位置使用递归就可以实现简单深拷贝。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">function</span> <span class="token function">cloneDeep1</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneDeep1</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 注意这里</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> target\n<span class="token punctuation">}</span>\n</code></pre>\n<p>一个简单的深拷贝就完成了，但是这个实现还存在很多问题。</p>\n<ul>\n<li>1、没有对传入参数进行校验，传入 <code>null</code> 时应该返回 <code>null</code> 而不是 <code>{}</code></li>\n<li>2、对于对象的判断逻辑不严谨，因为 <code>typeof null === \'object\'</code></li>\n<li>3、没有考虑数组的兼容</li>\n</ul>\n<h4 id="%E7%AC%AC%E4%BA%8C%E6%AD%A5%E6%8B%B7%E8%B4%9D%E6%95%B0%E7%BB%84">第二步：拷贝数组<a class="anchor" href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E6%8B%B7%E8%B4%9D%E6%95%B0%E7%BB%84">§</a></h4>\n<p>我们来看下对于对象的判断，判断方案如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">\'[object Object]\'</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>但是用在这里并不合适，因为我们要保留数组这种情况，所以这里使用 <code>typeof</code> 来处理。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">typeof</span> <span class="token keyword null nil">null</span> <span class="token comment">//"object"</span>\n<span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//"object"</span>\n<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//"object"</span>\n<span class="token keyword">typeof</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//"function" (特殊情况)</span>\n</code></pre>\n<p>改动过后的 <code>isObject</code> 判断逻辑如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!=</span> <span class="token keyword null nil">null</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>所以兼容数组的写法如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">function</span> <span class="token function">cloneDeep2</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> source <span class="token comment">// 非对象返回自身</span>\n\n  <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneDeep2</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 注意这里</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> target\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E7%AC%AC%E4%B8%89%E6%AD%A5%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8">第三步：循环引用<a class="anchor" href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8">§</a></h4>\n<p>我们知道 <code>JSON</code> 无法深拷贝循环引用，遇到这种情况会抛出异常。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token comment">// 此处 a 是文章开始的测试用例</span>\na<span class="token punctuation">.</span><span class="token property-access">circleRef</span> <span class="token operator">=</span> a\n\n<span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// TypeError: Converting circular structure to JSON</span>\n</code></pre>\n<p><strong>1、使用哈希表</strong></p>\n<p>解决方案很简单，其实就是循环检测，我们设置一个数组或者哈希表存储已拷贝过的对象，当检测到当前对象已存在于哈希表中时，取出该值并返回即可。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">function</span> <span class="token function">cloneDeep3</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> source\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token method function property-access">has</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> hash<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token comment">// 新增代码，查哈希表</span>\n\n  <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  hash<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token comment">// 新增代码，哈希表设值</span>\n\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneDeep3</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token comment">// 新增代码，传入哈希表</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> target\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>2、使用数组</strong></p>\n<p>这里使用了 <code>ES6</code> 中的 <code>WeakMap</code> 来处理，那在 <code>ES5</code> 下应该如何处理呢？</p>\n<p>也很简单，使用数组来处理就好啦，代码如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">function</span> <span class="token function">cloneDeep3</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> uniqueList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> source\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>uniqueList<span class="token punctuation">)</span> uniqueList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 新增代码，初始化数组</span>\n\n  <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token comment">// ============= 新增代码</span>\n  <span class="token comment">// 数据已经存在，返回保存的数据</span>\n  <span class="token keyword">var</span> uniqueData <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>uniqueList<span class="token punctuation">,</span> source<span class="token punctuation">)</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>uniqueData<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> uniqueData<span class="token punctuation">.</span><span class="token property-access">target</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 数据不存在，保存源数据，以及对应的引用</span>\n  uniqueList<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    source<span class="token operator">:</span> source<span class="token punctuation">,</span>\n    target<span class="token operator">:</span> target\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token comment">// =============</span>\n\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneDeep3</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> uniqueList<span class="token punctuation">)</span> <span class="token comment">// 新增代码，传入数组</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> target\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 新增方法，用于查找</span>\n<span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">source</span> <span class="token operator">===</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword null nil">null</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 用上面测试用例已测试通过</span>\n</code></pre>\n<p>现在已经很完美的解决了循环引用这种情况，那其实还是一种情况是引用丢失，我们看下面的例子。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> obj1<span class="token punctuation">,</span> b<span class="token operator">:</span> obj1 <span class="token punctuation">}</span>\n\nobj2<span class="token punctuation">.</span><span class="token property-access">a</span> <span class="token operator">===</span> obj2<span class="token punctuation">.</span><span class="token property-access">b</span>\n<span class="token comment">// true</span>\n\n<span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token function">cloneDeep2</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>\nobj3<span class="token punctuation">.</span><span class="token property-access">a</span> <span class="token operator">===</span> obj3<span class="token punctuation">.</span><span class="token property-access">b</span>\n<span class="token comment">// false</span>\n</code></pre>\n<p>引用丢失在某些情况下是有问题的，比如上面的对象 <code>obj2</code>，<code>obj2</code> 的键值 <code>a</code> 和 <code>b</code> 同时引用了同一个对象 <code>obj1</code>，使用 <code>cloneDeep2</code> 进行深拷贝后就丢失了引用关系变成了两个不同的对象，那如何处理呢。</p>\n<p>其实你有没有发现，我们的 <code>cloneDeep3</code> 已经解决了这个问题，因为只要存储已拷贝过的对象就可以了。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token function">cloneDeep3</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>\nobj3<span class="token punctuation">.</span><span class="token property-access">a</span> <span class="token operator">===</span> obj3<span class="token punctuation">.</span><span class="token property-access">b</span>\n<span class="token comment">// true</span>\n</code></pre>\n<h4 id="%E7%AC%AC%E5%9B%9B%E6%AD%A5%E6%8B%B7%E8%B4%9D-symbol">第四步：拷贝 Symbol<a class="anchor" href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%E6%8B%B7%E8%B4%9D-symbol">§</a></h4>\n<p>这个时候可能要搞事情了，那我们能不能拷贝 <code>Symbol</code> 类型呢？</p>\n<p>当然可以，不过 <code>Symbol</code> 在 <code>ES6</code> 下才有，我们需要一些方法来检测出 <code>Symbol</code> 类型。</p>\n<pre class="language-autoit"><code class="language-autoit">方法一：Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>\n方法二：Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>\n</code></pre>\n<p>对于方法一可以查找一个给定对象的符号属性时返回一个 <code>?symbol</code> 类型的数组。注意，每个初始化的对象都是没有自己的 <code>symbol</code> 属性的，因此这个数组可能为空，除非你已经在对象上设置了 <code>symbol</code> 属性。（来自 <code>MDN</code>）</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">)</span> <span class="token comment">// 创建新的symbol类型</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">.</span><span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token string">\'b\'</span><span class="token punctuation">)</span> <span class="token comment">// 从全局的symbol注册?表设置和取得symbol</span>\n\nobj<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'localSymbol\'</span>\nobj<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'globalSymbol\'</span>\n\n<span class="token keyword">var</span> objectSymbols <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>objectSymbols<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>objectSymbols<span class="token punctuation">)</span> <span class="token comment">// [Symbol(a), Symbol(b)]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>objectSymbols<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// Symbol(a)</span>\n</code></pre>\n<p>对于方法二返回一个由目标对象自身的属性键组成的数组。它的返回值等同于 <code>Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))</code>。(来自 <code>MDN</code>)</p>\n<pre class="language-js"><code class="language-js"><span class="token known-class-name class-name">Reflect</span><span class="token punctuation">.</span><span class="token method function property-access">ownKeys</span><span class="token punctuation">(</span><span class="token punctuation">{</span> z<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// [ "z", "y", "x" ]</span>\n<span class="token known-class-name class-name">Reflect</span><span class="token punctuation">.</span><span class="token method function property-access">ownKeys</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// ["length"]</span>\n\n<span class="token keyword">var</span> sym <span class="token operator">=</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">.</span><span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token string">\'comet\'</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> sym2 <span class="token operator">=</span> <span class="token known-class-name class-name">Symbol</span><span class="token punctuation">.</span><span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token string">\'meteor\'</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>sym<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  str<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token string">\'773\'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token string">\'0\'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>sym2<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token string">\'-1\'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token string">\'8\'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token string">\'second str\'</span><span class="token operator">:</span> <span class="token number">0</span>\n<span class="token punctuation">}</span>\n<span class="token known-class-name class-name">Reflect</span><span class="token punctuation">.</span><span class="token method function property-access">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n<span class="token comment">// [ "0", "8", "773", "str", "-1", "second str", Symbol(comet), Symbol(meteor) ]</span>\n<span class="token comment">// 注意顺序</span>\n<span class="token comment">// Indexes in numeric order,</span>\n<span class="token comment">// strings in insertion order,</span>\n<span class="token comment">// symbols in insertion order</span>\n</code></pre>\n<p><strong>1、方法一</strong></p>\n<p>思路就是先查找有没有 <code>Symbol</code> 属性，如果查找到则先遍历处理 <code>Symbol</code> 情况，然后再处理正常情况，多出来的逻辑就是下面的新增代码。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">function</span> <span class="token function">cloneDeep4</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> source\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token method function property-access">has</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> hash<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>\n\n  <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  hash<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span>\n\n  <span class="token comment">// ============= 新增代码</span>\n  <span class="token keyword">let</span> symKeys <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">getOwnPropertySymbols</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token comment">// 查找</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>symKeys<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 查找成功</span>\n    symKeys<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">symKey</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>symKey<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>symKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneDeep4</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>symKey<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>symKey<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>symKey<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// =============</span>\n\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneDeep4</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> target\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>2、方法二</strong></p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">function</span> <span class="token function">cloneDeep4</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> source\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token method function property-access">has</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> hash<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>\n\n  <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  hash<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span>\n\n  <span class="token known-class-name class-name">Reflect</span><span class="token punctuation">.</span><span class="token method function property-access">ownKeys</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 改动</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneDeep4</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword control-flow">return</span> target\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 测试已通过</span>\n</code></pre>\n<p>这里使用了 <code>Reflect.ownKeys()</code> 获取所有的键值，同时包括 <code>Symbol</code>，对 <code>source</code> 遍历赋值即可。</p>\n<p>写到这里已经差不多了，我们再延伸下，对于 <code>target</code> 换一种写法，改动如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 木易杨</span>\n<span class="token keyword">function</span> <span class="token function">cloneDeep4</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> source\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token method function property-access">has</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> hash<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>\n\n  <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>source<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token spread operator">...</span>source <span class="token punctuation">}</span> <span class="token comment">// 改动 1</span>\n  hash<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span>\n\n  <span class="token known-class-name class-name">Reflect</span><span class="token punctuation">.</span><span class="token method function property-access">ownKeys</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 改动 2</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneDeep4</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword control-flow">return</span> target\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 测试已通过</span>\n</code></pre>\n<p>在改动 1 中，返回一个新数组或者新对象，获取到源对象之后就可以如改动 2 所示传入 <code>target</code> 遍历赋值即可。</p>\n<p><code>Reflect.ownKeys()</code> 这种方式的问题在于不能深拷贝原型链上的数据，因为返回的是目标对象自身的属性键组成的数组。如果想深拷贝原型链上的数据怎么办，那用 <code>for..in</code> 就可以了。</p>\n<p>我们再介绍下两个知识点，分别是构造字面量数组时使用展开语法和构造字面量对象时使用展开语法。（以下代码示例来源于 <code>MDN</code>）</p>\n<p><strong>1、展开语法之字面量数组</strong></p>\n<p>这是 <code>ES2015 （ES6）</code> 才有的语法，可以通过字面量方式, 构造新数组，而不再需要组合使用 <code>push</code>, <code>splice</code>, <code>concat</code> 等方法。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> parts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'shoulders\'</span><span class="token punctuation">,</span> <span class="token string">\'knees\'</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> lyrics <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'head\'</span><span class="token punctuation">,</span> <span class="token spread operator">...</span>parts<span class="token punctuation">,</span> <span class="token string">\'and\'</span><span class="token punctuation">,</span> <span class="token string">\'toes\'</span><span class="token punctuation">]</span>\n<span class="token comment">// ["head", "shoulders", "knees", "and", "toes"]</span>\n</code></pre>\n<p>这里的使用方法和参数列表的展开有点类似。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> w<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token spread operator">...</span>args<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token spread operator">...</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre>\n<p>返回的是新数组，对新数组修改之后不会影响到旧数组，类似于 <code>arr.slice()</code>。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>arr<span class="token punctuation">]</span> <span class="token comment">// like arr.slice()</span>\narr2<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\n\n<span class="token comment">// arr2 此时变成 [1, 2, 3, 4]</span>\n<span class="token comment">// arr 不受影响</span>\n</code></pre>\n<p>展开语法和 <code>Object.assign()</code> 行为一致, 执行的都是浅拷贝（即只遍历一层）。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>a<span class="token punctuation">]</span>\nb<span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>\n<span class="token comment">// [[], [2], [3]]</span>\n</code></pre>\n<p>这里 <code>a</code> 是多层数组，<code>b</code> 只拷贝了第一层，对于第二层依旧和 <code>a</code> 持有同一个地址，所以对 <code>b</code> 的修改会影响到 <code>a</code>。</p>\n<p><strong>2、展开语法之字面量对象</strong></p>\n<p>这是 <code>ES2018</code> 才有的语法，将已有对象的所有可枚举属性拷贝到新构造的对象中，类似于 <code>Object.assign()</code> 方法。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">\'bar\'</span><span class="token punctuation">,</span> x<span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">\'baz\'</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">13</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> clonedObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token spread operator">...</span>obj1 <span class="token punctuation">}</span>\n<span class="token comment">// { foo: "bar", x: 42 }</span>\n\n<span class="token keyword">var</span> mergedObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token spread operator">...</span>obj1<span class="token punctuation">,</span> <span class="token spread operator">...</span>obj2 <span class="token punctuation">}</span>\n<span class="token comment">// { foo: "baz", x: 42, y: 13 }</span>\n</code></pre>\n<p><code>Object.assign()</code> 函数会触发 <code>setters</code>，而展开语法不会。有时候不能替换或者模拟 <code>Object.assign()</code> 函数，因为会得到意想不到的结果，如下所示。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">\'bar\'</span><span class="token punctuation">,</span> x<span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">\'baz\'</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">13</span> <span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>objects</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token spread operator">...</span>objects <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> mergedObj <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span>\n<span class="token comment">// { 0: { foo: \'bar\', x: 42 }, 1: { foo: \'baz\', y: 13 } }</span>\n\n<span class="token keyword">var</span> mergedObj <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span>\n<span class="token comment">// { 0: {}, 1: { foo: \'bar\', x: 42 }, 2: { foo: \'baz\', y: 13 } }</span>\n</code></pre>\n<p>这里实际上是将多个解构变为剩余参数（ <code>rest</code> ），然后再将剩余参数展开为字面量对象.</p>\n<h4 id="%E7%AC%AC%E4%BA%94%E6%AD%A5%E7%A0%B4%E8%A7%A3%E9%80%92%E5%BD%92%E7%88%86%E6%A0%88">第五步：破解递归爆栈<a class="anchor" href="#%E7%AC%AC%E4%BA%94%E6%AD%A5%E7%A0%B4%E8%A7%A3%E9%80%92%E5%BD%92%E7%88%86%E6%A0%88">§</a></h4>\n<p>上面四步使用的都是递归方法，但是有一个问题在于会爆栈，错误提示如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// RangeError: Maximum call stack size exceeded</span>\n</code></pre>\n<p>那应该如何解决呢？其实我们使用循环就可以了，代码如下。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">cloneDeep5</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token comment">// 栈</span>\n  <span class="token keyword">const</span> loopList <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      parent<span class="token operator">:</span> root<span class="token punctuation">,</span>\n      key<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>\n      data<span class="token operator">:</span> x\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>loopList<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 深度优先</span>\n    <span class="token keyword">const</span> node <span class="token operator">=</span> loopList<span class="token punctuation">.</span><span class="token method function property-access">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> parent <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token property-access">parent</span>\n    <span class="token keyword">const</span> key <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token property-access">key</span>\n    <span class="token keyword">const</span> data <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token property-access">data</span>\n\n    <span class="token comment">// 初始化赋值目标，key为undefined则拷贝到父元素，否则拷贝到子元素</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> parent\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> key <span class="token operator">!==</span> <span class="token string">\'undefined\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      res <span class="token operator">=</span> parent<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 下一次循环</span>\n          loopList<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            parent<span class="token operator">:</span> res<span class="token punctuation">,</span>\n            key<span class="token operator">:</span> k<span class="token punctuation">,</span>\n            data<span class="token operator">:</span> data<span class="token punctuation">[</span>k<span class="token punctuation">]</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n          res<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>k<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword control-flow">return</span> root\n<span class="token punctuation">}</span>\n</code></pre>\n<p>由于篇幅问题就不过多介绍了，详情请参考下面这篇文章。</p>\n<p><a href="https://segmentfault.com/a/1190000016672263">深拷贝的终极探索（99%的人都不知道）</a></p>\n<h2 id="%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0">高阶函数<a class="anchor" href="#%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0">§</a></h2>\n<h3 id="%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0">箭头函数<a class="anchor" href="#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0">§</a></h3>\n<p>箭头函数表达式的语法比函数表达式更短，并且没有自己的this，arguments，super或 new.target。这些函数表达式更适用于那些本来需要匿名函数的地方，并且它们不能用作构造函数。</p>\n<p>引入箭头函数有两个方面的作用：更简短的函数并且不绑定this。</p>\n<p>由于 箭头函数没有自己的this指针，通过 call() 或 apply() 方法调用一个函数时，只能传递参数（不能绑定this---译者注），他们的第一个参数会被忽略。（这种现象对于bind方法同样成立---译者注）</p>\n<p>箭头函数不能用作构造器，和 new一起用会抛出错误。</p>\n<p>箭头函数没有prototype属性。</p>\n<p>yield 关键字通常不能在箭头函数中使用（除非是嵌套在允许使用的函数内）。因此，箭头函数不能用作生成器。</p>\n<h2 id="%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6">事件机制<a class="anchor" href="#%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6">§</a></h2>\n<h2 id="event-loop%E5%8E%9F%E7%90%86">Event Loop原理<a class="anchor" href="#event-loop%E5%8E%9F%E7%90%86">§</a></h2>\n<p><code>Event Loop</code>即事件循环，是指浏览器或<code>Node</code>的一种解决<code>javaScript</code>单线程运行时不会阻塞的一种机制，也就是我们经常使用异步的原理。</p>\n<p>在<code>JavaScript</code>中，任务被分为两种，一种宏任务（<code>MacroTask</code>）也叫<code>Task</code>，一种叫微任务（<code>MicroTask</code>）。</p>\n<h2 id="%E5%8E%9F%E5%9E%8B-prototype">原型 Prototype<a class="anchor" href="#%E5%8E%9F%E5%9E%8B-prototype">§</a></h2>\n<p><img src="https://camo.githubusercontent.com/71cab2efcf6fb8401a2f0ef49443dd94bffc1373/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f332f31332f313632316538613962636230383732643f773d34383826683d35393026663d706e6726733d313531373232" alt="prototype"></p>\n<p>每个函数都有 <code>prototype</code> 属性，除了 <code>Function.prototype.bind()</code>，该属性指向原型。</p>\n<p>每个对象都有 <code>__proto__</code> 属性，指向了创建该对象的构造函数的原型。其实这个属性指向了 <code>[[prototype]]</code>，但是 <code>[[prototype]]</code> 是内部属性，我们并不能访问到，所以使用 <code>_proto_</code> 来访问。</p>\n<p>对象可以通过 <code>__proto__</code> 来寻找不属于该对象的属性，<code>__proto__</code> 将对象连接起来组成了原型链。</p>\n<p>如果你想更进一步的了解原型，可以仔细阅读 <a href="https://github.com/KieSun/Blog/issues/2">深度解析原型中的各个难点</a>。</p>\n<h2 id="new-%E5%8E%9F%E7%90%86">new 原理<a class="anchor" href="#new-%E5%8E%9F%E7%90%86">§</a></h2>\n<ol>\n<li>新生成了一个对象</li>\n<li>链接到原型</li>\n<li>绑定 this</li>\n<li>返回新对象</li>\n</ol>\n<p>在调用 <code>new</code> 的过程中会发生以上四件事情，我们也可以试着来自己实现一个 <code>new</code></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 创建一个空的对象</span>\n    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 获得构造函数</span>\n    <span class="token keyword">let</span> <span class="token maybe-class-name">Con</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n    <span class="token comment">// 链接到原型</span>\n    obj<span class="token punctuation">.</span><span class="token property-access">__proto__</span> <span class="token operator">=</span> <span class="token class-name">Con</span><span class="token punctuation">.</span><span class="token property-access">prototype</span>\n    <span class="token comment">// 绑定 this，执行构造函数</span>\n    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token maybe-class-name">Con</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>\n    <span class="token comment">// 确保 new 出来的是个对象</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj\n<span class="token punctuation">}</span>\n</code></pre>\n<p>对于实例对象来说，都是通过 <code>new</code> 产生的，无论是 <code>function Foo()</code> 还是 <code>let a = { b : 1 }</code> 。</p>\n<p>对于创建一个对象来说，更推荐使用字面量的方式创建对象（无论性能上还是可读性）。因为你使用 <code>new Object()</code> 的方式创建对象需要通过作用域链一层层找到 <code>Object</code>，但是你使用字面量的方式就没这个问题。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Foo</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">// function 就是个语法糖</span>\n<span class="token comment">// 内部等同于 new Function()</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n<span class="token comment">// 这个字面量内部也是使用了 new Object()</span>\n</code></pre>\n<p>对于 <code>new</code> 来说，还需要注意下运算符优先级。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Foo</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token maybe-class-name">Foo</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token class-name">Foo</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'2\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Foo<span class="token punctuation">.</span>getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// -> 1</span>\n<span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -> 2       </span>\n</code></pre>\n<p><img src="https://user-gold-cdn.xitu.io/2018/4/9/162a9c56c838aa88?w=2100&amp;h=540&amp;f=png&amp;s=127506" alt=""></p>\n<p>从上图可以看出，<code>new Foo() </code> 的优先级大于 <code>new Foo</code> ，所以对于上述代码来说可以这样划分执行顺序</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token maybe-class-name">Foo</span><span class="token punctuation">.</span><span class="token method function property-access">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>对于第一个函数来说，先执行了 <code>Foo.getName()</code> ，所以结果为 1；对于后者来说，先执行 <code>new Foo()</code> 产生了一个实例，然后通过原型链找到了 <code>Foo</code> 上的 <code>getName</code> 函数，所以结果为 2。</p>\n<h2 id="promise-%E5%8E%9F%E7%90%86">Promise 原理<a class="anchor" href="#promise-%E5%8E%9F%E7%90%86">§</a></h2>\n<p><code>Promise</code> 是 <code>ES6</code> 新增的语法，解决了回调地狱的问题。</p>\n<p>可以把 <code>Promise</code> 看成一个状态机。初始是 <code>pending</code> 状态，可以通过函数 <code>resolve</code> 和 <code>reject</code> ，将状态转变为 <code>resolved</code> 或者 <code>rejected</code> 状态，状态一旦改变就不能再次变化。</p>\n<p><code>then</code> 函数会返回一个 <code>Promise</code> 实例，并且该返回值是一个新的实例而不是之前的实例。因为 <code>Promise</code> 规范规定除了 <code>pending</code> 状态，其他状态是不可以改变的，如果返回的是一个相同实例的话，多个 <code>then</code> 调用就失去意义了。</p>\n<p>对于 <code>then</code> 来说，本质上可以把它看成是 <code>flatMap</code></p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 三种状态</span>\n<span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">\'pending\'</span>\n<span class="token keyword">const</span> <span class="token constant">RESOLVED</span> <span class="token operator">=</span> <span class="token string">\'resolved\'</span>\n<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">\'rejected\'</span>\n<span class="token comment">// promise 接收一个函数参数，该函数会立即执行</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">MyPromise</span></span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>\n  _this<span class="token punctuation">.</span><span class="token property-access">currentState</span> <span class="token operator">=</span> <span class="token constant">PENDING</span>\n  _this<span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">=</span> <span class="token keyword nil">undefined</span>\n  <span class="token comment">// 用于保存 then 中的回调，只有当 promise</span>\n  <span class="token comment">// 状态为 pending 时才会缓存，并且每个实例至多缓存一个</span>\n  _this<span class="token punctuation">.</span><span class="token property-access">resolvedCallbacks</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  _this<span class="token punctuation">.</span><span class="token property-access">rejectedCallbacks</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  _this<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">resolve</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果 value 是个 Promise，递归执行</span>\n      <span class="token keyword control-flow">return</span> value<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>_this<span class="token punctuation">.</span><span class="token property-access">resolve</span><span class="token punctuation">,</span> _this<span class="token punctuation">.</span><span class="token property-access">reject</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// 异步执行，保证执行顺序</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">.</span><span class="token property-access">currentState</span> <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        _this<span class="token punctuation">.</span><span class="token property-access">currentState</span> <span class="token operator">=</span> <span class="token constant">RESOLVED</span>\n        _this<span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">=</span> value\n        _this<span class="token punctuation">.</span><span class="token property-access">resolvedCallbacks</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token arrow operator">=></span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  _this<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">reject</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// 异步执行，保证执行顺序</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">.</span><span class="token property-access">currentState</span> <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        _this<span class="token punctuation">.</span><span class="token property-access">currentState</span> <span class="token operator">=</span> <span class="token constant">REJECTED</span>\n        _this<span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">=</span> reason\n        _this<span class="token punctuation">.</span><span class="token property-access">rejectedCallbacks</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token arrow operator">=></span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 用于解决以下问题</span>\n  <span class="token comment">// new Promise(() => throw Error(\'error))</span>\n  <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n    <span class="token function">fn</span><span class="token punctuation">(</span>_this<span class="token punctuation">.</span><span class="token property-access">resolve</span><span class="token punctuation">,</span> _this<span class="token punctuation">.</span><span class="token property-access">reject</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    _this<span class="token punctuation">.</span><span class="token method function property-access">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">MyPromise</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">then</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">onResolved<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span>\n  <span class="token comment">// 规范 2.2.7，then 必须返回一个新的 promise</span>\n  <span class="token keyword">var</span> promise2\n  <span class="token comment">// 规范 2.2.onResolved 和 onRejected 都为可选参数</span>\n  <span class="token comment">// 如果类型不是函数需要忽略，同时也实现了透传</span>\n  <span class="token comment">// Promise.resolve(4).then().then((value) => console.log(value))</span>\n  onResolved <span class="token operator">=</span> <span class="token keyword">typeof</span> onResolved <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">?</span> <span class="token function-variable function">onResolved</span> <span class="token operator">:</span> <span class="token parameter">v</span> <span class="token arrow operator">=></span> v\n  onRejected <span class="token operator">=</span> <span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">?</span> <span class="token function-variable function">onRejected</span> <span class="token operator">:</span> <span class="token parameter">r</span> <span class="token arrow operator">=></span> <span class="token keyword control-flow">throw</span> r\n\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">currentState</span> <span class="token operator">===</span> <span class="token constant">RESOLVED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 规范 2.2.4，保证 onFulfilled，onRjected 异步执行</span>\n      <span class="token comment">// 所以用了 setTimeout 包裹下</span>\n      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n          <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">onResolved</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n          <span class="token function">resolutionProcedure</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">currentState</span> <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 异步执行onRejected</span>\n        <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n          <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n          <span class="token function">resolutionProcedure</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">currentState</span> <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      self<span class="token punctuation">.</span><span class="token property-access">resolvedCallbacks</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 考虑到可能会有报错，所以使用 try/catch 包裹</span>\n        <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n          <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">onResolved</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n          <span class="token function">resolutionProcedure</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n      self<span class="token punctuation">.</span><span class="token property-access">rejectedCallbacks</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n          <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n          <span class="token function">resolutionProcedure</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 规范 2.3</span>\n<span class="token keyword">function</span> <span class="token function">resolutionProcedure</span><span class="token punctuation">(</span><span class="token parameter">promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 规范 2.3.1，x 不能和 promise2 相同，避免循环引用</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>promise2 <span class="token operator">===</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">\'Error\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 规范 2.3.2</span>\n  <span class="token comment">// 如果 x 为 Promise，状态为 pending 需要继续等待否则执行</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token property-access">currentState</span> <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      x<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 再次调用该函数是为了确认 x resolve 的</span>\n        <span class="token comment">// 参数是什么类型，如果是基本类型就再次 resolve</span>\n        <span class="token comment">// 把值传给下个 then</span>\n        <span class="token function">resolutionProcedure</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> value<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      x<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 规范 2.3.3.3.3</span>\n  <span class="token comment">// reject 或者 resolve 其中一个执行过得话，忽略其他的</span>\n  <span class="token keyword">let</span> called <span class="token operator">=</span> <span class="token boolean">false</span>\n  <span class="token comment">// 规范 2.3.3，判断 x 是否为对象或者函数</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>x <span class="token operator">!==</span> <span class="token keyword null nil">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 规范 2.3.3.2，如果不能取出 then，就 reject</span>\n    <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 规范 2.3.3.1</span>\n      <span class="token keyword">let</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token property-access">then</span>\n      <span class="token comment">// 如果 then 是函数，调用 x.then</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 规范 2.3.3.3</span>\n        then<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>\n          x<span class="token punctuation">,</span>\n          <span class="token parameter">y</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n            called <span class="token operator">=</span> <span class="token boolean">true</span>\n            <span class="token comment">// 规范 2.3.3.3.1</span>\n            <span class="token function">resolutionProcedure</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token parameter">e</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n            called <span class="token operator">=</span> <span class="token boolean">true</span>\n            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 规范 2.3.3.4</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n      called <span class="token operator">=</span> <span class="token boolean">true</span>\n      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 规范 2.3.4，x 为基本类型</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>以上就是根据 Promise / A+ 规范来实现的代码，可以通过 <code>promises-aplus-tests</code> 的完整测试</p>\n<p><img src="https://user-gold-cdn.xitu.io/2018/3/29/162715e8e37e689d?w=1164&amp;h=636&amp;f=png&amp;s=300285" alt=""></p>\n<h2 id="asyncawait-%E5%8E%9F%E7%90%86">Async/Await 原理<a class="anchor" href="#asyncawait-%E5%8E%9F%E7%90%86">§</a></h2>\n<p>一个函数如果加上 <code>async</code> ，那么该函数就会返回一个 <code>Promise</code></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token string">\'1\'</span>\n<span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -> Promise {&lt;resolved>: "1"}</span>\n</code></pre>\n<p>可以把 <code>async</code> 看成将函数返回值使用 <code>Promise.resolve()</code> 包裹了下。</p>\n<p><code>await</code> 只能在 <code>async</code> 函数中使用</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'finish\'</span><span class="token punctuation">)</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'sleep\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'object\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<p>上面代码会先打印 <code>finish</code> 然后再打印 <code>object</code> 。因为 <code>await</code> 会等待 <code>sleep</code> 函数 <code>resolve</code> ，所以即使后面是同步代码，也不会先去执行同步代码再来执行异步代码。</p>\n<p><code>async 和 await</code> 相比直接使用 <code>Promise</code> 来说，优势在于处理 <code>then</code> 的调用链，能够更清晰准确的写出代码。缺点在于滥用 <code>await</code> 可能会导致性能问题，因为 <code>await</code> 会阻塞代码，也许之后的异步代码并不依赖于前者，但仍然需要等待前者完成，导致代码失去了并发性。</p>\n<p>下面来看一个使用 <code>await</code> 的代码。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">var</span> <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword control-flow">await</span> <span class="token number">10</span><span class="token punctuation">)</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'2\'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment">// -> \'2\' 10</span>\n  a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword control-flow">await</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> a\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'3\'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment">// -> \'3\' 20</span>\n<span class="token punctuation">}</span>\n<span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\na<span class="token operator">++</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'1\'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment">// -> \'1\' 1</span>\n</code></pre>\n<p>对于以上代码你可能会有疑惑，这里说明下原理</p>\n<ul>\n<li>首先函数 <code>b</code> 先执行，在执行到 <code>await 10</code> 之前变量 <code>a</code> 还是 0，因为在 <code>await</code> 内部实现了 <code>generators</code> ，<code>generators</code> 会保留堆栈中东西，所以这时候 <code>a = 0</code> 被保存了下来</li>\n<li>因为 <code>await</code> 是异步操作，遇到<code>await</code>就会立即返回一个<code>pending</code>状态的<code>Promise</code>对象，暂时返回执行代码的控制权，使得函数外的代码得以继续执行，所以会先执行 <code>console.log(\'1\', a)</code></li>\n<li>这时候同步代码执行完毕，开始执行异步代码，将保存下来的值拿出来使用，这时候 <code>a = 10</code></li>\n<li>然后后面就是常规执行代码了</li>\n</ul>\n<h2 id="call-apply-bind-%E5%8C%BA%E5%88%AB">call, apply, bind 区别<a class="anchor" href="#call-apply-bind-%E5%8C%BA%E5%88%AB">§</a></h2>\n<p>首先说下前两者的区别。</p>\n<p><code>call</code> 和 <code>apply</code> 都是为了解决改变 <code>this</code> 的指向。作用都是相同的，只是传参的方式不同。</p>\n<p>除了第一个参数外，<code>call</code> 可以接收一个参数列表，<code>apply</code> 只接受一个参数数组。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\ngetValue<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">\'yck\'</span><span class="token punctuation">,</span> <span class="token string">\'24\'</span><span class="token punctuation">)</span>\ngetValue<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'yck\'</span><span class="token punctuation">,</span> <span class="token string">\'24\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0-call-%E5%92%8C-apply">模拟实现 call 和 apply<a class="anchor" href="#%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0-call-%E5%92%8C-apply">§</a></h3>\n<p>可以从以下几点来考虑如何实现</p>\n<ul>\n<li>不传入第一个参数，那么默认为 <code>window</code></li>\n<li>改变了 this 指向，让新的对象可以执行该函数。那么思路是否可以变成给新的对象添加一个函数，然后在执行完以后删除？</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> context <span class="token operator">=</span> context <span class="token operator">||</span> <span class="token dom variable">window</span>\n  <span class="token comment">// 给 context 添加一个属性</span>\n  <span class="token comment">// getValue.call(a, \'yck\', \'24\') => a.fn = getValue</span>\n  context<span class="token punctuation">.</span><span class="token property-access">fn</span> <span class="token operator">=</span> <span class="token keyword">this</span>\n  <span class="token comment">// 将 context 后面的参数取出来</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token comment">// getValue.call(a, \'yck\', \'24\') => a.fn(\'yck\', \'24\')</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token method function property-access">fn</span><span class="token punctuation">(</span><span class="token spread operator">...</span>args<span class="token punctuation">)</span>\n  <span class="token comment">// 删除 fn</span>\n  <span class="token keyword">delete</span> context<span class="token punctuation">.</span><span class="token property-access">fn</span>\n  <span class="token keyword control-flow">return</span> result\n<span class="token punctuation">}</span>\n</code></pre>\n<p>以上就是 <code>call</code> 的思路，<code>apply</code> 的实现也类似</p>\n<pre class="language-js"><code class="language-js"><span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> context <span class="token operator">=</span> context <span class="token operator">||</span> <span class="token dom variable">window</span>\n  context<span class="token punctuation">.</span><span class="token property-access">fn</span> <span class="token operator">=</span> <span class="token keyword">this</span>\n\n  <span class="token keyword">var</span> result\n  <span class="token comment">// 需要判断是否存储第二个参数</span>\n  <span class="token comment">// 如果存在，就将第二个参数展开</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token method function property-access">fn</span><span class="token punctuation">(</span><span class="token spread operator">...</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token method function property-access">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">delete</span> context<span class="token punctuation">.</span><span class="token property-access">fn</span>\n  <span class="token keyword control-flow">return</span> result\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0-bind">模拟实现 bind<a class="anchor" href="#%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0-bind">§</a></h3>\n<p><code>bind</code> 和其他两个方法作用也是一致的，只是该方法会返回一个函数。并且我们可以通过 <code>bind</code> 实现柯里化。</p>\n<p>同样的，也来模拟实现下 <code>bind</code></p>\n<pre class="language-js"><code class="language-js"><span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">\'Error\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token comment">// 返回一个函数</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 因为返回了一个函数，我们可以 new F()，所以需要判断</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">F</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">_this</span><span class="token punctuation">(</span><span class="token spread operator">...</span>args<span class="token punctuation">,</span> <span class="token spread operator">...</span>arguments<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> _this<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span><span class="token spread operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81%E5%8E%9F%E7%90%86">防抖/节流原理<a class="anchor" href="#%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81%E5%8E%9F%E7%90%86">§</a></h2>\n<h3 id="%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0">实现一个防抖函数<a class="anchor" href="#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0">§</a></h3>\n<p>你是否在日常开发中遇到一个问题，在滚动事件中需要做个复杂计算或者实现一个按钮的防二次点击操作。</p>\n<p>这些需求都可以通过函数防抖动来实现。尤其是第一个需求，如果在频繁的事件回调中做复杂计算，很有可能导致页面卡顿，不如将多次计算合并为一次计算，只在一个精确点做操作。</p>\n<p>PS：防抖和节流的作用都是防止函数多次调用。区别在于，假设一个用户一直触发这个函数，且每次触发函数的间隔小于 wait，防抖的情况下只会调用一次，而节流的 情况会每隔一定时间（参数 wait）调用函数。</p>\n<p>我们先来看一个袖珍版的防抖理解一下防抖的实现：</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// func是用户传入需要防抖的函数</span>\n<span class="token comment">// wait是等待时间</span>\n<span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait <span class="token operator">=</span> <span class="token number">50</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 缓存一个定时器id</span>\n  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token comment">// 这里返回的函数是每次用户实际调用的防抖函数</span>\n  <span class="token comment">// 如果已经设定过定时器了就清空上一次的定时器</span>\n  <span class="token comment">// 开始一个新的定时器，延迟执行用户传入的方法</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 不难看出如果用户调用该函数的间隔小于wait的情况下，上一次的时间还未到就被清除了，并不会执行函数</span>\n</code></pre>\n<p>这是一个简单版的防抖，但是有缺陷，这个防抖只能在最后调用。一般的防抖会有 immediate 选项，表示是否立即调用。这两者的区别，举个栗子来说：</p>\n<ul>\n<li>例如在搜索引擎搜索问题的时候，我们当然是希望用户输入完最后一个字才调用查询接口，这个时候适用<code>延迟执行</code>的防抖函数，它总是在一连串（间隔小于 wait 的）函数触发之后调用。</li>\n<li>例如用户给 interviewMap 点 star 的时候，我们希望用户点第一下的时候就去调用接口，并且成功之后改变 star 按钮的样子，用户就可以立马得到反馈是否 star 成功了，这个情况适用<code>立即执行</code>的防抖函数，它总是在第一次调用，并且下一次调用必须与前一次调用的时间间隔大于 wait 才会触发。</li>\n</ul>\n<p>下面我们来实现一个带有立即执行选项的防抖函数</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 这个是用来获取当前时间戳的</span>\n<span class="token keyword">function</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行\n *\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">function</span><span class="token punctuation">}</span></span> <span class="token parameter">func</span>        回调函数\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>   <span class="token parameter">wait</span>        表示时间窗口的间隔\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>  <span class="token parameter">immediate</span>   设置为ture时，是否立即调用函数\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">function</span><span class="token punctuation">}</span></span>             返回客户调用函数\n */</span>\n<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">,</span> immediate <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> timer<span class="token punctuation">,</span> context<span class="token punctuation">,</span> args\n\n  <span class="token comment">// 延迟执行函数</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// 延迟函数执行完毕，清空缓存的定时器序号</span>\n      timer <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n      <span class="token comment">// 延迟执行的情况下，函数会在延迟函数中执行</span>\n      <span class="token comment">// 使用到之前缓存的参数和上下文</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n        context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>\n\n  <span class="token comment">// 这里返回的函数是每次实际调用的函数</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果没有创建延迟执行函数（later），就创建一个</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      timer <span class="token operator">=</span> <span class="token function">later</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token comment">// 如果是立即执行，调用函数</span>\n      <span class="token comment">// 否则缓存参数和调用上下文</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        context <span class="token operator">=</span> <span class="token keyword">this</span>\n        args <span class="token operator">=</span> params\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个</span>\n      <span class="token comment">// 这样做延迟函数会重新计时</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n      timer <span class="token operator">=</span> <span class="token function">later</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>整体函数实现的不难，总结一下。</p>\n<ul>\n<li>对于按钮防点击来说的实现：如果函数是立即执行的，就立即调用，如果函数是延迟执行的，就缓存上下文和参数，放到延迟函数中去执行。一旦我开始一个定时器，只要我定时器还在，你每次点击我都重新计时。一旦你点累了，定时器时间到，定时器重置为 <code>null</code>，就可以再次点击了。</li>\n<li>对于延时执行函数来说的实现：清除定时器 ID，如果是延迟调用就调用函数</li>\n</ul>\n<h3 id="%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0">实现一个节流函数<a class="anchor" href="#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0">§</a></h3>\n<p>防抖动和节流本质是不一样的。防抖动是将多次执行变为最后一次执行，节流是将多次执行变成每隔一段时间执行。</p>\n<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/**\n * underscore 节流函数，返回函数连续调用时，func 执行频率限定为 次 / wait\n *\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">function</span><span class="token punctuation">}</span></span>   <span class="token parameter">func</span>      回调函数\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>     <span class="token parameter">wait</span>      表示时间窗口的间隔\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span>     <span class="token parameter">options</span>   如果想忽略开始函数的的调用，传入<span class="token punctuation">{</span>leading: false<span class="token punctuation">}</span>。\n *                                如果想忽略结尾函数的调用，传入<span class="token punctuation">{</span>trailing: false<span class="token punctuation">}</span>\n *                                两者不能共存，否则函数不能执行\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">function</span><span class="token punctuation">}</span></span>             返回客户调用函数\n */</span>\n_<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">throttle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> context<span class="token punctuation">,</span> args<span class="token punctuation">,</span> result\n  <span class="token keyword">var</span> timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n  <span class="token comment">// 之前的时间戳</span>\n  <span class="token keyword">var</span> previous <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token comment">// 如果 options 没传则设为空对象</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">)</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token comment">// 定时器回调函数</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果设置了 leading，就将 previous 设为 0</span>\n    <span class="token comment">// 用于下面函数的第一个 if 判断</span>\n    previous <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token property-access">leading</span> <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> _<span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 置空一是为了防止内存泄漏，二是为了下面的定时器判断</span>\n    timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n    result <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 获得当前时间戳</span>\n    <span class="token keyword">var</span> now <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 首次进入前者肯定为 true</span>\n    <span class="token comment">// 如果需要第一次不执行函数</span>\n    <span class="token comment">// 就将上次时间戳设为当前的</span>\n    <span class="token comment">// 这样在接下来计算 remaining 的值时会大于0</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>previous <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token property-access">leading</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> previous <span class="token operator">=</span> now\n    <span class="token comment">// 计算剩余时间</span>\n    <span class="token keyword">var</span> remaining <span class="token operator">=</span> wait <span class="token operator">-</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous<span class="token punctuation">)</span>\n    context <span class="token operator">=</span> <span class="token keyword">this</span>\n    args <span class="token operator">=</span> arguments\n    <span class="token comment">// 如果当前调用已经大于上次调用时间 + wait</span>\n    <span class="token comment">// 或者用户手动调了时间</span>\n    <span class="token comment">// 如果设置了 trailing，只会进入这个条件</span>\n    <span class="token comment">// 如果没有设置 leading，那么第一次会进入这个条件</span>\n    <span class="token comment">// 还有一点，你可能会觉得开启了定时器那么应该不会进入这个 if 条件了</span>\n    <span class="token comment">// 其实还是会进入的，因为定时器的延时</span>\n    <span class="token comment">// 并不是准确的时间，很可能你设置了2秒</span>\n    <span class="token comment">// 但是他需要2.2秒才触发，这时候就会进入这个条件</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> remaining <span class="token operator">></span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果存在定时器就清理掉否则会调用二次回调</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>\n        timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n      <span class="token punctuation">}</span>\n      previous <span class="token operator">=</span> now\n      result <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token property-access">trailing</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 判断是否设置了定时器和 trailing</span>\n      <span class="token comment">// 没有的话就开启一个定时器</span>\n      <span class="token comment">// 并且不能不能同时设置 leading 和 trailing</span>\n      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> result\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AF%A6%E8%A7%A3">模块化详解<a class="anchor" href="#%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AF%A6%E8%A7%A3">§</a></h2>\n<p>在有 Babel 的情况下，我们可以直接使用 ES6 的模块化</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// file a.js</span>\n<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">// file b.js</span>\n<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">\'./a.js\'</span>\n<span class="token keyword module">import</span> <span class="token constant">XXX</span> <span class="token keyword module">from</span> <span class="token string">\'./b.js\'</span>\n</code></pre>\n<h3 id="commonjs">CommonJS<a class="anchor" href="#commonjs">§</a></h3>\n<p><code>CommonJs</code> 是 Node 独有的规范，浏览器中使用就需要用到 <code>Browserify</code> 解析了。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// a.js</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// or</span>\nexports<span class="token punctuation">.</span><span class="token property-access">a</span> <span class="token operator">=</span> <span class="token number">1</span>\n\n<span class="token comment">// b.js</span>\n<span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./a.js\'</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">a</span> <span class="token comment">// -> log 1</span>\n</code></pre>\n<p>在上述代码中，<code>module.exports</code> 和 <code>exports</code> 很容易混淆，让我们来看看大致内部实现</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./a.js\'</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">a</span>\n<span class="token comment">// 这里其实就是包装了一层立即执行函数，这样就不会污染全局变量了，</span>\n<span class="token comment">// 重要的是 module 这里，module 是 Node 独有的一个变量</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 基本实现</span>\n<span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">{</span>\n  exports<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// exports 就是个空对象</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 这个是为什么 exports 和 module.exports 用法相似的原因</span>\n<span class="token keyword">var</span> exports <span class="token operator">=</span> module<span class="token punctuation">.</span><span class="token property-access">exports</span>\n<span class="token keyword">var</span> <span class="token function-variable function">load</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 导出的东西</span>\n  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>\n  module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> a\n  <span class="token keyword control-flow">return</span> module<span class="token punctuation">.</span><span class="token property-access">exports</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>再来说说 <code>module.exports</code> 和 <code>exports</code>，用法其实是相似的，但是不能对 <code>exports</code> 直接赋值，不会有任何效果。</p>\n<p>对于 <code>CommonJS</code> 和 ES6 中的模块化的两者区别是：</p>\n<ul>\n<li>\n<p>前者支持动态导入，也就是 <code>require(${path}/xx.js)</code>，后者目前不支持，但是已有提案</p>\n</li>\n<li>\n<p>前者是同步导入，因为用于服务端，文件都在本地，同步导入即使卡住主线程影响也不大。而后者是异步导入，因为用于浏览器，需要下载文件，如果也采用同步导入会对渲染有很大影响</p>\n</li>\n<li>\n<p>前者在导出时都是值拷贝，就算导出的值变了，导入的值也不会改变，所以如果想更新值，必须重新导入一次。但是后者采用实时绑定的方式，导入导出的值都指向同一个内存地址，所以导入值会跟随导出值变化</p>\n</li>\n<li>\n<p>后者会编译成 <code>require/exports</code> 来执行的</p>\n</li>\n</ul>\n<h3 id="amd">AMD<a class="anchor" href="#amd">§</a></h3>\n<p>AMD 是由 <code>RequireJS</code> 提出的</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// AMD</span>\n<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'./a\'</span><span class="token punctuation">,</span> <span class="token string">\'./b\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  a<span class="token punctuation">.</span><span class="token keyword control-flow">do</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  b<span class="token punctuation">.</span><span class="token keyword control-flow">do</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./a\'</span><span class="token punctuation">)</span>\n  a<span class="token punctuation">.</span><span class="token method function property-access">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./b\'</span><span class="token punctuation">)</span>\n  b<span class="token punctuation">.</span><span class="token method function property-access">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%B7%B1%E5%85%A5-javascript" }, "\u6DF1\u5165 JavaScript"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%97%AD%E5%8C%85" }, "\u4F5C\u7528\u57DF\u95ED\u5305"),
                        React.createElement("ol", null,
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87" }, "\u6267\u884C\u4E0A\u4E0B\u6587")),
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E9%97%AD%E5%8C%85" }, "\u95ED\u5305")))),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#this-%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90" }, "this \u5168\u9762\u89E3\u6790")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%8E%9F%E7%90%86" }, "\u6DF1\u6D45\u62F7\u8D1D\u539F\u7406"),
                        React.createElement("ol", null,
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E8%B5%8B%E5%80%BC%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB" }, "\u8D4B\u503C\u3001\u6D45\u62F7\u8D1D\u548C\u6DF1\u62F7\u8D1D\u7684\u533A\u522B"),
                                React.createElement("ol", null,
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E4%B8%80%E8%B5%8B%E5%80%BCcopy" }, "\u4E00\u3001\u8D4B\u503C\uFF08Copy\uFF09")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E4%BA%8C%E6%B5%85%E6%8B%B7%E8%B4%9Dshallow-copy" }, "\u4E8C\u3001\u6D45\u62F7\u8D1D\uFF08Shallow Copy\uFF09")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E4%B8%89%E6%B7%B1%E6%8B%B7%E8%B4%9Ddeep-copy" }, "\u4E09\u3001\u6DF1\u62F7\u8D1D\uFF08Deep Copy\uFF09")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E5%9B%9B%E6%80%BB%E7%BB%93" }, "\u56DB\u3001\u603B\u7ED3")))),
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%B5%85%E6%8B%B7%E8%B4%9D" }, "\u5B9E\u73B0\u4E00\u4E2A\u6D45\u62F7\u8D1D"),
                                React.createElement("ol", null,
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E6%B5%85%E6%8B%B7%E8%B4%9D-objectassign" }, "\u6D45\u62F7\u8D1D Object.assign")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#objectassign-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0" }, "Object.assign \u6A21\u62DF\u5B9E\u73B0")))),
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%B7%B1%E6%8B%B7%E8%B4%9D" }, "\u5B9E\u73B0\u4E00\u4E2A\u6DF1\u62F7\u8D1D"),
                                React.createElement("ol", null,
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AC%AC%E4%B8%80%E6%AD%A5%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0" }, "\u7B2C\u4E00\u6B65\uFF1A\u7B80\u5355\u5B9E\u73B0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E6%8B%B7%E8%B4%9D%E6%95%B0%E7%BB%84" }, "\u7B2C\u4E8C\u6B65\uFF1A\u62F7\u8D1D\u6570\u7EC4")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AC%AC%E4%B8%89%E6%AD%A5%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8" }, "\u7B2C\u4E09\u6B65\uFF1A\u5FAA\u73AF\u5F15\u7528")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AC%AC%E5%9B%9B%E6%AD%A5%E6%8B%B7%E8%B4%9D-symbol" }, "\u7B2C\u56DB\u6B65\uFF1A\u62F7\u8D1D Symbol")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AC%AC%E4%BA%94%E6%AD%A5%E7%A0%B4%E8%A7%A3%E9%80%92%E5%BD%92%E7%88%86%E6%A0%88" }, "\u7B2C\u4E94\u6B65\uFF1A\u7834\u89E3\u9012\u5F52\u7206\u6808")))))),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0" }, "\u9AD8\u9636\u51FD\u6570"),
                        React.createElement("ol", null,
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0" }, "\u7BAD\u5934\u51FD\u6570")))),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6" }, "\u4E8B\u4EF6\u673A\u5236")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#event-loop%E5%8E%9F%E7%90%86" }, "Event Loop\u539F\u7406")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%8E%9F%E5%9E%8B-prototype" }, "\u539F\u578B Prototype")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#new-%E5%8E%9F%E7%90%86" }, "new \u539F\u7406")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#promise-%E5%8E%9F%E7%90%86" }, "Promise \u539F\u7406")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#asyncawait-%E5%8E%9F%E7%90%86" }, "Async/Await \u539F\u7406")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#call-apply-bind-%E5%8C%BA%E5%88%AB" }, "call, apply, bind \u533A\u522B"),
                        React.createElement("ol", null,
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0-call-%E5%92%8C-apply" }, "\u6A21\u62DF\u5B9E\u73B0 call \u548C apply")),
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0-bind" }, "\u6A21\u62DF\u5B9E\u73B0 bind")))),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81%E5%8E%9F%E7%90%86" }, "\u9632\u6296/\u8282\u6D41\u539F\u7406"),
                        React.createElement("ol", null,
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0" }, "\u5B9E\u73B0\u4E00\u4E2A\u9632\u6296\u51FD\u6570")),
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0" }, "\u5B9E\u73B0\u4E00\u4E2A\u8282\u6D41\u51FD\u6570")))),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AF%A6%E8%A7%A3" }, "\u6A21\u5757\u5316\u8BE6\u89E3"),
                        React.createElement("ol", null,
                            React.createElement("li", null,
                                React.createElement("a", { href: "#commonjs" }, "CommonJS")),
                            React.createElement("li", null,
                                React.createElement("a", { href: "#amd" }, "AMD")))))))),
    'author': "wangweidong",
    'contributors': [
        "wangweidong"
    ],
    'date': "2021-02-02T15:43:32.000Z",
    'updated': null,
    'excerpt': "作用域闭包 执行上下文 当执行 JS 代码时，会产生三种执行上下文 - 全局执行上下文 - 函数执行上下文 - eval 执行上下文 每个执行上下文中都有三个重要的属性 - 变量对象（VO），包含变量、函数声明和函数的形参，该属性只能在...",
    'cover': "https://user-gold-cdn.xitu.io/2018/12/24/167de3ac36bb9de7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",
    'sidebar': [
        {
            "link": "start/index.html",
            "title": "修仙入门",
            "children": [
                {
                    "text": "CSS 入门",
                    "link": "start/CSS.html",
                    "pagePath": "start/CSS.md"
                },
                {
                    "text": "CSS3新特性",
                    "link": "start/CSS3.html",
                    "pagePath": "start/CSS3.md"
                },
                {
                    "text": "深入 JavaScript",
                    "link": "start/JS.html",
                    "pagePath": "start/JS.md"
                },
                {
                    "text": "移动端常见问题",
                    "link": "start/Mobile.html",
                    "pagePath": "start/Mobile.md"
                },
                {
                    "text": "性能优化",
                    "link": "start/Performance.html",
                    "pagePath": "start/Performance.md"
                },
                {
                    "text": "代码重构经验",
                    "link": "start/Codeing.html",
                    "pagePath": "start/Codeing.md"
                },
                {
                    "text": "Mobx",
                    "link": "start/Mobx.html",
                    "pagePath": "start/Mobx.md"
                }
            ],
            "pagePath": "start/README.md",
            "text": "修仙入门"
        }
    ],
    'gitalk': React.createElement(Gitalk, { admin: [
            'ViktorWong'
        ], clientID: "0af8ad0c8674b58c37c0", clientSecret: "fe697a9667fc2b49387bf550e4178b3eaa5b8859", id: "start/JS.html", owner: "ViktorWong", pagerDirection: "first", repo: "my-docs", title: "\u6DF1\u5165 JavaScript" })
};
