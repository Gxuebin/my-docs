import projectConfig from '/pagic.config.js';
import Gitalk from '/_gitalk.js';
export default {
    'prev': {
        "text": "00.数据库篇",
        "link": "interview/index.html"
    },
    'next': {
        "text": "网络",
        "link": "interview/HTTP.html"
    },
    config: { "root": "/", ...projectConfig, branch: 'master' },
    'pagePath': "interview/Alibaba.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "interview/Alibaba.html",
    'title': "01.阿里篇",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1 id="01%E9%98%BF%E9%87%8C%E7%AF%87">01.阿里篇<a class="anchor" href="#01%E9%98%BF%E9%87%8C%E7%AF%87">§</a></h1>\n<h2 id="q1%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%AB%98%E6%95%88%E7%9A%84%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E9%80%86%E5%BA%8F%E8%BE%93%E5%87%BA">Q1：如何实现一个高效的单向链表逆序输出？<a class="anchor" href="#q1%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%AB%98%E6%95%88%E7%9A%84%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E9%80%86%E5%BA%8F%E8%BE%93%E5%87%BA">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：昀龙／阿里云弹性人工智能负责人</p>\n<p><strong>参考答案</strong>：下面是其中一种写法，也可以有不同的写法，比如递归等。供参考。</p>\n<pre class="language-autoit"><code class="language-autoit">typedef struct node{\n    int           data<span class="token comment">;</span>\n    struct node<span class="token operator">*</span>  <span class="token keyword">next</span><span class="token comment">;</span>\n    <span class="token function">node</span><span class="token punctuation">(</span>int d<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">data</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">NULL</span><span class="token punctuation">)</span>{}\n}node<span class="token comment">;</span>\n\nvoid <span class="token function">reverse</span><span class="token punctuation">(</span>node<span class="token operator">*</span> head<span class="token punctuation">)</span>\n{\n    <span class="token function">if</span><span class="token punctuation">(</span><span class="token keyword">NULL</span> <span class="token operator">==</span> head || <span class="token keyword">NULL</span> <span class="token operator">==</span> head<span class="token operator">-</span><span class="token operator">></span><span class="token keyword">next</span><span class="token punctuation">)</span>{\n        return<span class="token comment">;</span>\n    }\n    \n    node<span class="token operator">*</span> prev<span class="token operator">=</span><span class="token keyword">NULL</span><span class="token comment">;</span>\n    node<span class="token operator">*</span> pcur<span class="token operator">=</span>head<span class="token operator">-</span><span class="token operator">></span><span class="token keyword">next</span><span class="token comment">;</span>\n    node<span class="token operator">*</span> <span class="token keyword">next</span><span class="token comment">;</span>\n    \n    <span class="token function">while</span><span class="token punctuation">(</span>pcur!<span class="token operator">=</span><span class="token keyword">NULL</span><span class="token punctuation">)</span>{\n        <span class="token function">if</span><span class="token punctuation">(</span>pcur<span class="token operator">-</span><span class="token operator">></span><span class="token keyword">next</span><span class="token operator">==</span><span class="token keyword">NULL</span><span class="token punctuation">)</span>{\n            pcur<span class="token operator">-</span><span class="token operator">></span><span class="token keyword">next</span><span class="token operator">=</span>prev<span class="token comment">;</span>\n            break<span class="token comment">;</span>\n        }\n        <span class="token keyword">next</span><span class="token operator">=</span>pcur<span class="token operator">-</span><span class="token operator">></span><span class="token keyword">next</span><span class="token comment">;</span>\n        pcur<span class="token operator">-</span><span class="token operator">></span><span class="token keyword">next</span><span class="token operator">=</span>prev<span class="token comment">;</span>\n        prev<span class="token operator">=</span>pcur<span class="token comment">;</span>\n        pcur<span class="token operator">=</span><span class="token keyword">next</span><span class="token comment">;</span>\n    }\n    \n    head<span class="token operator">-</span><span class="token operator">></span><span class="token keyword">next</span><span class="token operator">=</span>pcur<span class="token comment">;</span>\n    node<span class="token operator">*</span>tmp<span class="token operator">=</span>head<span class="token operator">-</span><span class="token operator">></span><span class="token keyword">next</span><span class="token comment">;</span>\n    <span class="token function">while</span><span class="token punctuation">(</span>tmp!<span class="token operator">=</span><span class="token keyword">NULL</span><span class="token punctuation">)</span>{\n        cout<span class="token operator">&lt;</span><span class="token operator">&lt;</span>tmp<span class="token operator">-</span><span class="token operator">></span>data<span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token string">"\t"</span><span class="token comment">;</span>\n        tmp<span class="token operator">=</span>tmp<span class="token operator">-</span><span class="token operator">></span><span class="token keyword">next</span><span class="token comment">;</span>\n    }\n}\n\n</code></pre>\n<h2 id="q2%E5%B7%B2%E7%9F%A5-sqrt-2%E7%BA%A6%E7%AD%89%E4%BA%8E-1414%E8%A6%81%E6%B1%82%E4%B8%8D%E7%94%A8%E6%95%B0%E5%AD%A6%E5%BA%93%E6%B1%82-sqrt-2%E7%B2%BE%E7%A1%AE%E5%88%B0%E5%B0%8F%E6%95%B0%E7%82%B9%E5%90%8E-10-%E4%BD%8D">Q2：已知 sqrt (2)约等于 1.414，要求不用数学库，求 sqrt (2)精确到小数点后 10 位。<a class="anchor" href="#q2%E5%B7%B2%E7%9F%A5-sqrt-2%E7%BA%A6%E7%AD%89%E4%BA%8E-1414%E8%A6%81%E6%B1%82%E4%B8%8D%E7%94%A8%E6%95%B0%E5%AD%A6%E5%BA%93%E6%B1%82-sqrt-2%E7%B2%BE%E7%A1%AE%E5%88%B0%E5%B0%8F%E6%95%B0%E7%82%B9%E5%90%8E-10-%E4%BD%8D">§</a></h2>\n<p><strong>出题人</strong>：——阿里巴巴出题专家：文景／阿里云 CDN 资深技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<h4 id="-%E8%80%83%E5%AF%9F%E7%82%B9">* 考察点<a class="anchor" href="#-%E8%80%83%E5%AF%9F%E7%82%B9">§</a></h4>\n<ol>\n<li>基础算法的灵活应用能力（二分法学过数据结构的同学都知道，但不一定往这个方向考虑；如果学过数值计算的同学，应该还要能想到牛顿迭代法并解释清楚）</li>\n<li>退出条件设计</li>\n</ol>\n<h4 id="-%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95">* 解决办法<a class="anchor" href="#-%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95">§</a></h4>\n<h5 id="1-%E5%B7%B2%E7%9F%A5-sqrt2%E7%BA%A6%E7%AD%89%E4%BA%8E-1414%E9%82%A3%E4%B9%88%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%9C%A814-15%E5%8C%BA%E9%97%B4%E5%81%9A%E4%BA%8C%E5%88%86">1. 已知 sqrt(2)约等于 1.414，那么就可以在(1.4, 1.5)区间做二分<a class="anchor" href="#1-%E5%B7%B2%E7%9F%A5-sqrt2%E7%BA%A6%E7%AD%89%E4%BA%8E-1414%E9%82%A3%E4%B9%88%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%9C%A814-15%E5%8C%BA%E9%97%B4%E5%81%9A%E4%BA%8C%E5%88%86">§</a></h5>\n<p>查找，如：\na) high=&gt;1.5\nb) low=&gt;1.4\nc) mid =&gt; (high+low)/2=1.45\nd) 1.45*1.45&gt;2 ? high=&gt;1.45 : low =&gt; 1.45\ne) 循环到 c)</p>\n<h5 id="2-%E9%80%80%E5%87%BA%E6%9D%A1%E4%BB%B6">2. 退出条件<a class="anchor" href="#2-%E9%80%80%E5%87%BA%E6%9D%A1%E4%BB%B6">§</a></h5>\n<p>a) 前后两次的差值的绝对值&lt;=0.0000000001, 则可退出</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> double EPSILON <span class="token operator">=</span> <span class="token number">0.0000000001</span><span class="token comment">;</span>\n\ndouble <span class="token function">sqrt2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    double low <span class="token operator">=</span> <span class="token number">1.4</span><span class="token punctuation">,</span> high <span class="token operator">=</span> <span class="token number">1.5</span><span class="token comment">;</span>\n    double mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token comment">;</span>\n\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low <span class="token operator">></span> EPSILON<span class="token punctuation">)</span> {\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">*</span> mid <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> {\n            high <span class="token operator">=</span> mid<span class="token comment">;</span>\n        } <span class="token keyword">else</span> {\n            low <span class="token operator">=</span> mid<span class="token comment">;</span>\n        }\n        mid <span class="token operator">=</span> <span class="token punctuation">(</span>high <span class="token operator">+</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token comment">;</span>\n    }\n\n    return mid<span class="token comment">;</span>\n}\n</code></pre>\n<h2 id="q3%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91bst%E6%89%BE%E5%88%B0%E6%A0%91%E4%B8%AD%E7%AC%AC-k-%E5%B0%8F%E7%9A%84%E8%8A%82%E7%82%B9">Q3：给定一个二叉搜索树(BST)，找到树中第 K 小的节点。<a class="anchor" href="#q3%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91bst%E6%89%BE%E5%88%B0%E6%A0%91%E4%B8%AD%E7%AC%AC-k-%E5%B0%8F%E7%9A%84%E8%8A%82%E7%82%B9">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：文景／阿里云 CDN 资深技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<h5 id="-%E8%80%83%E5%AF%9F%E7%82%B9-1">* 考察点<a class="anchor" href="#-%E8%80%83%E5%AF%9F%E7%82%B9-1">§</a></h5>\n<ol>\n<li>基础数据结构的理解和编码能力</li>\n<li>递归使用</li>\n</ol>\n<h5 id="-%E7%A4%BA%E4%BE%8B">* 示例<a class="anchor" href="#-%E7%A4%BA%E4%BE%8B">§</a></h5>\n<pre class="language-autoit"><code class="language-autoit">       <span class="token number">5</span>\n      <span class="token operator">/</span> \\n     <span class="token number">3</span>   <span class="token number">6</span>\n    <span class="token operator">/</span> \\n   <span class="token number">2</span>   <span class="token number">4</span>\n  <span class="token operator">/</span>\n <span class="token number">1</span>\n \n</code></pre>\n<p>说明：保证输入的 K 满足 1&lt;=K&lt;=(节点数目）</p>\n<p>树相关的题目，第一眼就想到递归求解，左右子树分别遍历。联想到二叉搜索树的性质，root 大于左子树，小于右子树，如果左子树的节点数目等于 K-1，那么 root 就是结果，否则如果左子树节点数目小于 K-1，那么结果必然在右子树，否则就在左子树。因此在搜索的时候同时返回节点数目，跟 K 做对比，就能得出结果了。</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>\n <span class="token operator">*</span> Definition <span class="token keyword">for</span> a binary tree node<span class="token punctuation">.</span>\n <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span>\n\npublic class TreeNode {\n    int val<span class="token comment">;</span>\n    TreeNode left<span class="token comment">;</span>\n    TreeNode right<span class="token comment">;</span>\n    <span class="token function">TreeNode</span><span class="token punctuation">(</span>int x<span class="token punctuation">)</span> { val <span class="token operator">=</span> x<span class="token comment">; }</span>\n}\n\nclass Solution {\n    private class ResultType {\n    \n        boolean found<span class="token comment">;  // 是否找到</span>\n        \n        int val<span class="token comment">;  // 节点数目</span>\n        <span class="token function">ResultType</span><span class="token punctuation">(</span>boolean found<span class="token punctuation">,</span> int val<span class="token punctuation">)</span> {\n            this<span class="token punctuation">.</span>found <span class="token operator">=</span> found<span class="token comment">;</span>\n            this<span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token comment">;</span>\n        }\n    }\n\n    public int <span class="token function">kthSmallest</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> int k<span class="token punctuation">)</span> {\n        return <span class="token function">kthSmallestHelper</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token comment">;</span>\n    }\n\n    private ResultType <span class="token function">kthSmallestHelper</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> int k<span class="token punctuation">)</span> {\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> {\n            return new <span class="token function">ResultType</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        }\n\n        ResultType left <span class="token operator">=</span> <span class="token function">kthSmallestHelper</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token comment">;</span>\n\n        <span class="token operator">/</span><span class="token operator">/</span> 左子树找到，直接返回\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>found<span class="token punctuation">)</span> {\n            return new <span class="token function">ResultType</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> left<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token comment">;</span>\n        }\n\n        <span class="token operator">/</span><span class="token operator">/</span> 左子树的节点数目 <span class="token operator">=</span> K<span class="token operator">-</span><span class="token number">1</span>，结果为 root 的值\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> left<span class="token punctuation">.</span>val <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> {\n            return new <span class="token function">ResultType</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token comment">;</span>\n        }\n\n        <span class="token operator">/</span><span class="token operator">/</span> 右子树寻找\n        ResultType right <span class="token operator">=</span> <span class="token function">kthSmallestHelper</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> k <span class="token operator">-</span> left<span class="token punctuation">.</span>val <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span>found<span class="token punctuation">)</span> {\n            return new <span class="token function">ResultType</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token comment">;</span>\n        }\n\n        <span class="token operator">/</span><span class="token operator">/</span> 没找到，返回节点总数\n        return new <span class="token function">ResultType</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> left<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token comment">;</span>\n    }\n}\n\n</code></pre>\n<h2 id="q4lru-%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6">Q4：LRU 缓存机制<a class="anchor" href="#q4lru-%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6">§</a></h2>\n<p>设计和实现一个 LRU（最近最少使用）缓存数据结构，使它应该支持一下操作：get 和 put。\nget(key) - 如果 key 存在于缓存中，则获取 key 的 value（总是正数），否则返回 -1。\nput(key,value) - 如果 key 不存在，请设置或插入 value。当缓存达到其容量时，它应该在插入新项目之前使最近最少使用的项目作废。</p>\n<p><strong>出题人</strong>：文景／阿里云 CDN 资深技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<p>python版本的：</p>\n<pre class="language-autoit"><code class="language-autoit">class <span class="token function">LRUCache</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    def <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token string">""</span>"\n    <span class="token punctuation">:</span>type capacity<span class="token punctuation">:</span> int\n    <span class="token string">""</span>"\n    self<span class="token punctuation">.</span>cache <span class="token operator">=</span> {}\n    self<span class="token punctuation">.</span>keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    self<span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity\n    \n    def <span class="token function">visit_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> key <span class="token keyword">in</span> self<span class="token punctuation">.</span>keys<span class="token punctuation">:</span>\n            self<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n    \n    def <span class="token function">elim_key</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        key <span class="token operator">=</span> self<span class="token punctuation">.</span>keys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n        self<span class="token punctuation">.</span>keys <span class="token operator">=</span> self<span class="token punctuation">.</span>keys<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>\n        del self<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n        \n    def <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token string">""</span>"\n        <span class="token punctuation">:</span>type key<span class="token punctuation">:</span> int\n        <span class="token punctuation">:</span>rtype<span class="token punctuation">:</span> int\n        <span class="token string">""</span>"\n        <span class="token keyword">if</span> <span class="token operator">not</span> key <span class="token keyword">in</span> self<span class="token punctuation">.</span>cache<span class="token punctuation">:</span>\n            return <span class="token operator">-</span><span class="token number">1</span>\n        self<span class="token punctuation">.</span><span class="token function">visit_key</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n        return self<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n    \n    def <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token string">""</span>"\n        <span class="token punctuation">:</span>type key<span class="token punctuation">:</span> int\n        <span class="token punctuation">:</span>type value<span class="token punctuation">:</span> int\n        <span class="token punctuation">:</span>rtype<span class="token punctuation">:</span> void\n        <span class="token string">""</span>"\n        <span class="token keyword">if</span> <span class="token operator">not</span> key <span class="token keyword">in</span> self<span class="token punctuation">.</span>cache<span class="token punctuation">:</span>\n        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>capacity<span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span><span class="token function">elim_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value\n        self<span class="token punctuation">.</span><span class="token function">visit_key</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n\ndef <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    s <span class="token operator">=</span>\n    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"put"</span><span class="token punctuation">,</span><span class="token string">"put"</span><span class="token punctuation">,</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"put"</span><span class="token punctuation">,</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"put"</span><span class="token punctuation">,</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"get"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>\n    <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n    obj <span class="token operator">=</span> <span class="token function">LRUCache</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n    l<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">for</span> i<span class="token punctuation">,</span>c <span class="token keyword">in</span> <span class="token function">enumerate</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token function">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">"get"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            l<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">else</span><span class="token punctuation">:</span>\n            obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>\n    <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n</code></pre>\n<p>c++版本的：</p>\n<pre class="language-autoit"><code class="language-autoit">class LRUCache{\n    public<span class="token punctuation">:</span>\n        <span class="token function">LRUCache</span><span class="token punctuation">(</span>int capacity<span class="token punctuation">)</span> {\n            cap <span class="token operator">=</span> capacity<span class="token comment">;</span>\n        }\n        \n        int <span class="token function">get</span><span class="token punctuation">(</span>int key<span class="token punctuation">)</span> {\n            auto it <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> return <span class="token operator">-</span><span class="token number">1</span><span class="token comment">;</span>\n            l<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> it<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">)</span><span class="token comment">;</span>\n            return it<span class="token operator">-</span><span class="token operator">></span>second<span class="token operator">-</span><span class="token operator">></span>second<span class="token comment">;</span>\n        }\n        \n        void <span class="token function">set</span><span class="token punctuation">(</span>int key<span class="token punctuation">,</span> int value<span class="token punctuation">)</span> {\n            auto it <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>it !<span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> l<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">)</span><span class="token comment">;</span>\n            l<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;</span>\n            m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> cap<span class="token punctuation">)</span> {\n                int k <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>first<span class="token comment">;</span>\n                l<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n                m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token comment">;</span>\n            }\n        }\n}\n\n</code></pre>\n<h2 id="q5%E5%85%B3%E4%BA%8E-epoll-%E5%92%8C-select-%E7%9A%84%E5%8C%BA%E5%88%AB%E5%93%AA%E4%BA%9B%E8%AF%B4%E6%B3%95%E6%98%AF%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%A4%9A%E9%80%89">Q5：关于 epoll 和 select 的区别，哪些说法是正确的？（多选）<a class="anchor" href="#q5%E5%85%B3%E4%BA%8E-epoll-%E5%92%8C-select-%E7%9A%84%E5%8C%BA%E5%88%AB%E5%93%AA%E4%BA%9B%E8%AF%B4%E6%B3%95%E6%98%AF%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%A4%9A%E9%80%89">§</a></h2>\n<p>A. epoll 和 select 都是 I/O 多路复用的技术，都可以实现同时监听多个 I/O 事件的状态。</p>\n<p>B. epoll 相比 select 效率更高，主要是基于其操作系统支持的I/O事件通知机制，而 select 是基于轮询机制。</p>\n<p>C. epoll 支持水平触发和边沿触发两种模式。</p>\n<p>D. select 能并行支持 I/O 比较小，且无法修改。</p>\n<p><strong>出题人</strong>：阿里巴巴出题专家：寈峰／阿里技术专家</p>\n<p><strong>参考答案</strong>：A，B，C</p>\n<p><strong>【延伸】那在高并发的访问下，epoll使用那一种触发方式要高效些？当使用边缘触发的时候要注意些什么东西？</strong></p>\n<h2 id="q6%E4%BB%8E-innodb-%E7%9A%84%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90%E4%B8%BA%E4%BB%80%E4%B9%88%E7%B4%A2%E5%BC%95%E7%9A%84-key-%E9%95%BF%E5%BA%A6%E4%B8%8D%E8%83%BD%E5%A4%AA%E9%95%BF">Q6：从 innodb 的索引结构分析，为什么索引的 key 长度不能太长？<a class="anchor" href="#q6%E4%BB%8E-innodb-%E7%9A%84%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90%E4%B8%BA%E4%BB%80%E4%B9%88%E7%B4%A2%E5%BC%95%E7%9A%84-key-%E9%95%BF%E5%BA%A6%E4%B8%8D%E8%83%BD%E5%A4%AA%E9%95%BF">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：近秋／阿里云数据库产品技术部技术专家</p>\n<p><strong>参考答案</strong>：key 太长会导致一个页当中能够存放的 key 的数目变少，间接导致索引树的页数目变多，索引层次增加，从而影响整体查询变更的效率。</p>\n<h2 id="q7mysql-%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D%E5%88%B0%E4%BB%BB%E6%84%8F%E6%97%B6%E9%97%B4%E7%82%B9">Q7：MySQL 的数据如何恢复到任意时间点？<a class="anchor" href="#q7mysql-%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D%E5%88%B0%E4%BB%BB%E6%84%8F%E6%97%B6%E9%97%B4%E7%82%B9">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：近秋／阿里云数据库产品技术部技术专家参考答案</p>\n<p><strong>参考答案</strong>：恢复到任意时间点以定时的做全量备份，以及备份增量的 binlog 日志为前提。恢复到任意时间点首先将全量备份恢复之后，再此基础上回放增加的 binlog 直至指定的时间点。</p>\n<h2 id="q8nfs-%E5%92%8C-smb-%E6%98%AF%E6%9C%80%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%A4%E7%A7%8D-nasnetwork-attached-storage%E5%8D%8F%E8%AE%AE%E5%BD%93%E6%8A%8A%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%90%8C%E6%97%B6%E9%80%9A%E8%BF%87-nfs-%E5%92%8C-smb-%E5%8D%8F%E8%AE%AE%E5%85%B1%E4%BA%AB%E7%BB%99%E5%A4%9A%E4%B8%AA%E4%B8%BB%E6%9C%BA%E8%AE%BF%E9%97%AE%E6%97%B6%E4%BB%A5%E4%B8%8B%E5%93%AA%E4%BA%9B%E8%AF%B4%E6%B3%95%E6%98%AF%E9%94%99%E8%AF%AF%E7%9A%84%E5%A4%9A%E9%80%89">Q8：NFS 和 SMB 是最常见的两种 NAS（Network Attached Storage）协议，当把一个文件系统同时通过 NFS 和 SMB 协议共享给多个主机访问时，以下哪些说法是错误的：（多选）<a class="anchor" href="#q8nfs-%E5%92%8C-smb-%E6%98%AF%E6%9C%80%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%A4%E7%A7%8D-nasnetwork-attached-storage%E5%8D%8F%E8%AE%AE%E5%BD%93%E6%8A%8A%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%90%8C%E6%97%B6%E9%80%9A%E8%BF%87-nfs-%E5%92%8C-smb-%E5%8D%8F%E8%AE%AE%E5%85%B1%E4%BA%AB%E7%BB%99%E5%A4%9A%E4%B8%AA%E4%B8%BB%E6%9C%BA%E8%AE%BF%E9%97%AE%E6%97%B6%E4%BB%A5%E4%B8%8B%E5%93%AA%E4%BA%9B%E8%AF%B4%E6%B3%95%E6%98%AF%E9%94%99%E8%AF%AF%E7%9A%84%E5%A4%9A%E9%80%89">§</a></h2>\n<p>A. 不可能有这样的操作，即把一个文件系统同时通过 NFS 和 SMB协议共享给多个主机访问。</p>\n<p>B. 主机 a 的用户通过NFS 协议创建的文件或者目录，另一个主机 b的用户不能通过 SMB 协议将其删除。</p>\n<p>C. 在同一个目录下，主机 a 通过 NFS 协议看到文件 file.txt，主机b 通过 SMB 协议也看到文件 file.txt，那么它们是同一个文件。</p>\n<p>D. 主机 a 通过 NFS 协议，以及主机 b 通过 SMB 协议，都可以通过主机端的数据缓存，提升文件访问性能。</p>\n<p><strong>出题人</strong>：阿里巴巴出题专家：起影／阿里云文件存储高级技术专家</p>\n<p><strong>参考答案</strong>：A，B，C</p>\n<h2 id="q9%E8%BE%93%E5%85%A5-ping-ip-%E5%90%8E%E6%95%B2%E5%9B%9E%E8%BD%A6%E5%8F%91%E5%8C%85%E5%89%8D%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88">Q9：输入 ping IP 后敲回车，发包前会发生什么？<a class="anchor" href="#q9%E8%BE%93%E5%85%A5-ping-ip-%E5%90%8E%E6%95%B2%E5%9B%9E%E8%BD%A6%E5%8F%91%E5%8C%85%E5%89%8D%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：怀虎／阿里云云效平台负责人</p>\n<p><strong>参考答案</strong>：\n首先根据目的IP和路由表决定走哪个网卡，再根据网卡的子网掩码地址判断目的IP是否在子网内。如果不在则会通过arp缓存查询IP的网卡地址，不存在的话会通过广播询问目的IP的mac地址，得到后就开始发包了，同时mac地址也会被arp缓存起来。</p>\n<h2 id="q10%E8%AF%B7%E8%A7%A3%E9%87%8A%E4%B8%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E9%B9%BF%E6%99%97%E5%8F%91%E5%B8%83%E6%81%8B%E6%83%85%E7%9A%84%E6%97%B6%E5%80%99%E5%BE%AE%E5%8D%9A%E7%B3%BB%E7%BB%9F%E4%BC%9A%E5%B4%A9%E6%BA%83%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3">Q10：请解释下为什么鹿晗发布恋情的时候，微博系统会崩溃，如何解决？<a class="anchor" href="#q10%E8%AF%B7%E8%A7%A3%E9%87%8A%E4%B8%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E9%B9%BF%E6%99%97%E5%8F%91%E5%B8%83%E6%81%8B%E6%83%85%E7%9A%84%E6%97%B6%E5%80%99%E5%BE%AE%E5%8D%9A%E7%B3%BB%E7%BB%9F%E4%BC%9A%E5%B4%A9%E6%BA%83%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：江岚／阿里巴巴数据技术高级技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<p>A. 获取微博通过 pull 方式还是 push 方式</p>\n<p>B. 发布微博的频率要远小于阅读微博</p>\n<p>C. 流量明星的发微博，和普通博主要区分对待，比如在 sharding的时候，也要考虑这个因素</p>\n<h2 id="q11%E7%8E%B0%E6%9C%89%E4%B8%80%E6%89%B9%E9%82%AE%E4%BB%B6%E9%9C%80%E8%A6%81%E5%8F%91%E9%80%81%E7%BB%99%E8%AE%A2%E9%98%85%E9%A1%BE%E5%AE%A2%E4%B8%94%E6%9C%89%E4%B8%80%E4%B8%AA%E9%9B%86%E7%BE%A4%E9%9B%86%E7%BE%A4%E7%9A%84%E8%8A%82%E7%82%B9%E6%95%B0%E4%B8%8D%E5%AE%9A%E4%BC%9A%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9%E7%BC%A9%E5%AE%B9%E6%9D%A5%E8%B4%9F%E8%B4%A3%E5%85%B7%E4%BD%93%E7%9A%84%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E4%BB%BB%E5%8A%A1%E5%A6%82%E4%BD%95%E8%AE%A9%E7%B3%BB%E7%BB%9F%E5%B0%BD%E5%BF%AB%E5%9C%B0%E5%AE%8C%E6%88%90%E5%8F%91%E9%80%81%E8%AF%B7%E8%AF%A6%E8%BF%B0%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88">Q11：现有一批邮件需要发送给订阅顾客，且有一个集群（集群的节点数不定，会动态扩容缩容）来负责具体的邮件发送任务，如何让系统尽快地完成发送？请详述技术方案！<a class="anchor" href="#q11%E7%8E%B0%E6%9C%89%E4%B8%80%E6%89%B9%E9%82%AE%E4%BB%B6%E9%9C%80%E8%A6%81%E5%8F%91%E9%80%81%E7%BB%99%E8%AE%A2%E9%98%85%E9%A1%BE%E5%AE%A2%E4%B8%94%E6%9C%89%E4%B8%80%E4%B8%AA%E9%9B%86%E7%BE%A4%E9%9B%86%E7%BE%A4%E7%9A%84%E8%8A%82%E7%82%B9%E6%95%B0%E4%B8%8D%E5%AE%9A%E4%BC%9A%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9%E7%BC%A9%E5%AE%B9%E6%9D%A5%E8%B4%9F%E8%B4%A3%E5%85%B7%E4%BD%93%E7%9A%84%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E4%BB%BB%E5%8A%A1%E5%A6%82%E4%BD%95%E8%AE%A9%E7%B3%BB%E7%BB%9F%E5%B0%BD%E5%BF%AB%E5%9C%B0%E5%AE%8C%E6%88%90%E5%8F%91%E9%80%81%E8%AF%B7%E8%AF%A6%E8%BF%B0%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：江岚／阿里巴巴数据技术高级技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<p>A. 借助消息中间件，通过发布者订阅者模式来进行任务分配</p>\n<p>B. master-slave 部署，由 master 来分配任务</p>\n<p>C. 不借助任何中间件，且所有节点均等。通过数据库的 update-returning，从而实现节点之间任务的互斥</p>\n<h2 id="q12%E6%9C%89%E4%B8%80%E6%89%B9%E6%B0%94%E8%B1%A1%E8%A7%82%E6%B5%8B%E7%AB%99%E7%8E%B0%E9%9C%80%E8%A6%81%E8%8E%B7%E5%8F%96%E8%BF%99%E4%BA%9B%E7%AB%99%E7%82%B9%E7%9A%84%E8%A7%82%E6%B5%8B%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%AD%98%E5%82%A8%E5%88%B0-hive-%E4%B8%AD%E4%BD%86%E6%98%AF%E6%B0%94%E8%B1%A1%E5%B1%80%E5%8F%AA%E6%8F%90%E4%BE%9B%E4%BA%86-api-%E6%9F%A5%E8%AF%A2%E6%AF%8F%E6%AC%A1%E5%8F%AA%E8%83%BD%E6%9F%A5%E8%AF%A2%E5%8D%95%E4%B8%AA%E8%A7%82%E6%B5%8B%E7%82%B9%E9%82%A3%E4%B9%88%E5%A6%82%E6%9E%9C%E8%83%BD%E5%A4%9F%E6%96%B9%E4%BE%BF%E5%BF%AB%E9%80%9F%E5%9C%B0%E8%8E%B7%E5%8F%96%E5%88%B0%E6%89%80%E6%9C%89%E7%9A%84%E8%A7%82%E6%B5%8B%E7%82%B9%E7%9A%84%E6%95%B0%E6%8D%AE">Q12：有一批气象观测站，现需要获取这些站点的观测数据，并存储到 Hive 中。但是气象局只提供了 api 查询，每次只能查询单个观测点。那么如果能够方便快速地获取到所有的观测点的数据？<a class="anchor" href="#q12%E6%9C%89%E4%B8%80%E6%89%B9%E6%B0%94%E8%B1%A1%E8%A7%82%E6%B5%8B%E7%AB%99%E7%8E%B0%E9%9C%80%E8%A6%81%E8%8E%B7%E5%8F%96%E8%BF%99%E4%BA%9B%E7%AB%99%E7%82%B9%E7%9A%84%E8%A7%82%E6%B5%8B%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%AD%98%E5%82%A8%E5%88%B0-hive-%E4%B8%AD%E4%BD%86%E6%98%AF%E6%B0%94%E8%B1%A1%E5%B1%80%E5%8F%AA%E6%8F%90%E4%BE%9B%E4%BA%86-api-%E6%9F%A5%E8%AF%A2%E6%AF%8F%E6%AC%A1%E5%8F%AA%E8%83%BD%E6%9F%A5%E8%AF%A2%E5%8D%95%E4%B8%AA%E8%A7%82%E6%B5%8B%E7%82%B9%E9%82%A3%E4%B9%88%E5%A6%82%E6%9E%9C%E8%83%BD%E5%A4%9F%E6%96%B9%E4%BE%BF%E5%BF%AB%E9%80%9F%E5%9C%B0%E8%8E%B7%E5%8F%96%E5%88%B0%E6%89%80%E6%9C%89%E7%9A%84%E8%A7%82%E6%B5%8B%E7%82%B9%E7%9A%84%E6%95%B0%E6%8D%AE">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：江岚／阿里巴巴数据技术高级技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<p>A. 通过 shell 或 python 等调用 api，结果先暂存本地，最后将本地文件上传到 Hive 中。</p>\n<p>B. 通过 datax 的 httpReader 和 hdfsWriter 插件，从而获取所需的数据。</p>\n<p>C. 比较理想的回答，是在计算引擎的 UDF 中调用查询 api，执行UDF 的查询结果存储到对应的表中。一方面，不需要同步任务的导出导入；另一方面，计算引擎的分布式框架天生提供了分布式、容错、并发等特性。</p>\n<h2 id="q13%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%A4%E9%87%91%E9%A2%9D%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%8A%A0%E6%9C%80%E5%A4%9A%E5%B0%8F%E6%95%B0%E7%82%B9%E4%B8%A4%E4%BD%8D">Q13：如何实现两金额数据相加（最多小数点两位）？<a class="anchor" href="#q13%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%A4%E9%87%91%E9%A2%9D%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%8A%A0%E6%9C%80%E5%A4%9A%E5%B0%8F%E6%95%B0%E7%82%B9%E4%B8%A4%E4%BD%8D">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：御术／蚂蚁金服数据可视化高级技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<p>其实问题并不难，就是考察候选人对 JavaScript 数据运算上的认知以及考虑问题的缜密程度，有很多坑，可以用在笔试题，如果用在面试，回答过程中还可以随机加入有很多计算机基础的延伸。</p>\n<p>回到这个问题，由于直接浮点相与加会失精，所以要转整数；（可以插入问遇到过吗？是否可以举个例子？）。</p>\n<p>转整数是第一个坑，虽然只有两位可以通过乘以100转整数，但由于乘以一百和除以一百都会出现浮点数的运算，所以也会失精，还是要通过字符串来转；（可以插入问字符串转整数有几种方式？）字符串转整是第二个坑，因为最后要对齐计算，如果没考虑周全先toFixed(2)，对于只有一位小数点数据进入计算就会错误；转整数后的计算是个加分点，很多同学往往就是直接算了，如果可以考虑大数计算的场景，恭喜同学进入隐藏关卡，这就会涉及如何有效循环、遍历、算法复杂度的问题。</p>\n<h2 id="q14-%E5%85%B3%E4%BA%8E%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E5%BC%80%E6%94%BE%E9%97%AE%E9%A2%98">Q14： 关于并行计算的一些基础开放问题。<a class="anchor" href="#q14-%E5%85%B3%E4%BA%8E%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E5%BC%80%E6%94%BE%E9%97%AE%E9%A2%98">§</a></h2>\n<p>◼ 如何定义并计算，请分别阐述分布式内存到共享内存模式行编程的区别和实现（例子代码）？</p>\n<p>◼ 请使用 MPI 和 OpenMP 分别实现 N 个处理器对 M 个变量的求和？</p>\n<p>◼ 请说明 SIMD 指令在循环中使用的权限？向量化优化有哪些手段？</p>\n<p>◼ 请用 Amdahl 定律说明什么是并行效率以及并行算法的扩展性？并说明扩展性的性能指标和限制因素，最后请说明在共享内存计算机中，共享内存的限制？OpenMP 是怎样实现共享内存编程环境的？MPI 阻塞和非阻塞读写的区别？</p>\n<p><strong>出题人</strong>：阿里巴巴出题专家：何万青／阿里云高性能计算资深技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<p>（简要答案，但必须触及，可以展开）\n◼ 同时执行多个/算法/逻辑操作/内存访问/IO，相互独立同时运行，分三个层次：进程级，多个节点分布式内存通过MPI通信并行；线程级，共享内存的多路机器，通过OpenMP实现多线程并行；指令集：通过SIM指令实现单指令多数据。。。。举例吧啦吧啦。</p>\n<p>◼ MPI代码，，，OpenMP代码，分别写出来 M个元素，N个处理器的累加，后者注意private 参数。</p>\n<p>◼ SIMD在循环中的应用，限制在于 SIMD指令处理的每一个数组的长度，cache line利用，内部循环间的依赖和条件调用等。</p>\n<p>◼ 向量化，主要看SSE和AVX指令占比率，通过编译器优化...... 在loop代码中使用。</p>\n<p>◼ 性能和计算规模随处理器增加的变化曲线，实测HPL和峰值HPL比率，能用用Amdahl定律表达Tpar(N) = (an + (1-a)n/N )t + C (n,N), 能够讲明白串行部分对整个并行的天花板效应，扩展性能够解释清楚算法的扩展性=并行效率随处理器数目的变化关系，画出来。</p>\n<p>◼ 共享内存计算机OpenMP对变量的限制描述，EREW，CREW，ERCW，CRCW等区别，NUMA概念，如何保持coherent等。</p>\n<p>◼ 写出OpenMP和MPI的核心函数，回答问题即可。</p>\n<h2 id="q15%E8%AF%B7%E8%AE%A1%E7%AE%97xilinx%E5%85%AC%E5%8F%B8vu9p%E8%8A%AF%E7%89%87%E7%9A%84%E7%AE%97%E5%8A%9B%E7%9B%B8%E5%BD%93%E4%BA%8E%E5%A4%9A%E5%B0%91tops%E7%BB%99%E5%87%BA%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%85%AC%E5%BC%8F">Q15：请计算XILINX公司VU9P芯片的算力相当于多少TOPS，给出计算过程与公式。<a class="anchor" href="#q15%E8%AF%B7%E8%AE%A1%E7%AE%97xilinx%E5%85%AC%E5%8F%B8vu9p%E8%8A%AF%E7%89%87%E7%9A%84%E7%AE%97%E5%8A%9B%E7%9B%B8%E5%BD%93%E4%BA%8E%E5%A4%9A%E5%B0%91tops%E7%BB%99%E5%87%BA%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%85%AC%E5%BC%8F">§</a></h2>\n<p><strong>出题人</strong>： 阿里巴巴出题专家：隐达／阿里云异构计算资深专家</p>\n<p><strong>参考答案</strong>：基于不同的算法，这个值在十几到几百之间。但是，如果只是单纯比算力，FPGA和ASIC、GPU相比并无太大优势，甚至大多时候有较大劣势。FPGA的优势在于高度的灵活性和算法的针对性。</p>\n<h2 id="q16%E4%B8%80%E9%A2%97%E7%8E%B0%E4%BB%A3%E5%A4%84%E7%90%86%E5%99%A8%E6%AF%8F%E7%A7%92%E5%A4%A7%E6%A6%82%E5%8F%AF%E4%BB%A5%E6%89%A7%E8%A1%8C%E5%A4%9A%E5%B0%91%E6%9D%A1%E7%AE%80%E5%8D%95%E7%9A%84mov%E6%8C%87%E4%BB%A4%E6%9C%89%E5%93%AA%E4%BA%9B%E4%B8%BB%E8%A6%81%E7%9A%84%E5%BD%B1%E5%93%8D%E5%9B%A0%E7%B4%A0">Q16：一颗现代处理器，每秒大概可以执行多少条简单的MOV指令，有哪些主要的影响因素？<a class="anchor" href="#q16%E4%B8%80%E9%A2%97%E7%8E%B0%E4%BB%A3%E5%A4%84%E7%90%86%E5%99%A8%E6%AF%8F%E7%A7%92%E5%A4%A7%E6%A6%82%E5%8F%AF%E4%BB%A5%E6%89%A7%E8%A1%8C%E5%A4%9A%E5%B0%91%E6%9D%A1%E7%AE%80%E5%8D%95%E7%9A%84mov%E6%8C%87%E4%BB%A4%E6%9C%89%E5%93%AA%E4%BA%9B%E4%B8%BB%E8%A6%81%E7%9A%84%E5%BD%B1%E5%93%8D%E5%9B%A0%E7%B4%A0">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：子团／创新产品虚拟化&amp;稳定性资深技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<ul>\n<li>\n<p><strong>及格：</strong>\n每执行一条mov指令需要消耗1个时钟周期，所以每秒执行的mov指令和CPU主频相关。</p>\n</li>\n<li>\n<p><strong>加分：</strong>\n在CPU微架构上，要考虑数据预取，乱序执行，多发射，内存stall(前端stall和后端stall)等诸多因素，因此除了cpu主频外，还和流水线上的效率(IPC)强相关，比较复杂的一个问题。</p>\n</li>\n</ul>\n<h2 id="q17%E8%AF%B7%E5%88%86%E6%9E%90-maxcompute-%E4%BA%A7%E5%93%81%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E7%9A%84%E5%85%B3%E7%B3%BB%E5%BD%93%E5%89%8D%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%AE%A1%E7%AE%97%E5%B9%B3%E5%8F%B0%E7%B1%BB%E4%BA%A7%E5%93%81%E7%9A%84%E5%B8%82%E5%9C%BA%E7%8E%B0%E7%8A%B6%E5%92%8C%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF">Q17：请分析 MaxCompute 产品与分布式技术的关系、当前大数据计算平台类产品的市场现状和发展趋势。<a class="anchor" href="#q17%E8%AF%B7%E5%88%86%E6%9E%90-maxcompute-%E4%BA%A7%E5%93%81%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E7%9A%84%E5%85%B3%E7%B3%BB%E5%BD%93%E5%89%8D%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%AE%A1%E7%AE%97%E5%B9%B3%E5%8F%B0%E7%B1%BB%E4%BA%A7%E5%93%81%E7%9A%84%E5%B8%82%E5%9C%BA%E7%8E%B0%E7%8A%B6%E5%92%8C%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：云郎／阿里 MaxCompute 高级产品专家</p>\n<p><strong>参考答案</strong>：</p>\n<p>开放性问题，无标准答案。</p>\n<h2 id="q18-%E5%AF%B9%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E4%B8%AD%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E6%98%AF%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E7%AE%A1%E7%90%86%E4%BD%93%E7%B3%BB%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BC%9A%E5%AF%B9%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BA%94%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E5%BD%B1%E5%93%8D">Q18： 对大数据平台中的元数据管理是怎么理解的，元数据收集管理体系是怎么样的，会对大数据应用有什么样的影响。<a class="anchor" href="#q18-%E5%AF%B9%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E4%B8%AD%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E6%98%AF%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E7%AE%A1%E7%90%86%E4%BD%93%E7%B3%BB%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BC%9A%E5%AF%B9%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BA%94%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E5%BD%B1%E5%93%8D">§</a></h2>\n<p><strong>出题人</strong>： 阿里巴巴出题专家：映泉／阿里巴巴高级技术专家</p>\n<p><strong>参考答案</strong>：开放性问题，无标准答案。</p>\n<h2 id="q19-%E4%BD%A0%E7%90%86%E8%A7%A3%E5%B8%B8%E8%A7%81%E5%A6%82%E9%98%BF%E9%87%8C%E5%92%8C%E5%8F%8B%E5%95%86%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB%E5%B7%AE%E5%BC%82%E4%BB%A5%E5%8F%8A%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF%E5%92%8C%E6%8A%80%E6%9C%AF%E7%93%B6%E9%A2%88%E5%9C%A8%E5%AD%98%E5%82%A8%E5%92%8C%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E6%96%B9%E9%9D%A2%E8%BF%9B%E8%A1%8C%E6%A6%82%E8%BF%B0">Q19： 你理解常见如阿里，和友商大数据平台的技术体系差异以及发展趋势和技术瓶颈，在存储和计算两个方面进行概述。<a class="anchor" href="#q19-%E4%BD%A0%E7%90%86%E8%A7%A3%E5%B8%B8%E8%A7%81%E5%A6%82%E9%98%BF%E9%87%8C%E5%92%8C%E5%8F%8B%E5%95%86%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB%E5%B7%AE%E5%BC%82%E4%BB%A5%E5%8F%8A%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF%E5%92%8C%E6%8A%80%E6%9C%AF%E7%93%B6%E9%A2%88%E5%9C%A8%E5%AD%98%E5%82%A8%E5%92%8C%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E6%96%B9%E9%9D%A2%E8%BF%9B%E8%A1%8C%E6%A6%82%E8%BF%B0">§</a></h2>\n<p><strong>出题人</strong>： 阿里巴巴出题专家：映泉／阿里巴巴高级技术专家</p>\n<p><strong>参考答案</strong>：开放性问题，无标准答案。</p>\n<h2 id="q20%E5%9C%A8%E4%BA%91%E8%AE%A1%E7%AE%97%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%9C%BA%E6%99%AF%E4%B8%AD%E6%AF%8F%E5%A4%A9%E8%BF%90%E8%A1%8C%E7%9D%80%E6%88%90%E5%8D%83%E4%B8%8A%E4%B8%87%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%AF%8F%E4%B8%AA%E4%BB%BB%E5%8A%A1%E9%83%BD%E8%A6%81%E8%BF%9B%E8%A1%8C-io-%E8%AF%BB%E5%86%99%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E4%B8%BA%E4%BA%86%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%BB%8F%E5%B8%B8%E4%BC%9A%E4%BF%9D%E8%AF%81%E9%AB%98%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E4%BB%BB%E5%8A%A1%E4%BC%98%E5%85%88%E6%89%A7%E8%A1%8C%E5%BD%93%E5%A4%9A%E4%B8%AA%E4%BD%9C%E4%B8%9A%E6%88%96%E7%94%A8%E6%88%B7%E8%AE%BF%E9%97%AE%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E6%97%B6%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E4%BC%98%E5%85%88%E7%BA%A7%E5%92%8C%E5%85%AC%E5%B9%B3%E6%80%A7">Q20：在云计算大数据处理场景中，每天运行着成千上万的任务，每个任务都要进行 IO 读写。存储系统为了更好的服务，经常会保证高优先级的任务优先执行。当多个作业或用户访问存储系统时，如何保证优先级和公平性。<a class="anchor" href="#q20%E5%9C%A8%E4%BA%91%E8%AE%A1%E7%AE%97%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%9C%BA%E6%99%AF%E4%B8%AD%E6%AF%8F%E5%A4%A9%E8%BF%90%E8%A1%8C%E7%9D%80%E6%88%90%E5%8D%83%E4%B8%8A%E4%B8%87%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%AF%8F%E4%B8%AA%E4%BB%BB%E5%8A%A1%E9%83%BD%E8%A6%81%E8%BF%9B%E8%A1%8C-io-%E8%AF%BB%E5%86%99%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E4%B8%BA%E4%BA%86%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%BB%8F%E5%B8%B8%E4%BC%9A%E4%BF%9D%E8%AF%81%E9%AB%98%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E4%BB%BB%E5%8A%A1%E4%BC%98%E5%85%88%E6%89%A7%E8%A1%8C%E5%BD%93%E5%A4%9A%E4%B8%AA%E4%BD%9C%E4%B8%9A%E6%88%96%E7%94%A8%E6%88%B7%E8%AE%BF%E9%97%AE%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E6%97%B6%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E4%BC%98%E5%85%88%E7%BA%A7%E5%92%8C%E5%85%AC%E5%B9%B3%E6%80%A7">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：田磊磊／阿里云文件存储高级技术专家</p>\n<p><strong>参考答案</strong>：开放性问题，无标准答案。</p>\n<h2 id="q21%E6%9C%80%E5%A4%A7%E9%A2%91%E7%8E%87%E6%A0%88">Q21：最大频率栈。<a class="anchor" href="#q21%E6%9C%80%E5%A4%A7%E9%A2%91%E7%8E%87%E6%A0%88">§</a></h2>\n<p>实现 FreqStack，模拟类似栈的数据结构的操作的一个类。FreqStack 有两个函数：push(int x)，将整数 x 推入栈中。pop()，它移除并返回栈中出现最频繁的元素。如果最频繁的元素不只一个，则移除并返回最接近栈顶的元素。\n◼ 示例：\npush [5,7,5,7,4,5]\npop() -&gt; 返回 5，因为 5 是出现频率最高的。栈变成\n[5,7,5,7,4]。\npop() -&gt; 返回 7，因为 5 和 7 都是频率最高的，但 7 最接近栈\n顶。栈变成 [5,7,5,4]。\npop() -&gt; 返回 5 。栈变成 [5,7,4]。\npop() -&gt; 返回 4 。栈变成 [5,7]。</p>\n<p><strong>出题人</strong>：阿里巴巴出题专家：屹平／阿里云视频云边缘计算高级技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<p>令 freq 作为 x 的出现次数的映射 Map。</p>\n<p>此外 maxfreq，即栈中任意元素的当前最大频率，因为我们必须弹出频率最高的元素。</p>\n<p>当前主要的问题就变成了：在具有相同的（最大）频率的元素中，怎么判断那个元素是最新的？我们可以使用栈来查询这一信息：靠近栈顶的元素总是相对更新一些。</p>\n<p>为此，我们令 group 作为从频率到具有该频率的元素的映射。到目前，我们已经实现了 FreqStack 的所有必要的组件。</p>\n<p>算法：</p>\n<p>实际上，作为实现层面上的一点细节，如果 x 的频率为 f，那么我们将获取在所有 group[i] (i &lt;= f) 中的 x,而不仅仅是栈顶的那个。这是因为每个 group[i] 都会存储与第 i 个 x 副本相关的信息。</p>\n<p>最后，我们仅仅需要如上所述维持 freq，group，以及 maxfreq。</p>\n<p><strong>参考代码</strong>：</p>\n<pre class="language-autoit"><code class="language-autoit">class FreqStack {\n    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> freq<span class="token comment">;</span>\n    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token operator">></span> group<span class="token comment">;</span>\n    int maxfreq<span class="token comment">;</span>\n\n    public <span class="token function">FreqStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n        freq <span class="token operator">=</span> new <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        group <span class="token operator">=</span> new <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        maxfreq <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">;</span>\n    }\n    \n    public void <span class="token function">push</span><span class="token punctuation">(</span>int x<span class="token punctuation">)</span> {\n        int f <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token comment">;</span>\n        freq<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token comment">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">></span> maxfreq<span class="token punctuation">)</span> maxfreq <span class="token operator">=</span> f<span class="token comment">;</span>\n        group<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> z<span class="token operator">-</span><span class="token operator">></span> new <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">;</span>\n    }\n    \n    public int <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n        int x <span class="token operator">=</span> group<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>maxfreq<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        freq<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> freq<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>group<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>maxfreq<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        maxfreq<span class="token operator">-</span><span class="token operator">-</span><span class="token comment">;</span>\n        return x<span class="token comment">;</span>\n    }\n}\n</code></pre>\n<h2 id="q22%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-n-%E4%B8%AA%E8%8A%82%E7%82%B9%E5%B9%B6%E4%B8%94%E8%BF%94%E5%9B%9E%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E7%BB%93%E7%82%B9">Q22：给定一个链表，删除链表的倒数第 N 个节点，并且返回链表的头结点。<a class="anchor" href="#q22%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-n-%E4%B8%AA%E8%8A%82%E7%82%B9%E5%B9%B6%E4%B8%94%E8%BF%94%E5%9B%9E%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E7%BB%93%E7%82%B9">§</a></h2>\n<p>◼ 示例：\n给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.\n当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.\n说明：\n给定的 n 保证是有效的。\n要求：\n只允许对链表进行一次遍历。</p>\n<p><strong>出题人</strong>：阿里巴巴出题专家：屹平／阿里云视频云边缘计算高级技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<p>我们可以使用两个指针而不是一个指针。第一个指针从列表的开头向前移动 n+1 步，而第二个指针将从列表的开头出发。现在，这两个指针被 n 个结点分开。我们通过同时移动两个指针向前来保持这个恒定的间隔，直到第一个指针到达最后一个结点。此时第二个指针将指向从最后一个结点数起的第 n 个结点。我们重新链接第二个指针所引用的结点的 next 指针指向该结点的下下个结点。</p>\n<p><strong>参考代码</strong>：</p>\n<pre class="language-autoit"><code class="language-autoit">public ListNode <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> int n<span class="token punctuation">)</span>\n{\n    ListNode dummy <span class="token operator">=</span> new <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">;</span>\n    dummy<span class="token punctuation">.</span><span class="token keyword">next</span> <span class="token operator">=</span> head<span class="token comment">;</span>\n    ListNode first <span class="token operator">=</span> dummy<span class="token comment">;</span>\n    ListNode second <span class="token operator">=</span> dummy<span class="token comment">;</span>\n    <span class="token operator">/</span><span class="token operator">/</span> Advances first pointer so that the gap between first\n    <span class="token operator">and</span> second is n nodes apart\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">; i &lt;= n + 1; i++) {</span>\n        first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token keyword">next</span><span class="token comment">;</span>\n    }\n    <span class="token operator">/</span><span class="token operator">/</span> Move first <span class="token keyword">to</span> the end<span class="token punctuation">,</span> maintaining the gap\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>first !<span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> {\n        first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token keyword">next</span><span class="token comment">;</span>\n        second <span class="token operator">=</span> second<span class="token punctuation">.</span><span class="token keyword">next</span><span class="token comment">;</span>\n    }\n    second<span class="token punctuation">.</span><span class="token keyword">next</span> <span class="token operator">=</span> second<span class="token punctuation">.</span><span class="token keyword">next</span><span class="token punctuation">.</span><span class="token keyword">next</span><span class="token comment">;</span>\n    return dummy<span class="token punctuation">.</span><span class="token keyword">next</span><span class="token comment">;</span>\n}\n</code></pre>\n<p><strong>复杂度分析：</strong></p>\n<ul>\n<li>\n<p>时间复杂度：O(L)，该算法对含有 L 个结点的列表进行了一次遍历。因此时间复杂度为 O(L)。</p>\n</li>\n<li>\n<p>空间复杂度：O(1)，我们只用了常量级的额外空间。</p>\n</li>\n</ul>\n<h2 id="q23%E5%A6%82%E6%9E%9C%E8%AE%A9%E4%BD%A0%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E9%80%9A%E7%94%A8%E7%9A%84%E6%94%AF%E6%8C%81%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A7%92%E7%BA%A7%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D%E7%9A%84%E7%B3%BB%E7%BB%9F%E4%BD%A0%E4%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1">Q23：如果让你设计一个通用的、支持各种数据库秒级备份和恢复的系统，你会如何设计？<a class="anchor" href="#q23%E5%A6%82%E6%9E%9C%E8%AE%A9%E4%BD%A0%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E9%80%9A%E7%94%A8%E7%9A%84%E6%94%AF%E6%8C%81%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A7%92%E7%BA%A7%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D%E7%9A%84%E7%B3%BB%E7%BB%9F%E4%BD%A0%E4%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：千震／阿里云数据库高级技术专家</p>\n<p><strong>参考答案</strong>：开放性问题，无标准答案。</p>\n<h2 id="q24%E5%A6%82%E6%9E%9C%E8%AE%A9%E4%BD%A0%E6%9D%A5%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E6%95%B0%E6%8D%AE%E5%BA%93nosql-%E5%92%8C%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8B%E9%97%B4%E6%95%B0%E6%8D%AE%E5%AE%9E%E6%97%B6%E6%B5%81%E5%8A%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B5%81%E5%8F%8A%E5%A4%84%E7%90%86%E7%9A%84%E7%B3%BB%E7%BB%9F%E4%BD%A0%E4%BC%9A%E8%80%83%E8%99%91%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1">Q24：如果让你来设计一个支持数据库、NOSQL 和大数据之间数据实时流动的数据流及处理的系统，你会考虑哪些问题？如何设计？<a class="anchor" href="#q24%E5%A6%82%E6%9E%9C%E8%AE%A9%E4%BD%A0%E6%9D%A5%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E6%95%B0%E6%8D%AE%E5%BA%93nosql-%E5%92%8C%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8B%E9%97%B4%E6%95%B0%E6%8D%AE%E5%AE%9E%E6%97%B6%E6%B5%81%E5%8A%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B5%81%E5%8F%8A%E5%A4%84%E7%90%86%E7%9A%84%E7%B3%BB%E7%BB%9F%E4%BD%A0%E4%BC%9A%E8%80%83%E8%99%91%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：千震／阿里云数据库高级技术专家</p>\n<p><strong>参考答案</strong>：开放性问题，无标准答案。</p>\n<h2 id="q25%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E6%95%B0%E7%BB%84%E5%92%8C%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E8%BF%94%E5%9B%9E%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E7%B4%A2%E5%BC%95%E8%BF%99%E4%B8%A4%E4%B8%AA%E7%B4%A2%E5%BC%95%E6%8C%87%E5%90%91%E7%9A%84%E6%95%B0%E5%AD%97%E7%9A%84%E5%8A%A0%E5%92%8C%E7%AD%89%E4%BA%8E%E6%8C%87%E5%AE%9A%E7%9A%84%E6%95%B4%E6%95%B0%E9%9C%80%E8%A6%81%E6%9C%80%E4%BC%98%E7%9A%84%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95%E7%9A%84%E7%A9%BA%E9%97%B4%E5%92%8C%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6">Q25：给定一个整数数组和一个整数，返回两个数组的索引，这两个索引指向的数字的加和等于指定的整数。需要最优的算法，分析算法的空间和时间复杂度<a class="anchor" href="#q25%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E6%95%B0%E7%BB%84%E5%92%8C%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E8%BF%94%E5%9B%9E%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E7%B4%A2%E5%BC%95%E8%BF%99%E4%B8%A4%E4%B8%AA%E7%B4%A2%E5%BC%95%E6%8C%87%E5%90%91%E7%9A%84%E6%95%B0%E5%AD%97%E7%9A%84%E5%8A%A0%E5%92%8C%E7%AD%89%E4%BA%8E%E6%8C%87%E5%AE%9A%E7%9A%84%E6%95%B4%E6%95%B0%E9%9C%80%E8%A6%81%E6%9C%80%E4%BC%98%E7%9A%84%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95%E7%9A%84%E7%A9%BA%E9%97%B4%E5%92%8C%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6">§</a></h2>\n<p><strong>参考答案</strong>：</p>\n<pre class="language-autoit"><code class="language-autoit">public int<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> int target<span class="token punctuation">)</span> {\n    <span class="token function">if</span><span class="token punctuation">(</span>nums<span class="token operator">==</span><span class="token keyword">null</span> || nums<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span>\n        return new int<span class="token punctuation">[</span><span class="token punctuation">]</span>{<span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>}<span class="token comment">;</span>\n \n    HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> new HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n    <span class="token function">for</span><span class="token punctuation">(</span>int i<span class="token operator">=</span><span class="token number">0</span><span class="token comment">; i&lt;nums.length; i++){</span>\n        <span class="token function">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>{\n            return new int<span class="token punctuation">[</span><span class="token punctuation">]</span>{map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i}<span class="token comment">;</span>\n        }<span class="token keyword">else</span>{\n            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token comment">;</span>\n        }\n    }\n \n    return new int<span class="token punctuation">[</span><span class="token punctuation">]</span>{<span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>}<span class="token comment">;</span>\n}\n</code></pre>\n<p>分析：空间复杂度和时间复杂度均为 O(n)</p>\n<h2 id="q26%E5%81%87%E5%A6%82%E7%BB%99%E4%BD%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E4%BA%A7%E5%93%81%E4%BD%A0%E5%B0%86%E4%BB%8E%E5%93%AA%E4%BA%9B%E6%96%B9%E9%9D%A2%E6%9D%A5%E4%BF%9D%E9%9A%9C%E5%AE%83%E7%9A%84%E8%B4%A8%E9%87%8F">Q26：假如给你一个新产品，你将从哪些方面来保障它的质量？<a class="anchor" href="#q26%E5%81%87%E5%A6%82%E7%BB%99%E4%BD%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E4%BA%A7%E5%93%81%E4%BD%A0%E5%B0%86%E4%BB%8E%E5%93%AA%E4%BA%9B%E6%96%B9%E9%9D%A2%E6%9D%A5%E4%BF%9D%E9%9A%9C%E5%AE%83%E7%9A%84%E8%B4%A8%E9%87%8F">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：晨晖 ／阿里云中间件技术部测试开发专家</p>\n<p><strong>参考答案</strong>：</p>\n<p>可以从代码开发、测试保障、线上质量三个方面来保障。</p>\n<p>在代码开发阶段，有单元测试、代码Review、静态代码扫描等；</p>\n<p>测试保障阶段，有功能测试、性能测试、高可用测试、稳定性测试、兼容性测试等；</p>\n<p>在线上质量方面，有灰度发布、紧急回滚、故障演练、线上监控和巡检等。</p>\n<h2 id="q27%E8%AF%B7%E8%AF%84%E4%BC%B0%E4%B8%80%E4%B8%8B%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C">Q27：请评估一下程序的执行结果？<a class="anchor" href="#q27%E8%AF%B7%E8%AF%84%E4%BC%B0%E4%B8%80%E4%B8%8B%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C">§</a></h2>\n<pre class="language-autoit"><code class="language-autoit">public class SynchronousQueueQuiz {\n    public <span class="token keyword">static</span> void <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> throws Exception {\n        BlockingQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> new\n        SynchronousQueue<span class="token operator">&lt;></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        System<span class="token punctuation">.</span> out <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        System<span class="token punctuation">.</span> out <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        System<span class="token punctuation">.</span> out <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        System<span class="token punctuation">.</span> out <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        System<span class="token punctuation">.</span> out <span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;</span>\n    }\n}\n\n</code></pre>\n<p>A. true true true 1 3</p>\n<p>B. true true true (阻塞)</p>\n<p>C. false false false null 0</p>\n<p>D. false false false (阻塞)</p>\n<p><strong>出题人</strong>：阿里巴巴出题专家：桃谷／阿里云中间件技术专家</p>\n<p><strong>参考答案</strong>：D</p>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement(React.Fragment, { key: ".0" },
            React.createElement("link", { href: "/favicon.png", rel: "icon", type: "image/png" }),
            React.createElement("script", { src: "/assets/custom.js" })),
        React.createElement("link", { crossOrigin: "anonymous", href: "https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css", integrity: "sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X", rel: "stylesheet" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0", id: "01%E9%98%BF%E9%87%8C%E7%AF%87" },
        "01.\u963F\u91CC\u7BC7",
        React.createElement("a", { className: "anchor", href: "#01%E9%98%BF%E9%87%8C%E7%AF%87" }, "\u00A7")),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="q1%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%AB%98%E6%95%88%E7%9A%84%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E9%80%86%E5%BA%8F%E8%BE%93%E5%87%BA">Q1：如何实现一个高效的单向链表逆序输出？<a class="anchor" href="#q1%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%AB%98%E6%95%88%E7%9A%84%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E9%80%86%E5%BA%8F%E8%BE%93%E5%87%BA">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：昀龙／阿里云弹性人工智能负责人</p>\n<p><strong>参考答案</strong>：下面是其中一种写法，也可以有不同的写法，比如递归等。供参考。</p>\n<pre class="language-autoit"><code class="language-autoit">typedef struct node{\n    int           data<span class="token comment">;</span>\n    struct node<span class="token operator">*</span>  <span class="token keyword">next</span><span class="token comment">;</span>\n    <span class="token function">node</span><span class="token punctuation">(</span>int d<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">data</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">NULL</span><span class="token punctuation">)</span>{}\n}node<span class="token comment">;</span>\n\nvoid <span class="token function">reverse</span><span class="token punctuation">(</span>node<span class="token operator">*</span> head<span class="token punctuation">)</span>\n{\n    <span class="token function">if</span><span class="token punctuation">(</span><span class="token keyword">NULL</span> <span class="token operator">==</span> head || <span class="token keyword">NULL</span> <span class="token operator">==</span> head<span class="token operator">-</span><span class="token operator">></span><span class="token keyword">next</span><span class="token punctuation">)</span>{\n        return<span class="token comment">;</span>\n    }\n    \n    node<span class="token operator">*</span> prev<span class="token operator">=</span><span class="token keyword">NULL</span><span class="token comment">;</span>\n    node<span class="token operator">*</span> pcur<span class="token operator">=</span>head<span class="token operator">-</span><span class="token operator">></span><span class="token keyword">next</span><span class="token comment">;</span>\n    node<span class="token operator">*</span> <span class="token keyword">next</span><span class="token comment">;</span>\n    \n    <span class="token function">while</span><span class="token punctuation">(</span>pcur!<span class="token operator">=</span><span class="token keyword">NULL</span><span class="token punctuation">)</span>{\n        <span class="token function">if</span><span class="token punctuation">(</span>pcur<span class="token operator">-</span><span class="token operator">></span><span class="token keyword">next</span><span class="token operator">==</span><span class="token keyword">NULL</span><span class="token punctuation">)</span>{\n            pcur<span class="token operator">-</span><span class="token operator">></span><span class="token keyword">next</span><span class="token operator">=</span>prev<span class="token comment">;</span>\n            break<span class="token comment">;</span>\n        }\n        <span class="token keyword">next</span><span class="token operator">=</span>pcur<span class="token operator">-</span><span class="token operator">></span><span class="token keyword">next</span><span class="token comment">;</span>\n        pcur<span class="token operator">-</span><span class="token operator">></span><span class="token keyword">next</span><span class="token operator">=</span>prev<span class="token comment">;</span>\n        prev<span class="token operator">=</span>pcur<span class="token comment">;</span>\n        pcur<span class="token operator">=</span><span class="token keyword">next</span><span class="token comment">;</span>\n    }\n    \n    head<span class="token operator">-</span><span class="token operator">></span><span class="token keyword">next</span><span class="token operator">=</span>pcur<span class="token comment">;</span>\n    node<span class="token operator">*</span>tmp<span class="token operator">=</span>head<span class="token operator">-</span><span class="token operator">></span><span class="token keyword">next</span><span class="token comment">;</span>\n    <span class="token function">while</span><span class="token punctuation">(</span>tmp!<span class="token operator">=</span><span class="token keyword">NULL</span><span class="token punctuation">)</span>{\n        cout<span class="token operator">&lt;</span><span class="token operator">&lt;</span>tmp<span class="token operator">-</span><span class="token operator">></span>data<span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token string">"\t"</span><span class="token comment">;</span>\n        tmp<span class="token operator">=</span>tmp<span class="token operator">-</span><span class="token operator">></span><span class="token keyword">next</span><span class="token comment">;</span>\n    }\n}\n\n</code></pre>\n<h2 id="q2%E5%B7%B2%E7%9F%A5-sqrt-2%E7%BA%A6%E7%AD%89%E4%BA%8E-1414%E8%A6%81%E6%B1%82%E4%B8%8D%E7%94%A8%E6%95%B0%E5%AD%A6%E5%BA%93%E6%B1%82-sqrt-2%E7%B2%BE%E7%A1%AE%E5%88%B0%E5%B0%8F%E6%95%B0%E7%82%B9%E5%90%8E-10-%E4%BD%8D">Q2：已知 sqrt (2)约等于 1.414，要求不用数学库，求 sqrt (2)精确到小数点后 10 位。<a class="anchor" href="#q2%E5%B7%B2%E7%9F%A5-sqrt-2%E7%BA%A6%E7%AD%89%E4%BA%8E-1414%E8%A6%81%E6%B1%82%E4%B8%8D%E7%94%A8%E6%95%B0%E5%AD%A6%E5%BA%93%E6%B1%82-sqrt-2%E7%B2%BE%E7%A1%AE%E5%88%B0%E5%B0%8F%E6%95%B0%E7%82%B9%E5%90%8E-10-%E4%BD%8D">§</a></h2>\n<p><strong>出题人</strong>：——阿里巴巴出题专家：文景／阿里云 CDN 资深技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<h4 id="-%E8%80%83%E5%AF%9F%E7%82%B9">* 考察点<a class="anchor" href="#-%E8%80%83%E5%AF%9F%E7%82%B9">§</a></h4>\n<ol>\n<li>基础算法的灵活应用能力（二分法学过数据结构的同学都知道，但不一定往这个方向考虑；如果学过数值计算的同学，应该还要能想到牛顿迭代法并解释清楚）</li>\n<li>退出条件设计</li>\n</ol>\n<h4 id="-%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95">* 解决办法<a class="anchor" href="#-%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95">§</a></h4>\n<h5 id="1-%E5%B7%B2%E7%9F%A5-sqrt2%E7%BA%A6%E7%AD%89%E4%BA%8E-1414%E9%82%A3%E4%B9%88%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%9C%A814-15%E5%8C%BA%E9%97%B4%E5%81%9A%E4%BA%8C%E5%88%86">1. 已知 sqrt(2)约等于 1.414，那么就可以在(1.4, 1.5)区间做二分<a class="anchor" href="#1-%E5%B7%B2%E7%9F%A5-sqrt2%E7%BA%A6%E7%AD%89%E4%BA%8E-1414%E9%82%A3%E4%B9%88%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%9C%A814-15%E5%8C%BA%E9%97%B4%E5%81%9A%E4%BA%8C%E5%88%86">§</a></h5>\n<p>查找，如：\na) high=&gt;1.5\nb) low=&gt;1.4\nc) mid =&gt; (high+low)/2=1.45\nd) 1.45*1.45&gt;2 ? high=&gt;1.45 : low =&gt; 1.45\ne) 循环到 c)</p>\n<h5 id="2-%E9%80%80%E5%87%BA%E6%9D%A1%E4%BB%B6">2. 退出条件<a class="anchor" href="#2-%E9%80%80%E5%87%BA%E6%9D%A1%E4%BB%B6">§</a></h5>\n<p>a) 前后两次的差值的绝对值&lt;=0.0000000001, 则可退出</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token keyword">const</span> double EPSILON <span class="token operator">=</span> <span class="token number">0.0000000001</span><span class="token comment">;</span>\n\ndouble <span class="token function">sqrt2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    double low <span class="token operator">=</span> <span class="token number">1.4</span><span class="token punctuation">,</span> high <span class="token operator">=</span> <span class="token number">1.5</span><span class="token comment">;</span>\n    double mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token comment">;</span>\n\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low <span class="token operator">></span> EPSILON<span class="token punctuation">)</span> {\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">*</span> mid <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> {\n            high <span class="token operator">=</span> mid<span class="token comment">;</span>\n        } <span class="token keyword">else</span> {\n            low <span class="token operator">=</span> mid<span class="token comment">;</span>\n        }\n        mid <span class="token operator">=</span> <span class="token punctuation">(</span>high <span class="token operator">+</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token comment">;</span>\n    }\n\n    return mid<span class="token comment">;</span>\n}\n</code></pre>\n<h2 id="q3%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91bst%E6%89%BE%E5%88%B0%E6%A0%91%E4%B8%AD%E7%AC%AC-k-%E5%B0%8F%E7%9A%84%E8%8A%82%E7%82%B9">Q3：给定一个二叉搜索树(BST)，找到树中第 K 小的节点。<a class="anchor" href="#q3%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91bst%E6%89%BE%E5%88%B0%E6%A0%91%E4%B8%AD%E7%AC%AC-k-%E5%B0%8F%E7%9A%84%E8%8A%82%E7%82%B9">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：文景／阿里云 CDN 资深技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<h5 id="-%E8%80%83%E5%AF%9F%E7%82%B9-1">* 考察点<a class="anchor" href="#-%E8%80%83%E5%AF%9F%E7%82%B9-1">§</a></h5>\n<ol>\n<li>基础数据结构的理解和编码能力</li>\n<li>递归使用</li>\n</ol>\n<h5 id="-%E7%A4%BA%E4%BE%8B">* 示例<a class="anchor" href="#-%E7%A4%BA%E4%BE%8B">§</a></h5>\n<pre class="language-autoit"><code class="language-autoit">       <span class="token number">5</span>\n      <span class="token operator">/</span> \\n     <span class="token number">3</span>   <span class="token number">6</span>\n    <span class="token operator">/</span> \\n   <span class="token number">2</span>   <span class="token number">4</span>\n  <span class="token operator">/</span>\n <span class="token number">1</span>\n \n</code></pre>\n<p>说明：保证输入的 K 满足 1&lt;=K&lt;=(节点数目）</p>\n<p>树相关的题目，第一眼就想到递归求解，左右子树分别遍历。联想到二叉搜索树的性质，root 大于左子树，小于右子树，如果左子树的节点数目等于 K-1，那么 root 就是结果，否则如果左子树节点数目小于 K-1，那么结果必然在右子树，否则就在左子树。因此在搜索的时候同时返回节点数目，跟 K 做对比，就能得出结果了。</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>\n <span class="token operator">*</span> Definition <span class="token keyword">for</span> a binary tree node<span class="token punctuation">.</span>\n <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span>\n\npublic class TreeNode {\n    int val<span class="token comment">;</span>\n    TreeNode left<span class="token comment">;</span>\n    TreeNode right<span class="token comment">;</span>\n    <span class="token function">TreeNode</span><span class="token punctuation">(</span>int x<span class="token punctuation">)</span> { val <span class="token operator">=</span> x<span class="token comment">; }</span>\n}\n\nclass Solution {\n    private class ResultType {\n    \n        boolean found<span class="token comment">;  // 是否找到</span>\n        \n        int val<span class="token comment">;  // 节点数目</span>\n        <span class="token function">ResultType</span><span class="token punctuation">(</span>boolean found<span class="token punctuation">,</span> int val<span class="token punctuation">)</span> {\n            this<span class="token punctuation">.</span>found <span class="token operator">=</span> found<span class="token comment">;</span>\n            this<span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token comment">;</span>\n        }\n    }\n\n    public int <span class="token function">kthSmallest</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> int k<span class="token punctuation">)</span> {\n        return <span class="token function">kthSmallestHelper</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token comment">;</span>\n    }\n\n    private ResultType <span class="token function">kthSmallestHelper</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> int k<span class="token punctuation">)</span> {\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> {\n            return new <span class="token function">ResultType</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        }\n\n        ResultType left <span class="token operator">=</span> <span class="token function">kthSmallestHelper</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token comment">;</span>\n\n        <span class="token operator">/</span><span class="token operator">/</span> 左子树找到，直接返回\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>found<span class="token punctuation">)</span> {\n            return new <span class="token function">ResultType</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> left<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token comment">;</span>\n        }\n\n        <span class="token operator">/</span><span class="token operator">/</span> 左子树的节点数目 <span class="token operator">=</span> K<span class="token operator">-</span><span class="token number">1</span>，结果为 root 的值\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> left<span class="token punctuation">.</span>val <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> {\n            return new <span class="token function">ResultType</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token comment">;</span>\n        }\n\n        <span class="token operator">/</span><span class="token operator">/</span> 右子树寻找\n        ResultType right <span class="token operator">=</span> <span class="token function">kthSmallestHelper</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> k <span class="token operator">-</span> left<span class="token punctuation">.</span>val <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span>found<span class="token punctuation">)</span> {\n            return new <span class="token function">ResultType</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token comment">;</span>\n        }\n\n        <span class="token operator">/</span><span class="token operator">/</span> 没找到，返回节点总数\n        return new <span class="token function">ResultType</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> left<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token comment">;</span>\n    }\n}\n\n</code></pre>\n<h2 id="q4lru-%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6">Q4：LRU 缓存机制<a class="anchor" href="#q4lru-%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6">§</a></h2>\n<p>设计和实现一个 LRU（最近最少使用）缓存数据结构，使它应该支持一下操作：get 和 put。\nget(key) - 如果 key 存在于缓存中，则获取 key 的 value（总是正数），否则返回 -1。\nput(key,value) - 如果 key 不存在，请设置或插入 value。当缓存达到其容量时，它应该在插入新项目之前使最近最少使用的项目作废。</p>\n<p><strong>出题人</strong>：文景／阿里云 CDN 资深技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<p>python版本的：</p>\n<pre class="language-autoit"><code class="language-autoit">class <span class="token function">LRUCache</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    def <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token string">""</span>"\n    <span class="token punctuation">:</span>type capacity<span class="token punctuation">:</span> int\n    <span class="token string">""</span>"\n    self<span class="token punctuation">.</span>cache <span class="token operator">=</span> {}\n    self<span class="token punctuation">.</span>keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    self<span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity\n    \n    def <span class="token function">visit_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> key <span class="token keyword">in</span> self<span class="token punctuation">.</span>keys<span class="token punctuation">:</span>\n            self<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n    \n    def <span class="token function">elim_key</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        key <span class="token operator">=</span> self<span class="token punctuation">.</span>keys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n        self<span class="token punctuation">.</span>keys <span class="token operator">=</span> self<span class="token punctuation">.</span>keys<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>\n        del self<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n        \n    def <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token string">""</span>"\n        <span class="token punctuation">:</span>type key<span class="token punctuation">:</span> int\n        <span class="token punctuation">:</span>rtype<span class="token punctuation">:</span> int\n        <span class="token string">""</span>"\n        <span class="token keyword">if</span> <span class="token operator">not</span> key <span class="token keyword">in</span> self<span class="token punctuation">.</span>cache<span class="token punctuation">:</span>\n            return <span class="token operator">-</span><span class="token number">1</span>\n        self<span class="token punctuation">.</span><span class="token function">visit_key</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n        return self<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n    \n    def <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token string">""</span>"\n        <span class="token punctuation">:</span>type key<span class="token punctuation">:</span> int\n        <span class="token punctuation">:</span>type value<span class="token punctuation">:</span> int\n        <span class="token punctuation">:</span>rtype<span class="token punctuation">:</span> void\n        <span class="token string">""</span>"\n        <span class="token keyword">if</span> <span class="token operator">not</span> key <span class="token keyword">in</span> self<span class="token punctuation">.</span>cache<span class="token punctuation">:</span>\n        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>capacity<span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span><span class="token function">elim_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value\n        self<span class="token punctuation">.</span><span class="token function">visit_key</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n\ndef <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    s <span class="token operator">=</span>\n    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"put"</span><span class="token punctuation">,</span><span class="token string">"put"</span><span class="token punctuation">,</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"put"</span><span class="token punctuation">,</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"put"</span><span class="token punctuation">,</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"get"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>\n    <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n    obj <span class="token operator">=</span> <span class="token function">LRUCache</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n    l<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">for</span> i<span class="token punctuation">,</span>c <span class="token keyword">in</span> <span class="token function">enumerate</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token function">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">"get"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            l<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">else</span><span class="token punctuation">:</span>\n            obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>\n    <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n</code></pre>\n<p>c++版本的：</p>\n<pre class="language-autoit"><code class="language-autoit">class LRUCache{\n    public<span class="token punctuation">:</span>\n        <span class="token function">LRUCache</span><span class="token punctuation">(</span>int capacity<span class="token punctuation">)</span> {\n            cap <span class="token operator">=</span> capacity<span class="token comment">;</span>\n        }\n        \n        int <span class="token function">get</span><span class="token punctuation">(</span>int key<span class="token punctuation">)</span> {\n            auto it <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> return <span class="token operator">-</span><span class="token number">1</span><span class="token comment">;</span>\n            l<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> it<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">)</span><span class="token comment">;</span>\n            return it<span class="token operator">-</span><span class="token operator">></span>second<span class="token operator">-</span><span class="token operator">></span>second<span class="token comment">;</span>\n        }\n        \n        void <span class="token function">set</span><span class="token punctuation">(</span>int key<span class="token punctuation">,</span> int value<span class="token punctuation">)</span> {\n            auto it <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>it !<span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> l<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">)</span><span class="token comment">;</span>\n            l<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;</span>\n            m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> cap<span class="token punctuation">)</span> {\n                int k <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>first<span class="token comment">;</span>\n                l<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n                m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token comment">;</span>\n            }\n        }\n}\n\n</code></pre>\n<h2 id="q5%E5%85%B3%E4%BA%8E-epoll-%E5%92%8C-select-%E7%9A%84%E5%8C%BA%E5%88%AB%E5%93%AA%E4%BA%9B%E8%AF%B4%E6%B3%95%E6%98%AF%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%A4%9A%E9%80%89">Q5：关于 epoll 和 select 的区别，哪些说法是正确的？（多选）<a class="anchor" href="#q5%E5%85%B3%E4%BA%8E-epoll-%E5%92%8C-select-%E7%9A%84%E5%8C%BA%E5%88%AB%E5%93%AA%E4%BA%9B%E8%AF%B4%E6%B3%95%E6%98%AF%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%A4%9A%E9%80%89">§</a></h2>\n<p>A. epoll 和 select 都是 I/O 多路复用的技术，都可以实现同时监听多个 I/O 事件的状态。</p>\n<p>B. epoll 相比 select 效率更高，主要是基于其操作系统支持的I/O事件通知机制，而 select 是基于轮询机制。</p>\n<p>C. epoll 支持水平触发和边沿触发两种模式。</p>\n<p>D. select 能并行支持 I/O 比较小，且无法修改。</p>\n<p><strong>出题人</strong>：阿里巴巴出题专家：寈峰／阿里技术专家</p>\n<p><strong>参考答案</strong>：A，B，C</p>\n<p><strong>【延伸】那在高并发的访问下，epoll使用那一种触发方式要高效些？当使用边缘触发的时候要注意些什么东西？</strong></p>\n<h2 id="q6%E4%BB%8E-innodb-%E7%9A%84%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90%E4%B8%BA%E4%BB%80%E4%B9%88%E7%B4%A2%E5%BC%95%E7%9A%84-key-%E9%95%BF%E5%BA%A6%E4%B8%8D%E8%83%BD%E5%A4%AA%E9%95%BF">Q6：从 innodb 的索引结构分析，为什么索引的 key 长度不能太长？<a class="anchor" href="#q6%E4%BB%8E-innodb-%E7%9A%84%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90%E4%B8%BA%E4%BB%80%E4%B9%88%E7%B4%A2%E5%BC%95%E7%9A%84-key-%E9%95%BF%E5%BA%A6%E4%B8%8D%E8%83%BD%E5%A4%AA%E9%95%BF">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：近秋／阿里云数据库产品技术部技术专家</p>\n<p><strong>参考答案</strong>：key 太长会导致一个页当中能够存放的 key 的数目变少，间接导致索引树的页数目变多，索引层次增加，从而影响整体查询变更的效率。</p>\n<h2 id="q7mysql-%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D%E5%88%B0%E4%BB%BB%E6%84%8F%E6%97%B6%E9%97%B4%E7%82%B9">Q7：MySQL 的数据如何恢复到任意时间点？<a class="anchor" href="#q7mysql-%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D%E5%88%B0%E4%BB%BB%E6%84%8F%E6%97%B6%E9%97%B4%E7%82%B9">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：近秋／阿里云数据库产品技术部技术专家参考答案</p>\n<p><strong>参考答案</strong>：恢复到任意时间点以定时的做全量备份，以及备份增量的 binlog 日志为前提。恢复到任意时间点首先将全量备份恢复之后，再此基础上回放增加的 binlog 直至指定的时间点。</p>\n<h2 id="q8nfs-%E5%92%8C-smb-%E6%98%AF%E6%9C%80%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%A4%E7%A7%8D-nasnetwork-attached-storage%E5%8D%8F%E8%AE%AE%E5%BD%93%E6%8A%8A%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%90%8C%E6%97%B6%E9%80%9A%E8%BF%87-nfs-%E5%92%8C-smb-%E5%8D%8F%E8%AE%AE%E5%85%B1%E4%BA%AB%E7%BB%99%E5%A4%9A%E4%B8%AA%E4%B8%BB%E6%9C%BA%E8%AE%BF%E9%97%AE%E6%97%B6%E4%BB%A5%E4%B8%8B%E5%93%AA%E4%BA%9B%E8%AF%B4%E6%B3%95%E6%98%AF%E9%94%99%E8%AF%AF%E7%9A%84%E5%A4%9A%E9%80%89">Q8：NFS 和 SMB 是最常见的两种 NAS（Network Attached Storage）协议，当把一个文件系统同时通过 NFS 和 SMB 协议共享给多个主机访问时，以下哪些说法是错误的：（多选）<a class="anchor" href="#q8nfs-%E5%92%8C-smb-%E6%98%AF%E6%9C%80%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%A4%E7%A7%8D-nasnetwork-attached-storage%E5%8D%8F%E8%AE%AE%E5%BD%93%E6%8A%8A%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%90%8C%E6%97%B6%E9%80%9A%E8%BF%87-nfs-%E5%92%8C-smb-%E5%8D%8F%E8%AE%AE%E5%85%B1%E4%BA%AB%E7%BB%99%E5%A4%9A%E4%B8%AA%E4%B8%BB%E6%9C%BA%E8%AE%BF%E9%97%AE%E6%97%B6%E4%BB%A5%E4%B8%8B%E5%93%AA%E4%BA%9B%E8%AF%B4%E6%B3%95%E6%98%AF%E9%94%99%E8%AF%AF%E7%9A%84%E5%A4%9A%E9%80%89">§</a></h2>\n<p>A. 不可能有这样的操作，即把一个文件系统同时通过 NFS 和 SMB协议共享给多个主机访问。</p>\n<p>B. 主机 a 的用户通过NFS 协议创建的文件或者目录，另一个主机 b的用户不能通过 SMB 协议将其删除。</p>\n<p>C. 在同一个目录下，主机 a 通过 NFS 协议看到文件 file.txt，主机b 通过 SMB 协议也看到文件 file.txt，那么它们是同一个文件。</p>\n<p>D. 主机 a 通过 NFS 协议，以及主机 b 通过 SMB 协议，都可以通过主机端的数据缓存，提升文件访问性能。</p>\n<p><strong>出题人</strong>：阿里巴巴出题专家：起影／阿里云文件存储高级技术专家</p>\n<p><strong>参考答案</strong>：A，B，C</p>\n<h2 id="q9%E8%BE%93%E5%85%A5-ping-ip-%E5%90%8E%E6%95%B2%E5%9B%9E%E8%BD%A6%E5%8F%91%E5%8C%85%E5%89%8D%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88">Q9：输入 ping IP 后敲回车，发包前会发生什么？<a class="anchor" href="#q9%E8%BE%93%E5%85%A5-ping-ip-%E5%90%8E%E6%95%B2%E5%9B%9E%E8%BD%A6%E5%8F%91%E5%8C%85%E5%89%8D%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：怀虎／阿里云云效平台负责人</p>\n<p><strong>参考答案</strong>：\n首先根据目的IP和路由表决定走哪个网卡，再根据网卡的子网掩码地址判断目的IP是否在子网内。如果不在则会通过arp缓存查询IP的网卡地址，不存在的话会通过广播询问目的IP的mac地址，得到后就开始发包了，同时mac地址也会被arp缓存起来。</p>\n<h2 id="q10%E8%AF%B7%E8%A7%A3%E9%87%8A%E4%B8%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E9%B9%BF%E6%99%97%E5%8F%91%E5%B8%83%E6%81%8B%E6%83%85%E7%9A%84%E6%97%B6%E5%80%99%E5%BE%AE%E5%8D%9A%E7%B3%BB%E7%BB%9F%E4%BC%9A%E5%B4%A9%E6%BA%83%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3">Q10：请解释下为什么鹿晗发布恋情的时候，微博系统会崩溃，如何解决？<a class="anchor" href="#q10%E8%AF%B7%E8%A7%A3%E9%87%8A%E4%B8%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E9%B9%BF%E6%99%97%E5%8F%91%E5%B8%83%E6%81%8B%E6%83%85%E7%9A%84%E6%97%B6%E5%80%99%E5%BE%AE%E5%8D%9A%E7%B3%BB%E7%BB%9F%E4%BC%9A%E5%B4%A9%E6%BA%83%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：江岚／阿里巴巴数据技术高级技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<p>A. 获取微博通过 pull 方式还是 push 方式</p>\n<p>B. 发布微博的频率要远小于阅读微博</p>\n<p>C. 流量明星的发微博，和普通博主要区分对待，比如在 sharding的时候，也要考虑这个因素</p>\n<h2 id="q11%E7%8E%B0%E6%9C%89%E4%B8%80%E6%89%B9%E9%82%AE%E4%BB%B6%E9%9C%80%E8%A6%81%E5%8F%91%E9%80%81%E7%BB%99%E8%AE%A2%E9%98%85%E9%A1%BE%E5%AE%A2%E4%B8%94%E6%9C%89%E4%B8%80%E4%B8%AA%E9%9B%86%E7%BE%A4%E9%9B%86%E7%BE%A4%E7%9A%84%E8%8A%82%E7%82%B9%E6%95%B0%E4%B8%8D%E5%AE%9A%E4%BC%9A%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9%E7%BC%A9%E5%AE%B9%E6%9D%A5%E8%B4%9F%E8%B4%A3%E5%85%B7%E4%BD%93%E7%9A%84%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E4%BB%BB%E5%8A%A1%E5%A6%82%E4%BD%95%E8%AE%A9%E7%B3%BB%E7%BB%9F%E5%B0%BD%E5%BF%AB%E5%9C%B0%E5%AE%8C%E6%88%90%E5%8F%91%E9%80%81%E8%AF%B7%E8%AF%A6%E8%BF%B0%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88">Q11：现有一批邮件需要发送给订阅顾客，且有一个集群（集群的节点数不定，会动态扩容缩容）来负责具体的邮件发送任务，如何让系统尽快地完成发送？请详述技术方案！<a class="anchor" href="#q11%E7%8E%B0%E6%9C%89%E4%B8%80%E6%89%B9%E9%82%AE%E4%BB%B6%E9%9C%80%E8%A6%81%E5%8F%91%E9%80%81%E7%BB%99%E8%AE%A2%E9%98%85%E9%A1%BE%E5%AE%A2%E4%B8%94%E6%9C%89%E4%B8%80%E4%B8%AA%E9%9B%86%E7%BE%A4%E9%9B%86%E7%BE%A4%E7%9A%84%E8%8A%82%E7%82%B9%E6%95%B0%E4%B8%8D%E5%AE%9A%E4%BC%9A%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9%E7%BC%A9%E5%AE%B9%E6%9D%A5%E8%B4%9F%E8%B4%A3%E5%85%B7%E4%BD%93%E7%9A%84%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E4%BB%BB%E5%8A%A1%E5%A6%82%E4%BD%95%E8%AE%A9%E7%B3%BB%E7%BB%9F%E5%B0%BD%E5%BF%AB%E5%9C%B0%E5%AE%8C%E6%88%90%E5%8F%91%E9%80%81%E8%AF%B7%E8%AF%A6%E8%BF%B0%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：江岚／阿里巴巴数据技术高级技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<p>A. 借助消息中间件，通过发布者订阅者模式来进行任务分配</p>\n<p>B. master-slave 部署，由 master 来分配任务</p>\n<p>C. 不借助任何中间件，且所有节点均等。通过数据库的 update-returning，从而实现节点之间任务的互斥</p>\n<h2 id="q12%E6%9C%89%E4%B8%80%E6%89%B9%E6%B0%94%E8%B1%A1%E8%A7%82%E6%B5%8B%E7%AB%99%E7%8E%B0%E9%9C%80%E8%A6%81%E8%8E%B7%E5%8F%96%E8%BF%99%E4%BA%9B%E7%AB%99%E7%82%B9%E7%9A%84%E8%A7%82%E6%B5%8B%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%AD%98%E5%82%A8%E5%88%B0-hive-%E4%B8%AD%E4%BD%86%E6%98%AF%E6%B0%94%E8%B1%A1%E5%B1%80%E5%8F%AA%E6%8F%90%E4%BE%9B%E4%BA%86-api-%E6%9F%A5%E8%AF%A2%E6%AF%8F%E6%AC%A1%E5%8F%AA%E8%83%BD%E6%9F%A5%E8%AF%A2%E5%8D%95%E4%B8%AA%E8%A7%82%E6%B5%8B%E7%82%B9%E9%82%A3%E4%B9%88%E5%A6%82%E6%9E%9C%E8%83%BD%E5%A4%9F%E6%96%B9%E4%BE%BF%E5%BF%AB%E9%80%9F%E5%9C%B0%E8%8E%B7%E5%8F%96%E5%88%B0%E6%89%80%E6%9C%89%E7%9A%84%E8%A7%82%E6%B5%8B%E7%82%B9%E7%9A%84%E6%95%B0%E6%8D%AE">Q12：有一批气象观测站，现需要获取这些站点的观测数据，并存储到 Hive 中。但是气象局只提供了 api 查询，每次只能查询单个观测点。那么如果能够方便快速地获取到所有的观测点的数据？<a class="anchor" href="#q12%E6%9C%89%E4%B8%80%E6%89%B9%E6%B0%94%E8%B1%A1%E8%A7%82%E6%B5%8B%E7%AB%99%E7%8E%B0%E9%9C%80%E8%A6%81%E8%8E%B7%E5%8F%96%E8%BF%99%E4%BA%9B%E7%AB%99%E7%82%B9%E7%9A%84%E8%A7%82%E6%B5%8B%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%AD%98%E5%82%A8%E5%88%B0-hive-%E4%B8%AD%E4%BD%86%E6%98%AF%E6%B0%94%E8%B1%A1%E5%B1%80%E5%8F%AA%E6%8F%90%E4%BE%9B%E4%BA%86-api-%E6%9F%A5%E8%AF%A2%E6%AF%8F%E6%AC%A1%E5%8F%AA%E8%83%BD%E6%9F%A5%E8%AF%A2%E5%8D%95%E4%B8%AA%E8%A7%82%E6%B5%8B%E7%82%B9%E9%82%A3%E4%B9%88%E5%A6%82%E6%9E%9C%E8%83%BD%E5%A4%9F%E6%96%B9%E4%BE%BF%E5%BF%AB%E9%80%9F%E5%9C%B0%E8%8E%B7%E5%8F%96%E5%88%B0%E6%89%80%E6%9C%89%E7%9A%84%E8%A7%82%E6%B5%8B%E7%82%B9%E7%9A%84%E6%95%B0%E6%8D%AE">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：江岚／阿里巴巴数据技术高级技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<p>A. 通过 shell 或 python 等调用 api，结果先暂存本地，最后将本地文件上传到 Hive 中。</p>\n<p>B. 通过 datax 的 httpReader 和 hdfsWriter 插件，从而获取所需的数据。</p>\n<p>C. 比较理想的回答，是在计算引擎的 UDF 中调用查询 api，执行UDF 的查询结果存储到对应的表中。一方面，不需要同步任务的导出导入；另一方面，计算引擎的分布式框架天生提供了分布式、容错、并发等特性。</p>\n<h2 id="q13%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%A4%E9%87%91%E9%A2%9D%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%8A%A0%E6%9C%80%E5%A4%9A%E5%B0%8F%E6%95%B0%E7%82%B9%E4%B8%A4%E4%BD%8D">Q13：如何实现两金额数据相加（最多小数点两位）？<a class="anchor" href="#q13%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%A4%E9%87%91%E9%A2%9D%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%8A%A0%E6%9C%80%E5%A4%9A%E5%B0%8F%E6%95%B0%E7%82%B9%E4%B8%A4%E4%BD%8D">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：御术／蚂蚁金服数据可视化高级技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<p>其实问题并不难，就是考察候选人对 JavaScript 数据运算上的认知以及考虑问题的缜密程度，有很多坑，可以用在笔试题，如果用在面试，回答过程中还可以随机加入有很多计算机基础的延伸。</p>\n<p>回到这个问题，由于直接浮点相与加会失精，所以要转整数；（可以插入问遇到过吗？是否可以举个例子？）。</p>\n<p>转整数是第一个坑，虽然只有两位可以通过乘以100转整数，但由于乘以一百和除以一百都会出现浮点数的运算，所以也会失精，还是要通过字符串来转；（可以插入问字符串转整数有几种方式？）字符串转整是第二个坑，因为最后要对齐计算，如果没考虑周全先toFixed(2)，对于只有一位小数点数据进入计算就会错误；转整数后的计算是个加分点，很多同学往往就是直接算了，如果可以考虑大数计算的场景，恭喜同学进入隐藏关卡，这就会涉及如何有效循环、遍历、算法复杂度的问题。</p>\n<h2 id="q14-%E5%85%B3%E4%BA%8E%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E5%BC%80%E6%94%BE%E9%97%AE%E9%A2%98">Q14： 关于并行计算的一些基础开放问题。<a class="anchor" href="#q14-%E5%85%B3%E4%BA%8E%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E5%BC%80%E6%94%BE%E9%97%AE%E9%A2%98">§</a></h2>\n<p>◼ 如何定义并计算，请分别阐述分布式内存到共享内存模式行编程的区别和实现（例子代码）？</p>\n<p>◼ 请使用 MPI 和 OpenMP 分别实现 N 个处理器对 M 个变量的求和？</p>\n<p>◼ 请说明 SIMD 指令在循环中使用的权限？向量化优化有哪些手段？</p>\n<p>◼ 请用 Amdahl 定律说明什么是并行效率以及并行算法的扩展性？并说明扩展性的性能指标和限制因素，最后请说明在共享内存计算机中，共享内存的限制？OpenMP 是怎样实现共享内存编程环境的？MPI 阻塞和非阻塞读写的区别？</p>\n<p><strong>出题人</strong>：阿里巴巴出题专家：何万青／阿里云高性能计算资深技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<p>（简要答案，但必须触及，可以展开）\n◼ 同时执行多个/算法/逻辑操作/内存访问/IO，相互独立同时运行，分三个层次：进程级，多个节点分布式内存通过MPI通信并行；线程级，共享内存的多路机器，通过OpenMP实现多线程并行；指令集：通过SIM指令实现单指令多数据。。。。举例吧啦吧啦。</p>\n<p>◼ MPI代码，，，OpenMP代码，分别写出来 M个元素，N个处理器的累加，后者注意private 参数。</p>\n<p>◼ SIMD在循环中的应用，限制在于 SIMD指令处理的每一个数组的长度，cache line利用，内部循环间的依赖和条件调用等。</p>\n<p>◼ 向量化，主要看SSE和AVX指令占比率，通过编译器优化...... 在loop代码中使用。</p>\n<p>◼ 性能和计算规模随处理器增加的变化曲线，实测HPL和峰值HPL比率，能用用Amdahl定律表达Tpar(N) = (an + (1-a)n/N )t + C (n,N), 能够讲明白串行部分对整个并行的天花板效应，扩展性能够解释清楚算法的扩展性=并行效率随处理器数目的变化关系，画出来。</p>\n<p>◼ 共享内存计算机OpenMP对变量的限制描述，EREW，CREW，ERCW，CRCW等区别，NUMA概念，如何保持coherent等。</p>\n<p>◼ 写出OpenMP和MPI的核心函数，回答问题即可。</p>\n<h2 id="q15%E8%AF%B7%E8%AE%A1%E7%AE%97xilinx%E5%85%AC%E5%8F%B8vu9p%E8%8A%AF%E7%89%87%E7%9A%84%E7%AE%97%E5%8A%9B%E7%9B%B8%E5%BD%93%E4%BA%8E%E5%A4%9A%E5%B0%91tops%E7%BB%99%E5%87%BA%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%85%AC%E5%BC%8F">Q15：请计算XILINX公司VU9P芯片的算力相当于多少TOPS，给出计算过程与公式。<a class="anchor" href="#q15%E8%AF%B7%E8%AE%A1%E7%AE%97xilinx%E5%85%AC%E5%8F%B8vu9p%E8%8A%AF%E7%89%87%E7%9A%84%E7%AE%97%E5%8A%9B%E7%9B%B8%E5%BD%93%E4%BA%8E%E5%A4%9A%E5%B0%91tops%E7%BB%99%E5%87%BA%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%85%AC%E5%BC%8F">§</a></h2>\n<p><strong>出题人</strong>： 阿里巴巴出题专家：隐达／阿里云异构计算资深专家</p>\n<p><strong>参考答案</strong>：基于不同的算法，这个值在十几到几百之间。但是，如果只是单纯比算力，FPGA和ASIC、GPU相比并无太大优势，甚至大多时候有较大劣势。FPGA的优势在于高度的灵活性和算法的针对性。</p>\n<h2 id="q16%E4%B8%80%E9%A2%97%E7%8E%B0%E4%BB%A3%E5%A4%84%E7%90%86%E5%99%A8%E6%AF%8F%E7%A7%92%E5%A4%A7%E6%A6%82%E5%8F%AF%E4%BB%A5%E6%89%A7%E8%A1%8C%E5%A4%9A%E5%B0%91%E6%9D%A1%E7%AE%80%E5%8D%95%E7%9A%84mov%E6%8C%87%E4%BB%A4%E6%9C%89%E5%93%AA%E4%BA%9B%E4%B8%BB%E8%A6%81%E7%9A%84%E5%BD%B1%E5%93%8D%E5%9B%A0%E7%B4%A0">Q16：一颗现代处理器，每秒大概可以执行多少条简单的MOV指令，有哪些主要的影响因素？<a class="anchor" href="#q16%E4%B8%80%E9%A2%97%E7%8E%B0%E4%BB%A3%E5%A4%84%E7%90%86%E5%99%A8%E6%AF%8F%E7%A7%92%E5%A4%A7%E6%A6%82%E5%8F%AF%E4%BB%A5%E6%89%A7%E8%A1%8C%E5%A4%9A%E5%B0%91%E6%9D%A1%E7%AE%80%E5%8D%95%E7%9A%84mov%E6%8C%87%E4%BB%A4%E6%9C%89%E5%93%AA%E4%BA%9B%E4%B8%BB%E8%A6%81%E7%9A%84%E5%BD%B1%E5%93%8D%E5%9B%A0%E7%B4%A0">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：子团／创新产品虚拟化&amp;稳定性资深技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<ul>\n<li>\n<p><strong>及格：</strong>\n每执行一条mov指令需要消耗1个时钟周期，所以每秒执行的mov指令和CPU主频相关。</p>\n</li>\n<li>\n<p><strong>加分：</strong>\n在CPU微架构上，要考虑数据预取，乱序执行，多发射，内存stall(前端stall和后端stall)等诸多因素，因此除了cpu主频外，还和流水线上的效率(IPC)强相关，比较复杂的一个问题。</p>\n</li>\n</ul>\n<h2 id="q17%E8%AF%B7%E5%88%86%E6%9E%90-maxcompute-%E4%BA%A7%E5%93%81%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E7%9A%84%E5%85%B3%E7%B3%BB%E5%BD%93%E5%89%8D%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%AE%A1%E7%AE%97%E5%B9%B3%E5%8F%B0%E7%B1%BB%E4%BA%A7%E5%93%81%E7%9A%84%E5%B8%82%E5%9C%BA%E7%8E%B0%E7%8A%B6%E5%92%8C%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF">Q17：请分析 MaxCompute 产品与分布式技术的关系、当前大数据计算平台类产品的市场现状和发展趋势。<a class="anchor" href="#q17%E8%AF%B7%E5%88%86%E6%9E%90-maxcompute-%E4%BA%A7%E5%93%81%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E7%9A%84%E5%85%B3%E7%B3%BB%E5%BD%93%E5%89%8D%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%AE%A1%E7%AE%97%E5%B9%B3%E5%8F%B0%E7%B1%BB%E4%BA%A7%E5%93%81%E7%9A%84%E5%B8%82%E5%9C%BA%E7%8E%B0%E7%8A%B6%E5%92%8C%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：云郎／阿里 MaxCompute 高级产品专家</p>\n<p><strong>参考答案</strong>：</p>\n<p>开放性问题，无标准答案。</p>\n<h2 id="q18-%E5%AF%B9%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E4%B8%AD%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E6%98%AF%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E7%AE%A1%E7%90%86%E4%BD%93%E7%B3%BB%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BC%9A%E5%AF%B9%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BA%94%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E5%BD%B1%E5%93%8D">Q18： 对大数据平台中的元数据管理是怎么理解的，元数据收集管理体系是怎么样的，会对大数据应用有什么样的影响。<a class="anchor" href="#q18-%E5%AF%B9%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E4%B8%AD%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E6%98%AF%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E7%AE%A1%E7%90%86%E4%BD%93%E7%B3%BB%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BC%9A%E5%AF%B9%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BA%94%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E5%BD%B1%E5%93%8D">§</a></h2>\n<p><strong>出题人</strong>： 阿里巴巴出题专家：映泉／阿里巴巴高级技术专家</p>\n<p><strong>参考答案</strong>：开放性问题，无标准答案。</p>\n<h2 id="q19-%E4%BD%A0%E7%90%86%E8%A7%A3%E5%B8%B8%E8%A7%81%E5%A6%82%E9%98%BF%E9%87%8C%E5%92%8C%E5%8F%8B%E5%95%86%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB%E5%B7%AE%E5%BC%82%E4%BB%A5%E5%8F%8A%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF%E5%92%8C%E6%8A%80%E6%9C%AF%E7%93%B6%E9%A2%88%E5%9C%A8%E5%AD%98%E5%82%A8%E5%92%8C%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E6%96%B9%E9%9D%A2%E8%BF%9B%E8%A1%8C%E6%A6%82%E8%BF%B0">Q19： 你理解常见如阿里，和友商大数据平台的技术体系差异以及发展趋势和技术瓶颈，在存储和计算两个方面进行概述。<a class="anchor" href="#q19-%E4%BD%A0%E7%90%86%E8%A7%A3%E5%B8%B8%E8%A7%81%E5%A6%82%E9%98%BF%E9%87%8C%E5%92%8C%E5%8F%8B%E5%95%86%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB%E5%B7%AE%E5%BC%82%E4%BB%A5%E5%8F%8A%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF%E5%92%8C%E6%8A%80%E6%9C%AF%E7%93%B6%E9%A2%88%E5%9C%A8%E5%AD%98%E5%82%A8%E5%92%8C%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E6%96%B9%E9%9D%A2%E8%BF%9B%E8%A1%8C%E6%A6%82%E8%BF%B0">§</a></h2>\n<p><strong>出题人</strong>： 阿里巴巴出题专家：映泉／阿里巴巴高级技术专家</p>\n<p><strong>参考答案</strong>：开放性问题，无标准答案。</p>\n<h2 id="q20%E5%9C%A8%E4%BA%91%E8%AE%A1%E7%AE%97%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%9C%BA%E6%99%AF%E4%B8%AD%E6%AF%8F%E5%A4%A9%E8%BF%90%E8%A1%8C%E7%9D%80%E6%88%90%E5%8D%83%E4%B8%8A%E4%B8%87%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%AF%8F%E4%B8%AA%E4%BB%BB%E5%8A%A1%E9%83%BD%E8%A6%81%E8%BF%9B%E8%A1%8C-io-%E8%AF%BB%E5%86%99%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E4%B8%BA%E4%BA%86%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%BB%8F%E5%B8%B8%E4%BC%9A%E4%BF%9D%E8%AF%81%E9%AB%98%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E4%BB%BB%E5%8A%A1%E4%BC%98%E5%85%88%E6%89%A7%E8%A1%8C%E5%BD%93%E5%A4%9A%E4%B8%AA%E4%BD%9C%E4%B8%9A%E6%88%96%E7%94%A8%E6%88%B7%E8%AE%BF%E9%97%AE%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E6%97%B6%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E4%BC%98%E5%85%88%E7%BA%A7%E5%92%8C%E5%85%AC%E5%B9%B3%E6%80%A7">Q20：在云计算大数据处理场景中，每天运行着成千上万的任务，每个任务都要进行 IO 读写。存储系统为了更好的服务，经常会保证高优先级的任务优先执行。当多个作业或用户访问存储系统时，如何保证优先级和公平性。<a class="anchor" href="#q20%E5%9C%A8%E4%BA%91%E8%AE%A1%E7%AE%97%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%9C%BA%E6%99%AF%E4%B8%AD%E6%AF%8F%E5%A4%A9%E8%BF%90%E8%A1%8C%E7%9D%80%E6%88%90%E5%8D%83%E4%B8%8A%E4%B8%87%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%AF%8F%E4%B8%AA%E4%BB%BB%E5%8A%A1%E9%83%BD%E8%A6%81%E8%BF%9B%E8%A1%8C-io-%E8%AF%BB%E5%86%99%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E4%B8%BA%E4%BA%86%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%BB%8F%E5%B8%B8%E4%BC%9A%E4%BF%9D%E8%AF%81%E9%AB%98%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E4%BB%BB%E5%8A%A1%E4%BC%98%E5%85%88%E6%89%A7%E8%A1%8C%E5%BD%93%E5%A4%9A%E4%B8%AA%E4%BD%9C%E4%B8%9A%E6%88%96%E7%94%A8%E6%88%B7%E8%AE%BF%E9%97%AE%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E6%97%B6%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E4%BC%98%E5%85%88%E7%BA%A7%E5%92%8C%E5%85%AC%E5%B9%B3%E6%80%A7">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：田磊磊／阿里云文件存储高级技术专家</p>\n<p><strong>参考答案</strong>：开放性问题，无标准答案。</p>\n<h2 id="q21%E6%9C%80%E5%A4%A7%E9%A2%91%E7%8E%87%E6%A0%88">Q21：最大频率栈。<a class="anchor" href="#q21%E6%9C%80%E5%A4%A7%E9%A2%91%E7%8E%87%E6%A0%88">§</a></h2>\n<p>实现 FreqStack，模拟类似栈的数据结构的操作的一个类。FreqStack 有两个函数：push(int x)，将整数 x 推入栈中。pop()，它移除并返回栈中出现最频繁的元素。如果最频繁的元素不只一个，则移除并返回最接近栈顶的元素。\n◼ 示例：\npush [5,7,5,7,4,5]\npop() -&gt; 返回 5，因为 5 是出现频率最高的。栈变成\n[5,7,5,7,4]。\npop() -&gt; 返回 7，因为 5 和 7 都是频率最高的，但 7 最接近栈\n顶。栈变成 [5,7,5,4]。\npop() -&gt; 返回 5 。栈变成 [5,7,4]。\npop() -&gt; 返回 4 。栈变成 [5,7]。</p>\n<p><strong>出题人</strong>：阿里巴巴出题专家：屹平／阿里云视频云边缘计算高级技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<p>令 freq 作为 x 的出现次数的映射 Map。</p>\n<p>此外 maxfreq，即栈中任意元素的当前最大频率，因为我们必须弹出频率最高的元素。</p>\n<p>当前主要的问题就变成了：在具有相同的（最大）频率的元素中，怎么判断那个元素是最新的？我们可以使用栈来查询这一信息：靠近栈顶的元素总是相对更新一些。</p>\n<p>为此，我们令 group 作为从频率到具有该频率的元素的映射。到目前，我们已经实现了 FreqStack 的所有必要的组件。</p>\n<p>算法：</p>\n<p>实际上，作为实现层面上的一点细节，如果 x 的频率为 f，那么我们将获取在所有 group[i] (i &lt;= f) 中的 x,而不仅仅是栈顶的那个。这是因为每个 group[i] 都会存储与第 i 个 x 副本相关的信息。</p>\n<p>最后，我们仅仅需要如上所述维持 freq，group，以及 maxfreq。</p>\n<p><strong>参考代码</strong>：</p>\n<pre class="language-autoit"><code class="language-autoit">class FreqStack {\n    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> freq<span class="token comment">;</span>\n    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token operator">></span> group<span class="token comment">;</span>\n    int maxfreq<span class="token comment">;</span>\n\n    public <span class="token function">FreqStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n        freq <span class="token operator">=</span> new <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        group <span class="token operator">=</span> new <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        maxfreq <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">;</span>\n    }\n    \n    public void <span class="token function">push</span><span class="token punctuation">(</span>int x<span class="token punctuation">)</span> {\n        int f <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token comment">;</span>\n        freq<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token comment">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">></span> maxfreq<span class="token punctuation">)</span> maxfreq <span class="token operator">=</span> f<span class="token comment">;</span>\n        group<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> z<span class="token operator">-</span><span class="token operator">></span> new <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">;</span>\n    }\n    \n    public int <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n        int x <span class="token operator">=</span> group<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>maxfreq<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        freq<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> freq<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>group<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>maxfreq<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        maxfreq<span class="token operator">-</span><span class="token operator">-</span><span class="token comment">;</span>\n        return x<span class="token comment">;</span>\n    }\n}\n</code></pre>\n<h2 id="q22%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-n-%E4%B8%AA%E8%8A%82%E7%82%B9%E5%B9%B6%E4%B8%94%E8%BF%94%E5%9B%9E%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E7%BB%93%E7%82%B9">Q22：给定一个链表，删除链表的倒数第 N 个节点，并且返回链表的头结点。<a class="anchor" href="#q22%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-n-%E4%B8%AA%E8%8A%82%E7%82%B9%E5%B9%B6%E4%B8%94%E8%BF%94%E5%9B%9E%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E7%BB%93%E7%82%B9">§</a></h2>\n<p>◼ 示例：\n给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.\n当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.\n说明：\n给定的 n 保证是有效的。\n要求：\n只允许对链表进行一次遍历。</p>\n<p><strong>出题人</strong>：阿里巴巴出题专家：屹平／阿里云视频云边缘计算高级技术专家</p>\n<p><strong>参考答案</strong>：</p>\n<p>我们可以使用两个指针而不是一个指针。第一个指针从列表的开头向前移动 n+1 步，而第二个指针将从列表的开头出发。现在，这两个指针被 n 个结点分开。我们通过同时移动两个指针向前来保持这个恒定的间隔，直到第一个指针到达最后一个结点。此时第二个指针将指向从最后一个结点数起的第 n 个结点。我们重新链接第二个指针所引用的结点的 next 指针指向该结点的下下个结点。</p>\n<p><strong>参考代码</strong>：</p>\n<pre class="language-autoit"><code class="language-autoit">public ListNode <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> int n<span class="token punctuation">)</span>\n{\n    ListNode dummy <span class="token operator">=</span> new <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">;</span>\n    dummy<span class="token punctuation">.</span><span class="token keyword">next</span> <span class="token operator">=</span> head<span class="token comment">;</span>\n    ListNode first <span class="token operator">=</span> dummy<span class="token comment">;</span>\n    ListNode second <span class="token operator">=</span> dummy<span class="token comment">;</span>\n    <span class="token operator">/</span><span class="token operator">/</span> Advances first pointer so that the gap between first\n    <span class="token operator">and</span> second is n nodes apart\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">; i &lt;= n + 1; i++) {</span>\n        first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token keyword">next</span><span class="token comment">;</span>\n    }\n    <span class="token operator">/</span><span class="token operator">/</span> Move first <span class="token keyword">to</span> the end<span class="token punctuation">,</span> maintaining the gap\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>first !<span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> {\n        first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token keyword">next</span><span class="token comment">;</span>\n        second <span class="token operator">=</span> second<span class="token punctuation">.</span><span class="token keyword">next</span><span class="token comment">;</span>\n    }\n    second<span class="token punctuation">.</span><span class="token keyword">next</span> <span class="token operator">=</span> second<span class="token punctuation">.</span><span class="token keyword">next</span><span class="token punctuation">.</span><span class="token keyword">next</span><span class="token comment">;</span>\n    return dummy<span class="token punctuation">.</span><span class="token keyword">next</span><span class="token comment">;</span>\n}\n</code></pre>\n<p><strong>复杂度分析：</strong></p>\n<ul>\n<li>\n<p>时间复杂度：O(L)，该算法对含有 L 个结点的列表进行了一次遍历。因此时间复杂度为 O(L)。</p>\n</li>\n<li>\n<p>空间复杂度：O(1)，我们只用了常量级的额外空间。</p>\n</li>\n</ul>\n<h2 id="q23%E5%A6%82%E6%9E%9C%E8%AE%A9%E4%BD%A0%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E9%80%9A%E7%94%A8%E7%9A%84%E6%94%AF%E6%8C%81%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A7%92%E7%BA%A7%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D%E7%9A%84%E7%B3%BB%E7%BB%9F%E4%BD%A0%E4%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1">Q23：如果让你设计一个通用的、支持各种数据库秒级备份和恢复的系统，你会如何设计？<a class="anchor" href="#q23%E5%A6%82%E6%9E%9C%E8%AE%A9%E4%BD%A0%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E9%80%9A%E7%94%A8%E7%9A%84%E6%94%AF%E6%8C%81%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A7%92%E7%BA%A7%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D%E7%9A%84%E7%B3%BB%E7%BB%9F%E4%BD%A0%E4%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：千震／阿里云数据库高级技术专家</p>\n<p><strong>参考答案</strong>：开放性问题，无标准答案。</p>\n<h2 id="q24%E5%A6%82%E6%9E%9C%E8%AE%A9%E4%BD%A0%E6%9D%A5%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E6%95%B0%E6%8D%AE%E5%BA%93nosql-%E5%92%8C%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8B%E9%97%B4%E6%95%B0%E6%8D%AE%E5%AE%9E%E6%97%B6%E6%B5%81%E5%8A%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B5%81%E5%8F%8A%E5%A4%84%E7%90%86%E7%9A%84%E7%B3%BB%E7%BB%9F%E4%BD%A0%E4%BC%9A%E8%80%83%E8%99%91%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1">Q24：如果让你来设计一个支持数据库、NOSQL 和大数据之间数据实时流动的数据流及处理的系统，你会考虑哪些问题？如何设计？<a class="anchor" href="#q24%E5%A6%82%E6%9E%9C%E8%AE%A9%E4%BD%A0%E6%9D%A5%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E6%95%B0%E6%8D%AE%E5%BA%93nosql-%E5%92%8C%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8B%E9%97%B4%E6%95%B0%E6%8D%AE%E5%AE%9E%E6%97%B6%E6%B5%81%E5%8A%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B5%81%E5%8F%8A%E5%A4%84%E7%90%86%E7%9A%84%E7%B3%BB%E7%BB%9F%E4%BD%A0%E4%BC%9A%E8%80%83%E8%99%91%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：千震／阿里云数据库高级技术专家</p>\n<p><strong>参考答案</strong>：开放性问题，无标准答案。</p>\n<h2 id="q25%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E6%95%B0%E7%BB%84%E5%92%8C%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E8%BF%94%E5%9B%9E%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E7%B4%A2%E5%BC%95%E8%BF%99%E4%B8%A4%E4%B8%AA%E7%B4%A2%E5%BC%95%E6%8C%87%E5%90%91%E7%9A%84%E6%95%B0%E5%AD%97%E7%9A%84%E5%8A%A0%E5%92%8C%E7%AD%89%E4%BA%8E%E6%8C%87%E5%AE%9A%E7%9A%84%E6%95%B4%E6%95%B0%E9%9C%80%E8%A6%81%E6%9C%80%E4%BC%98%E7%9A%84%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95%E7%9A%84%E7%A9%BA%E9%97%B4%E5%92%8C%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6">Q25：给定一个整数数组和一个整数，返回两个数组的索引，这两个索引指向的数字的加和等于指定的整数。需要最优的算法，分析算法的空间和时间复杂度<a class="anchor" href="#q25%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E6%95%B0%E7%BB%84%E5%92%8C%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E8%BF%94%E5%9B%9E%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E7%B4%A2%E5%BC%95%E8%BF%99%E4%B8%A4%E4%B8%AA%E7%B4%A2%E5%BC%95%E6%8C%87%E5%90%91%E7%9A%84%E6%95%B0%E5%AD%97%E7%9A%84%E5%8A%A0%E5%92%8C%E7%AD%89%E4%BA%8E%E6%8C%87%E5%AE%9A%E7%9A%84%E6%95%B4%E6%95%B0%E9%9C%80%E8%A6%81%E6%9C%80%E4%BC%98%E7%9A%84%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95%E7%9A%84%E7%A9%BA%E9%97%B4%E5%92%8C%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6">§</a></h2>\n<p><strong>参考答案</strong>：</p>\n<pre class="language-autoit"><code class="language-autoit">public int<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> int target<span class="token punctuation">)</span> {\n    <span class="token function">if</span><span class="token punctuation">(</span>nums<span class="token operator">==</span><span class="token keyword">null</span> || nums<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span>\n        return new int<span class="token punctuation">[</span><span class="token punctuation">]</span>{<span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>}<span class="token comment">;</span>\n \n    HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> new HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n    <span class="token function">for</span><span class="token punctuation">(</span>int i<span class="token operator">=</span><span class="token number">0</span><span class="token comment">; i&lt;nums.length; i++){</span>\n        <span class="token function">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>{\n            return new int<span class="token punctuation">[</span><span class="token punctuation">]</span>{map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i}<span class="token comment">;</span>\n        }<span class="token keyword">else</span>{\n            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token comment">;</span>\n        }\n    }\n \n    return new int<span class="token punctuation">[</span><span class="token punctuation">]</span>{<span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>}<span class="token comment">;</span>\n}\n</code></pre>\n<p>分析：空间复杂度和时间复杂度均为 O(n)</p>\n<h2 id="q26%E5%81%87%E5%A6%82%E7%BB%99%E4%BD%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E4%BA%A7%E5%93%81%E4%BD%A0%E5%B0%86%E4%BB%8E%E5%93%AA%E4%BA%9B%E6%96%B9%E9%9D%A2%E6%9D%A5%E4%BF%9D%E9%9A%9C%E5%AE%83%E7%9A%84%E8%B4%A8%E9%87%8F">Q26：假如给你一个新产品，你将从哪些方面来保障它的质量？<a class="anchor" href="#q26%E5%81%87%E5%A6%82%E7%BB%99%E4%BD%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E4%BA%A7%E5%93%81%E4%BD%A0%E5%B0%86%E4%BB%8E%E5%93%AA%E4%BA%9B%E6%96%B9%E9%9D%A2%E6%9D%A5%E4%BF%9D%E9%9A%9C%E5%AE%83%E7%9A%84%E8%B4%A8%E9%87%8F">§</a></h2>\n<p><strong>出题人</strong>：阿里巴巴出题专家：晨晖 ／阿里云中间件技术部测试开发专家</p>\n<p><strong>参考答案</strong>：</p>\n<p>可以从代码开发、测试保障、线上质量三个方面来保障。</p>\n<p>在代码开发阶段，有单元测试、代码Review、静态代码扫描等；</p>\n<p>测试保障阶段，有功能测试、性能测试、高可用测试、稳定性测试、兼容性测试等；</p>\n<p>在线上质量方面，有灰度发布、紧急回滚、故障演练、线上监控和巡检等。</p>\n<h2 id="q27%E8%AF%B7%E8%AF%84%E4%BC%B0%E4%B8%80%E4%B8%8B%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C">Q27：请评估一下程序的执行结果？<a class="anchor" href="#q27%E8%AF%B7%E8%AF%84%E4%BC%B0%E4%B8%80%E4%B8%8B%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C">§</a></h2>\n<pre class="language-autoit"><code class="language-autoit">public class SynchronousQueueQuiz {\n    public <span class="token keyword">static</span> void <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> throws Exception {\n        BlockingQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> new\n        SynchronousQueue<span class="token operator">&lt;></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        System<span class="token punctuation">.</span> out <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        System<span class="token punctuation">.</span> out <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        System<span class="token punctuation">.</span> out <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        System<span class="token punctuation">.</span> out <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token comment">;</span>\n        System<span class="token punctuation">.</span> out <span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;</span>\n    }\n}\n\n</code></pre>\n<p>A. true true true 1 3</p>\n<p>B. true true true (阻塞)</p>\n<p>C. false false false null 0</p>\n<p>D. false false false (阻塞)</p>\n<p><strong>出题人</strong>：阿里巴巴出题专家：桃谷／阿里云中间件技术专家</p>\n<p><strong>参考答案</strong>：D</p>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#01%E9%98%BF%E9%87%8C%E7%AF%87" }, "01.\u963F\u91CC\u7BC7"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q1%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%AB%98%E6%95%88%E7%9A%84%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E9%80%86%E5%BA%8F%E8%BE%93%E5%87%BA" }, "Q1\uFF1A\u5982\u4F55\u5B9E\u73B0\u4E00\u4E2A\u9AD8\u6548\u7684\u5355\u5411\u94FE\u8868\u9006\u5E8F\u8F93\u51FA\uFF1F")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q2%E5%B7%B2%E7%9F%A5-sqrt-2%E7%BA%A6%E7%AD%89%E4%BA%8E-1414%E8%A6%81%E6%B1%82%E4%B8%8D%E7%94%A8%E6%95%B0%E5%AD%A6%E5%BA%93%E6%B1%82-sqrt-2%E7%B2%BE%E7%A1%AE%E5%88%B0%E5%B0%8F%E6%95%B0%E7%82%B9%E5%90%8E-10-%E4%BD%8D" }, "Q2\uFF1A\u5DF2\u77E5 sqrt (2)\u7EA6\u7B49\u4E8E 1.414\uFF0C\u8981\u6C42\u4E0D\u7528\u6570\u5B66\u5E93\uFF0C\u6C42 sqrt (2)\u7CBE\u786E\u5230\u5C0F\u6570\u70B9\u540E 10 \u4F4D\u3002"),
                        React.createElement("ol", null,
                            React.createElement("li", null,
                                React.createElement("a", { href: "#-%E8%80%83%E5%AF%9F%E7%82%B9" }, "* \u8003\u5BDF\u70B9")),
                            React.createElement("li", null,
                                React.createElement("a", { href: "#-%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95" }, "* \u89E3\u51B3\u529E\u6CD5"),
                                React.createElement("ol", null)))),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q3%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91bst%E6%89%BE%E5%88%B0%E6%A0%91%E4%B8%AD%E7%AC%AC-k-%E5%B0%8F%E7%9A%84%E8%8A%82%E7%82%B9" }, "Q3\uFF1A\u7ED9\u5B9A\u4E00\u4E2A\u4E8C\u53C9\u641C\u7D22\u6811(BST)\uFF0C\u627E\u5230\u6811\u4E2D\u7B2C K \u5C0F\u7684\u8282\u70B9\u3002"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q4lru-%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6" }, "Q4\uFF1ALRU \u7F13\u5B58\u673A\u5236")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q5%E5%85%B3%E4%BA%8E-epoll-%E5%92%8C-select-%E7%9A%84%E5%8C%BA%E5%88%AB%E5%93%AA%E4%BA%9B%E8%AF%B4%E6%B3%95%E6%98%AF%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%A4%9A%E9%80%89" }, "Q5\uFF1A\u5173\u4E8E epoll \u548C select \u7684\u533A\u522B\uFF0C\u54EA\u4E9B\u8BF4\u6CD5\u662F\u6B63\u786E\u7684\uFF1F\uFF08\u591A\u9009\uFF09")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q6%E4%BB%8E-innodb-%E7%9A%84%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90%E4%B8%BA%E4%BB%80%E4%B9%88%E7%B4%A2%E5%BC%95%E7%9A%84-key-%E9%95%BF%E5%BA%A6%E4%B8%8D%E8%83%BD%E5%A4%AA%E9%95%BF" }, "Q6\uFF1A\u4ECE innodb \u7684\u7D22\u5F15\u7ED3\u6784\u5206\u6790\uFF0C\u4E3A\u4EC0\u4E48\u7D22\u5F15\u7684 key \u957F\u5EA6\u4E0D\u80FD\u592A\u957F\uFF1F")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q7mysql-%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D%E5%88%B0%E4%BB%BB%E6%84%8F%E6%97%B6%E9%97%B4%E7%82%B9" }, "Q7\uFF1AMySQL \u7684\u6570\u636E\u5982\u4F55\u6062\u590D\u5230\u4EFB\u610F\u65F6\u95F4\u70B9\uFF1F")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q8nfs-%E5%92%8C-smb-%E6%98%AF%E6%9C%80%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%A4%E7%A7%8D-nasnetwork-attached-storage%E5%8D%8F%E8%AE%AE%E5%BD%93%E6%8A%8A%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%90%8C%E6%97%B6%E9%80%9A%E8%BF%87-nfs-%E5%92%8C-smb-%E5%8D%8F%E8%AE%AE%E5%85%B1%E4%BA%AB%E7%BB%99%E5%A4%9A%E4%B8%AA%E4%B8%BB%E6%9C%BA%E8%AE%BF%E9%97%AE%E6%97%B6%E4%BB%A5%E4%B8%8B%E5%93%AA%E4%BA%9B%E8%AF%B4%E6%B3%95%E6%98%AF%E9%94%99%E8%AF%AF%E7%9A%84%E5%A4%9A%E9%80%89" }, "Q8\uFF1ANFS \u548C SMB \u662F\u6700\u5E38\u89C1\u7684\u4E24\u79CD NAS\uFF08Network Attached Storage\uFF09\u534F\u8BAE\uFF0C\u5F53\u628A\u4E00\u4E2A\u6587\u4EF6\u7CFB\u7EDF\u540C\u65F6\u901A\u8FC7 NFS \u548C SMB \u534F\u8BAE\u5171\u4EAB\u7ED9\u591A\u4E2A\u4E3B\u673A\u8BBF\u95EE\u65F6\uFF0C\u4EE5\u4E0B\u54EA\u4E9B\u8BF4\u6CD5\u662F\u9519\u8BEF\u7684\uFF1A\uFF08\u591A\u9009\uFF09")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q9%E8%BE%93%E5%85%A5-ping-ip-%E5%90%8E%E6%95%B2%E5%9B%9E%E8%BD%A6%E5%8F%91%E5%8C%85%E5%89%8D%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88" }, "Q9\uFF1A\u8F93\u5165 ping IP \u540E\u6572\u56DE\u8F66\uFF0C\u53D1\u5305\u524D\u4F1A\u53D1\u751F\u4EC0\u4E48\uFF1F")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q10%E8%AF%B7%E8%A7%A3%E9%87%8A%E4%B8%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E9%B9%BF%E6%99%97%E5%8F%91%E5%B8%83%E6%81%8B%E6%83%85%E7%9A%84%E6%97%B6%E5%80%99%E5%BE%AE%E5%8D%9A%E7%B3%BB%E7%BB%9F%E4%BC%9A%E5%B4%A9%E6%BA%83%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3" }, "Q10\uFF1A\u8BF7\u89E3\u91CA\u4E0B\u4E3A\u4EC0\u4E48\u9E7F\u6657\u53D1\u5E03\u604B\u60C5\u7684\u65F6\u5019\uFF0C\u5FAE\u535A\u7CFB\u7EDF\u4F1A\u5D29\u6E83\uFF0C\u5982\u4F55\u89E3\u51B3\uFF1F")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q11%E7%8E%B0%E6%9C%89%E4%B8%80%E6%89%B9%E9%82%AE%E4%BB%B6%E9%9C%80%E8%A6%81%E5%8F%91%E9%80%81%E7%BB%99%E8%AE%A2%E9%98%85%E9%A1%BE%E5%AE%A2%E4%B8%94%E6%9C%89%E4%B8%80%E4%B8%AA%E9%9B%86%E7%BE%A4%E9%9B%86%E7%BE%A4%E7%9A%84%E8%8A%82%E7%82%B9%E6%95%B0%E4%B8%8D%E5%AE%9A%E4%BC%9A%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9%E7%BC%A9%E5%AE%B9%E6%9D%A5%E8%B4%9F%E8%B4%A3%E5%85%B7%E4%BD%93%E7%9A%84%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E4%BB%BB%E5%8A%A1%E5%A6%82%E4%BD%95%E8%AE%A9%E7%B3%BB%E7%BB%9F%E5%B0%BD%E5%BF%AB%E5%9C%B0%E5%AE%8C%E6%88%90%E5%8F%91%E9%80%81%E8%AF%B7%E8%AF%A6%E8%BF%B0%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88" }, "Q11\uFF1A\u73B0\u6709\u4E00\u6279\u90AE\u4EF6\u9700\u8981\u53D1\u9001\u7ED9\u8BA2\u9605\u987E\u5BA2\uFF0C\u4E14\u6709\u4E00\u4E2A\u96C6\u7FA4\uFF08\u96C6\u7FA4\u7684\u8282\u70B9\u6570\u4E0D\u5B9A\uFF0C\u4F1A\u52A8\u6001\u6269\u5BB9\u7F29\u5BB9\uFF09\u6765\u8D1F\u8D23\u5177\u4F53\u7684\u90AE\u4EF6\u53D1\u9001\u4EFB\u52A1\uFF0C\u5982\u4F55\u8BA9\u7CFB\u7EDF\u5C3D\u5FEB\u5730\u5B8C\u6210\u53D1\u9001\uFF1F\u8BF7\u8BE6\u8FF0\u6280\u672F\u65B9\u6848\uFF01")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q12%E6%9C%89%E4%B8%80%E6%89%B9%E6%B0%94%E8%B1%A1%E8%A7%82%E6%B5%8B%E7%AB%99%E7%8E%B0%E9%9C%80%E8%A6%81%E8%8E%B7%E5%8F%96%E8%BF%99%E4%BA%9B%E7%AB%99%E7%82%B9%E7%9A%84%E8%A7%82%E6%B5%8B%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%AD%98%E5%82%A8%E5%88%B0-hive-%E4%B8%AD%E4%BD%86%E6%98%AF%E6%B0%94%E8%B1%A1%E5%B1%80%E5%8F%AA%E6%8F%90%E4%BE%9B%E4%BA%86-api-%E6%9F%A5%E8%AF%A2%E6%AF%8F%E6%AC%A1%E5%8F%AA%E8%83%BD%E6%9F%A5%E8%AF%A2%E5%8D%95%E4%B8%AA%E8%A7%82%E6%B5%8B%E7%82%B9%E9%82%A3%E4%B9%88%E5%A6%82%E6%9E%9C%E8%83%BD%E5%A4%9F%E6%96%B9%E4%BE%BF%E5%BF%AB%E9%80%9F%E5%9C%B0%E8%8E%B7%E5%8F%96%E5%88%B0%E6%89%80%E6%9C%89%E7%9A%84%E8%A7%82%E6%B5%8B%E7%82%B9%E7%9A%84%E6%95%B0%E6%8D%AE" }, "Q12\uFF1A\u6709\u4E00\u6279\u6C14\u8C61\u89C2\u6D4B\u7AD9\uFF0C\u73B0\u9700\u8981\u83B7\u53D6\u8FD9\u4E9B\u7AD9\u70B9\u7684\u89C2\u6D4B\u6570\u636E\uFF0C\u5E76\u5B58\u50A8\u5230 Hive \u4E2D\u3002\u4F46\u662F\u6C14\u8C61\u5C40\u53EA\u63D0\u4F9B\u4E86 api \u67E5\u8BE2\uFF0C\u6BCF\u6B21\u53EA\u80FD\u67E5\u8BE2\u5355\u4E2A\u89C2\u6D4B\u70B9\u3002\u90A3\u4E48\u5982\u679C\u80FD\u591F\u65B9\u4FBF\u5FEB\u901F\u5730\u83B7\u53D6\u5230\u6240\u6709\u7684\u89C2\u6D4B\u70B9\u7684\u6570\u636E\uFF1F")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q13%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%A4%E9%87%91%E9%A2%9D%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%8A%A0%E6%9C%80%E5%A4%9A%E5%B0%8F%E6%95%B0%E7%82%B9%E4%B8%A4%E4%BD%8D" }, "Q13\uFF1A\u5982\u4F55\u5B9E\u73B0\u4E24\u91D1\u989D\u6570\u636E\u76F8\u52A0\uFF08\u6700\u591A\u5C0F\u6570\u70B9\u4E24\u4F4D\uFF09\uFF1F")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q14-%E5%85%B3%E4%BA%8E%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E5%BC%80%E6%94%BE%E9%97%AE%E9%A2%98" }, "Q14\uFF1A \u5173\u4E8E\u5E76\u884C\u8BA1\u7B97\u7684\u4E00\u4E9B\u57FA\u7840\u5F00\u653E\u95EE\u9898\u3002")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q15%E8%AF%B7%E8%AE%A1%E7%AE%97xilinx%E5%85%AC%E5%8F%B8vu9p%E8%8A%AF%E7%89%87%E7%9A%84%E7%AE%97%E5%8A%9B%E7%9B%B8%E5%BD%93%E4%BA%8E%E5%A4%9A%E5%B0%91tops%E7%BB%99%E5%87%BA%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%85%AC%E5%BC%8F" }, "Q15\uFF1A\u8BF7\u8BA1\u7B97XILINX\u516C\u53F8VU9P\u82AF\u7247\u7684\u7B97\u529B\u76F8\u5F53\u4E8E\u591A\u5C11TOPS\uFF0C\u7ED9\u51FA\u8BA1\u7B97\u8FC7\u7A0B\u4E0E\u516C\u5F0F\u3002")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q16%E4%B8%80%E9%A2%97%E7%8E%B0%E4%BB%A3%E5%A4%84%E7%90%86%E5%99%A8%E6%AF%8F%E7%A7%92%E5%A4%A7%E6%A6%82%E5%8F%AF%E4%BB%A5%E6%89%A7%E8%A1%8C%E5%A4%9A%E5%B0%91%E6%9D%A1%E7%AE%80%E5%8D%95%E7%9A%84mov%E6%8C%87%E4%BB%A4%E6%9C%89%E5%93%AA%E4%BA%9B%E4%B8%BB%E8%A6%81%E7%9A%84%E5%BD%B1%E5%93%8D%E5%9B%A0%E7%B4%A0" }, "Q16\uFF1A\u4E00\u9897\u73B0\u4EE3\u5904\u7406\u5668\uFF0C\u6BCF\u79D2\u5927\u6982\u53EF\u4EE5\u6267\u884C\u591A\u5C11\u6761\u7B80\u5355\u7684MOV\u6307\u4EE4\uFF0C\u6709\u54EA\u4E9B\u4E3B\u8981\u7684\u5F71\u54CD\u56E0\u7D20\uFF1F")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q17%E8%AF%B7%E5%88%86%E6%9E%90-maxcompute-%E4%BA%A7%E5%93%81%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E7%9A%84%E5%85%B3%E7%B3%BB%E5%BD%93%E5%89%8D%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%AE%A1%E7%AE%97%E5%B9%B3%E5%8F%B0%E7%B1%BB%E4%BA%A7%E5%93%81%E7%9A%84%E5%B8%82%E5%9C%BA%E7%8E%B0%E7%8A%B6%E5%92%8C%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF" }, "Q17\uFF1A\u8BF7\u5206\u6790 MaxCompute \u4EA7\u54C1\u4E0E\u5206\u5E03\u5F0F\u6280\u672F\u7684\u5173\u7CFB\u3001\u5F53\u524D\u5927\u6570\u636E\u8BA1\u7B97\u5E73\u53F0\u7C7B\u4EA7\u54C1\u7684\u5E02\u573A\u73B0\u72B6\u548C\u53D1\u5C55\u8D8B\u52BF\u3002")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q18-%E5%AF%B9%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E4%B8%AD%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E6%98%AF%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E7%AE%A1%E7%90%86%E4%BD%93%E7%B3%BB%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BC%9A%E5%AF%B9%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BA%94%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E5%BD%B1%E5%93%8D" }, "Q18\uFF1A \u5BF9\u5927\u6570\u636E\u5E73\u53F0\u4E2D\u7684\u5143\u6570\u636E\u7BA1\u7406\u662F\u600E\u4E48\u7406\u89E3\u7684\uFF0C\u5143\u6570\u636E\u6536\u96C6\u7BA1\u7406\u4F53\u7CFB\u662F\u600E\u4E48\u6837\u7684\uFF0C\u4F1A\u5BF9\u5927\u6570\u636E\u5E94\u7528\u6709\u4EC0\u4E48\u6837\u7684\u5F71\u54CD\u3002")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q19-%E4%BD%A0%E7%90%86%E8%A7%A3%E5%B8%B8%E8%A7%81%E5%A6%82%E9%98%BF%E9%87%8C%E5%92%8C%E5%8F%8B%E5%95%86%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB%E5%B7%AE%E5%BC%82%E4%BB%A5%E5%8F%8A%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF%E5%92%8C%E6%8A%80%E6%9C%AF%E7%93%B6%E9%A2%88%E5%9C%A8%E5%AD%98%E5%82%A8%E5%92%8C%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E6%96%B9%E9%9D%A2%E8%BF%9B%E8%A1%8C%E6%A6%82%E8%BF%B0" }, "Q19\uFF1A \u4F60\u7406\u89E3\u5E38\u89C1\u5982\u963F\u91CC\uFF0C\u548C\u53CB\u5546\u5927\u6570\u636E\u5E73\u53F0\u7684\u6280\u672F\u4F53\u7CFB\u5DEE\u5F02\u4EE5\u53CA\u53D1\u5C55\u8D8B\u52BF\u548C\u6280\u672F\u74F6\u9888\uFF0C\u5728\u5B58\u50A8\u548C\u8BA1\u7B97\u4E24\u4E2A\u65B9\u9762\u8FDB\u884C\u6982\u8FF0\u3002")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q20%E5%9C%A8%E4%BA%91%E8%AE%A1%E7%AE%97%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%9C%BA%E6%99%AF%E4%B8%AD%E6%AF%8F%E5%A4%A9%E8%BF%90%E8%A1%8C%E7%9D%80%E6%88%90%E5%8D%83%E4%B8%8A%E4%B8%87%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%AF%8F%E4%B8%AA%E4%BB%BB%E5%8A%A1%E9%83%BD%E8%A6%81%E8%BF%9B%E8%A1%8C-io-%E8%AF%BB%E5%86%99%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E4%B8%BA%E4%BA%86%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%BB%8F%E5%B8%B8%E4%BC%9A%E4%BF%9D%E8%AF%81%E9%AB%98%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E4%BB%BB%E5%8A%A1%E4%BC%98%E5%85%88%E6%89%A7%E8%A1%8C%E5%BD%93%E5%A4%9A%E4%B8%AA%E4%BD%9C%E4%B8%9A%E6%88%96%E7%94%A8%E6%88%B7%E8%AE%BF%E9%97%AE%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E6%97%B6%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E4%BC%98%E5%85%88%E7%BA%A7%E5%92%8C%E5%85%AC%E5%B9%B3%E6%80%A7" }, "Q20\uFF1A\u5728\u4E91\u8BA1\u7B97\u5927\u6570\u636E\u5904\u7406\u573A\u666F\u4E2D\uFF0C\u6BCF\u5929\u8FD0\u884C\u7740\u6210\u5343\u4E0A\u4E07\u7684\u4EFB\u52A1\uFF0C\u6BCF\u4E2A\u4EFB\u52A1\u90FD\u8981\u8FDB\u884C IO \u8BFB\u5199\u3002\u5B58\u50A8\u7CFB\u7EDF\u4E3A\u4E86\u66F4\u597D\u7684\u670D\u52A1\uFF0C\u7ECF\u5E38\u4F1A\u4FDD\u8BC1\u9AD8\u4F18\u5148\u7EA7\u7684\u4EFB\u52A1\u4F18\u5148\u6267\u884C\u3002\u5F53\u591A\u4E2A\u4F5C\u4E1A\u6216\u7528\u6237\u8BBF\u95EE\u5B58\u50A8\u7CFB\u7EDF\u65F6\uFF0C\u5982\u4F55\u4FDD\u8BC1\u4F18\u5148\u7EA7\u548C\u516C\u5E73\u6027\u3002")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q21%E6%9C%80%E5%A4%A7%E9%A2%91%E7%8E%87%E6%A0%88" }, "Q21\uFF1A\u6700\u5927\u9891\u7387\u6808\u3002")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q22%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-n-%E4%B8%AA%E8%8A%82%E7%82%B9%E5%B9%B6%E4%B8%94%E8%BF%94%E5%9B%9E%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E7%BB%93%E7%82%B9" }, "Q22\uFF1A\u7ED9\u5B9A\u4E00\u4E2A\u94FE\u8868\uFF0C\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C N \u4E2A\u8282\u70B9\uFF0C\u5E76\u4E14\u8FD4\u56DE\u94FE\u8868\u7684\u5934\u7ED3\u70B9\u3002")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q23%E5%A6%82%E6%9E%9C%E8%AE%A9%E4%BD%A0%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E9%80%9A%E7%94%A8%E7%9A%84%E6%94%AF%E6%8C%81%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A7%92%E7%BA%A7%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D%E7%9A%84%E7%B3%BB%E7%BB%9F%E4%BD%A0%E4%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1" }, "Q23\uFF1A\u5982\u679C\u8BA9\u4F60\u8BBE\u8BA1\u4E00\u4E2A\u901A\u7528\u7684\u3001\u652F\u6301\u5404\u79CD\u6570\u636E\u5E93\u79D2\u7EA7\u5907\u4EFD\u548C\u6062\u590D\u7684\u7CFB\u7EDF\uFF0C\u4F60\u4F1A\u5982\u4F55\u8BBE\u8BA1\uFF1F")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q24%E5%A6%82%E6%9E%9C%E8%AE%A9%E4%BD%A0%E6%9D%A5%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E6%95%B0%E6%8D%AE%E5%BA%93nosql-%E5%92%8C%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8B%E9%97%B4%E6%95%B0%E6%8D%AE%E5%AE%9E%E6%97%B6%E6%B5%81%E5%8A%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B5%81%E5%8F%8A%E5%A4%84%E7%90%86%E7%9A%84%E7%B3%BB%E7%BB%9F%E4%BD%A0%E4%BC%9A%E8%80%83%E8%99%91%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1" }, "Q24\uFF1A\u5982\u679C\u8BA9\u4F60\u6765\u8BBE\u8BA1\u4E00\u4E2A\u652F\u6301\u6570\u636E\u5E93\u3001NOSQL \u548C\u5927\u6570\u636E\u4E4B\u95F4\u6570\u636E\u5B9E\u65F6\u6D41\u52A8\u7684\u6570\u636E\u6D41\u53CA\u5904\u7406\u7684\u7CFB\u7EDF\uFF0C\u4F60\u4F1A\u8003\u8651\u54EA\u4E9B\u95EE\u9898\uFF1F\u5982\u4F55\u8BBE\u8BA1\uFF1F")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q25%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E6%95%B0%E7%BB%84%E5%92%8C%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E8%BF%94%E5%9B%9E%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E7%B4%A2%E5%BC%95%E8%BF%99%E4%B8%A4%E4%B8%AA%E7%B4%A2%E5%BC%95%E6%8C%87%E5%90%91%E7%9A%84%E6%95%B0%E5%AD%97%E7%9A%84%E5%8A%A0%E5%92%8C%E7%AD%89%E4%BA%8E%E6%8C%87%E5%AE%9A%E7%9A%84%E6%95%B4%E6%95%B0%E9%9C%80%E8%A6%81%E6%9C%80%E4%BC%98%E7%9A%84%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95%E7%9A%84%E7%A9%BA%E9%97%B4%E5%92%8C%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6" }, "Q25\uFF1A\u7ED9\u5B9A\u4E00\u4E2A\u6574\u6570\u6570\u7EC4\u548C\u4E00\u4E2A\u6574\u6570\uFF0C\u8FD4\u56DE\u4E24\u4E2A\u6570\u7EC4\u7684\u7D22\u5F15\uFF0C\u8FD9\u4E24\u4E2A\u7D22\u5F15\u6307\u5411\u7684\u6570\u5B57\u7684\u52A0\u548C\u7B49\u4E8E\u6307\u5B9A\u7684\u6574\u6570\u3002\u9700\u8981\u6700\u4F18\u7684\u7B97\u6CD5\uFF0C\u5206\u6790\u7B97\u6CD5\u7684\u7A7A\u95F4\u548C\u65F6\u95F4\u590D\u6742\u5EA6")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q26%E5%81%87%E5%A6%82%E7%BB%99%E4%BD%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E4%BA%A7%E5%93%81%E4%BD%A0%E5%B0%86%E4%BB%8E%E5%93%AA%E4%BA%9B%E6%96%B9%E9%9D%A2%E6%9D%A5%E4%BF%9D%E9%9A%9C%E5%AE%83%E7%9A%84%E8%B4%A8%E9%87%8F" }, "Q26\uFF1A\u5047\u5982\u7ED9\u4F60\u4E00\u4E2A\u65B0\u4EA7\u54C1\uFF0C\u4F60\u5C06\u4ECE\u54EA\u4E9B\u65B9\u9762\u6765\u4FDD\u969C\u5B83\u7684\u8D28\u91CF\uFF1F")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#q27%E8%AF%B7%E8%AF%84%E4%BC%B0%E4%B8%80%E4%B8%8B%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C" }, "Q27\uFF1A\u8BF7\u8BC4\u4F30\u4E00\u4E0B\u7A0B\u5E8F\u7684\u6267\u884C\u7ED3\u679C\uFF1F")))))),
    'author': "wangweidong",
    'contributors': [
        "wangweidong"
    ],
    'date': "2021-02-02T09:45:54.000Z",
    'updated': null,
    'excerpt': "Q1：如何实现一个高效的单向链表逆序输出？ 出题人：阿里巴巴出题专家：昀龙／阿里云弹性人工智能负责人 参考答案：下面是其中一种写法，也可以有不同的写法，比如递归等。供参考。 typedef struct node{ int data; struct nod...",
    'cover': undefined,
    'sidebar': [
        {
            "link": "interview/index.html",
            "title": "面霸心经",
            "children": [
                {
                    "text": "00.数据库篇",
                    "link": "interview/index.html",
                    "pagePath": "interview/README.md"
                },
                {
                    "text": "01.阿里篇",
                    "link": "interview/Alibaba.html",
                    "pagePath": "interview/Alibaba.md"
                },
                {
                    "text": "网络",
                    "link": "interview/HTTP.html",
                    "pagePath": "interview/HTTP.md"
                },
                {
                    "text": "数据结构",
                    "link": "interview/DataStructure.html",
                    "pagePath": "interview/DataStructure.md"
                },
                {
                    "text": "算法",
                    "link": "interview/Algorithm.html",
                    "pagePath": "interview/Algorithm.md"
                }
            ],
            "pagePath": "interview/README.md",
            "text": "00.数据库篇"
        }
    ],
    'blog': {
        "isPost": false,
        "posts": [],
        "categories": [],
        "tags": []
    },
    'gitalk': React.createElement(Gitalk, { admin: [
            'ViktorWong'
        ], clientID: "0af8ad0c8674b58c37c0", clientSecret: "fe697a9667fc2b49387bf550e4178b3eaa5b8859", id: "interview/Alibaba.html", owner: "ViktorWong", repo: "my-docs", title: "01.\u963F\u91CC\u7BC7" })
};
