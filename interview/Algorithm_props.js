import projectConfig from '/pagic.config.js';
import Gitalk from '/_gitalk.js';
export default {
    'prev': {
        "text": "数据结构",
        "link": "interview/DataStructure.html"
    },
    'next': undefined,
    config: { "root": "/", ...projectConfig, branch: 'master' },
    'pagePath': "interview/Algorithm.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "interview/Algorithm.html",
    'title': "算法",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1 id="%E7%AE%97%E6%B3%95">算法<a class="anchor" href="#%E7%AE%97%E6%B3%95">§</a></h1>\n<h2 id="%E6%8E%92%E5%BA%8F">排序<a class="anchor" href="#%E6%8E%92%E5%BA%8F">§</a></h2>\n<p>以下两个函数是排序中会用到的通用函数，就不一一写了</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">checkArray</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> array\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> rightValue <span class="token operator">=</span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span>\n  array<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>left<span class="token punctuation">]</span>\n  array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> rightValue\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8Fbubble-sort">冒泡排序（Bubble Sort）<a class="anchor" href="#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8Fbubble-sort">§</a></h3>\n<p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>\n<h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0">算法描述<a class="anchor" href="#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0">§</a></h4>\n<ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个；</li>\n<li>重复步骤 1~3，直到排序完成。</li>\n</ol>\n<h4 id="%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA">过程演示<a class="anchor" href="#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA">§</a></h4>\n<p><img src="/sortGif/BubbleSort.gif" alt="冒泡排序"></p>\n<h4 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0">代码实现<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0">§</a></h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">BubbleSort</span></span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">checkArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> array\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90">算法分析<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90">§</a></h4>\n<ul>\n<li>最佳情况：T(n) = O(n)</li>\n<li>最差情况：T(n) = O(n<sup>2</sup>)</li>\n<li>平均情况：T(n) = O(n<sup>2</sup>)</li>\n</ul>\n<h3 id="%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8Finsertion-sort">插入排序（Insertion Sort）<a class="anchor" href="#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8Finsertion-sort">§</a></h3>\n<p>插入排序是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用 in-place 排序（即只需用到 O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>\n<h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-1">算法描述<a class="anchor" href="#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-1">§</a></h4>\n<p>一般来说，插入排序都采用 in-place 在数组上实现。</p>\n<ol>\n<li>从第一个元素开始，该元素可以认为已经被排序；</li>\n<li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li>\n<li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li>\n<li>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；</li>\n<li>将新元素插入到该位置后；</li>\n<li>重复步骤 2~5。</li>\n</ol>\n<h4 id="%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-1">过程演示<a class="anchor" href="#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-1">§</a></h4>\n<p><img src="/sortGif/InsertionSort.gif" alt="插入排序"></p>\n<h4 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-1">代码实现<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-1">§</a></h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">InsertionSort</span></span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">checkArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> array\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-1">算法分析<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-1">§</a></h4>\n<ul>\n<li>最佳情况：T(n) = O(n)</li>\n<li>最坏情况：T(n) = O(n<sup>2</sup>)</li>\n<li>平均情况：T(n) = O(n<sup>2</sup>)</li>\n</ul>\n<h3 id="%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8Fshell-sort">希尔排序（Shell Sort）<a class="anchor" href="#%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8Fshell-sort">§</a></h3>\n<p>希尔排序是希尔在 1959 年提出的一种排序算法。希尔排序也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序，同时该算法是冲破 O(n<sup>2</sup>）的第一批算法之一。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。</p>\n<p>希尔排序是把记录按下表的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至 1 时，整个文件恰被分成一组，算法便终止。</p>\n<h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-2">算法描述<a class="anchor" href="#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-2">§</a></h4>\n<p>在此我们选择增量 gap=length/2，缩小增量继续以 gap = gap/2 的方式，这种增量选择我们可以用一个序列来表示，{n/2,(n/2)/2...1}，称为增量序列。</p>\n<p>希尔排序的增量序列的选择与证明是个数学难题，我们选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的。此处我们做示例使用希尔增量。</p>\n<p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p>\n<ul>\n<li>选择一个增量序列 t1，t2，…，tk，其中 ti&gt;tj，tk=1；</li>\n<li>按增量序列个数 k，对序列进行 k 趟排序；</li>\n<li>每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>\n</ul>\n<h4 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-2">代码实现<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-2">§</a></h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">ShellSort</span></span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token property-access">length</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> gap <span class="token operator">=</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">floor</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">=</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">floor</span><span class="token punctuation">(</span>gap <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i <span class="token operator">-</span> gap<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>gap <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> j<span class="token punctuation">,</span> gap <span class="token operator">+</span> j<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> array\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-2">过程演示<a class="anchor" href="#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-2">§</a></h4>\n<p><img src="/sortGif/ShellSort.png" alt="希尔排序"></p>\n<h4 id="%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-2">算法分析<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-2">§</a></h4>\n<ul>\n<li>最佳情况：T(n) = O(nlog2n)</li>\n<li>最坏情况：T(n) = O(nlog2n)</li>\n<li>平均情况：T(n) =O(nlog2n)</li>\n</ul>\n<h3 id="%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8Fselection-sort">选择排序（Selection Sort）<a class="anchor" href="#%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8Fselection-sort">§</a></h3>\n<p>选择排序是表现最稳定的排序算法之一，因为无论什么数据进去都是 O(n<sup>2</sup>) 的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</p>\n<p>选择排序是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>\n<h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-3">算法描述<a class="anchor" href="#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-3">§</a></h4>\n<p>n 个值的直接选择排序可经过 n-1 趟直接选择排序得到有序结果。</p>\n<ol>\n<li>初始状态：无序区为 R[1..n]，有序区为空；</li>\n<li>第 i 趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为 R[1..i-1]和 R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第 1 个记录 R 交换，使 R[1..i]和 R[i+1..n)分别变为记录个数增加 1 个的新有序区和记录个数减少 1 个的新无序区；</li>\n<li>n-1 趟结束，数组完成排序。</li>\n</ol>\n<h4 id="%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-3">过程演示<a class="anchor" href="#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-3">§</a></h4>\n<p><img src="/sortGif/SelectionSort.gif" alt="选择排序"></p>\n<h4 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-3">代码实现<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-3">§</a></h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">SelectionSort</span></span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">checkArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> minIndex <span class="token operator">=</span> i\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      minIndex <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">?</span> j <span class="token operator">:</span> minIndex\n    <span class="token punctuation">}</span>\n    <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> minIndex<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> array\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-3">算法分析<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-3">§</a></h4>\n<ul>\n<li>最佳情况：T(n) = O(n<sup>2</sup>)</li>\n<li>最差情况：T(n) = O(n<sup>2</sup>)</li>\n<li>平均情况：T(n) = O(n<sup>2</sup>)</li>\n</ul>\n<h3 id="%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8Fmerge-sort">归并排序（Merge Sort）<a class="anchor" href="#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8Fmerge-sort">§</a></h3>\n<p>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(nlogn）的时间复杂度。代价是需要额外的内存空间。</p>\n<p>归并排序的原理如下。递归的将数组两两分开直到最多包含两个元素，然后将数组排序合并，最终合并为排序好的数组。假设我有一组数组 [3, 1, 2, 8, 9, 7, 6]，中间数索引是 3，先排序数组 [3, 1, 2, 8] 。在这个左边数组上，继续拆分直到变成数组包含两个元素（如果数组长度是奇数的话，会有一个拆分数组只包含一个元素）。然后排序数组 [3, 1] 和 [2, 8] ，然后再排序数组 [1, 3, 2, 8] ，这样左边数组就排序完成，然后按照以上思路排序右边数组，最后将数组 [1, 2, 3, 8] 和 [6, 7, 9] 排序。</p>\n<h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-4">算法描述<a class="anchor" href="#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-4">§</a></h4>\n<ul>\n<li>把长度为 n 的输入序列分成两个长度为 n/2 的子序列；</li>\n<li>对这两个子序列分别采用归并排序；</li>\n<li>将两个排序好的子序列合并成一个最终的排序序列。</li>\n</ul>\n<h4 id="%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-4">过程演示<a class="anchor" href="#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-4">§</a></h4>\n<p><img src="/sortGif/MergeSort.gif" alt="归并算法"></p>\n<h4 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-4">代码实现<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-4">§</a></h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">checkArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>\n  <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token keyword control-flow">return</span> array\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 左右索引相同说明已经只有一个数</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> right<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n  <span class="token comment">// 等同于 `left + (right - left) / 2`</span>\n  <span class="token comment">// 相比 `(left + right) / 2` 来说更加安全，不会溢出</span>\n  <span class="token comment">// 使用位运算是因为位运算比四则运算快</span>\n  <span class="token keyword">let</span> mid <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>\n  <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>\n\n  <span class="token keyword">let</span> help <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">let</span> p1 <span class="token operator">=</span> left\n  <span class="token keyword">let</span> p2 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">?</span> array<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> array<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>p2 <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> help<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    array<span class="token punctuation">[</span>left <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> help<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> array\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-4">算法分析<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-4">§</a></h4>\n<ul>\n<li>最佳情况：T(n) = O(n)</li>\n<li>最差情况：T(n) = O(nlogn)</li>\n<li>平均情况：T(n) = O(nlogn)</li>\n</ul>\n<p>以上算法使用了递归的思想。递归的本质就是压栈，每递归执行一次函数，就将该函数的信息（比如参数，内部的变量，执行到的行数）压栈，直到遇到终止条件，然后出栈并继续执行函数。对于以上递归函数的调用轨迹如下</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// data = [3, 1, 2, 8, 9, 7, 6]</span>\n<span class="token function">mergeSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">// mid = 3</span>\n<span class="token function">mergeSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// mid = 1</span>\n<span class="token function">mergeSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// mid = 0</span>\n<span class="token function">mergeSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 遇到终止，回退到上一步</span>\n<span class="token function">mergeSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 遇到终止，回退到上一步</span>\n<span class="token comment">// 排序 p1 = 0, p2 = mid + 1 = 1</span>\n<span class="token comment">// 回退到 `mergeSort(data, 0, 3)` 执行下一个递归</span>\n<span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// mid = 2</span>\n<span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 遇到终止，回退到上一步</span>\n<span class="token comment">// 排序 p1 = 2, p2 = mid + 1 = 3</span>\n<span class="token comment">// 回退到 `mergeSort(data, 0, 3)` 执行合并逻辑</span>\n<span class="token comment">// 排序 p1 = 0, p2 = mid + 1 = 2</span>\n<span class="token comment">// 执行完毕回退</span>\n<span class="token comment">// 左边数组排序完毕，右边也是如上轨迹</span>\n</code></pre>\n<h3 id="%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8Fquick-sort">快速排序（Quick Sort）<a class="anchor" href="#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8Fquick-sort">§</a></h3>\n<p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p>\n<h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-5">算法描述<a class="anchor" href="#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-5">§</a></h4>\n<ol>\n<li>随机选取一个数组中的值作为基准值，从左至右取值与基准值对比大小。</li>\n<li>比基准值小的放数组左边，大的放右边，对比完成后将基准值和第一个比基准值大的值交换位置。然后将数组以基准值的位置分为两部分。</li>\n<li>继续递归以上操作。</li>\n</ol>\n<h4 id="%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-5">过程演示<a class="anchor" href="#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-5">§</a></h4>\n<p><img src="/sortGif/QuickSort.gif" alt="快速排序"></p>\n<h4 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-5">代码实现<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-5">§</a></h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">checkArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> array<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token punctuation">,</span> right<span class="token punctuation">)</span>\n    <span class="token comment">// 随机取值，然后和末尾交换，这样做比固定取一个位置的复杂度略低</span>\n    <span class="token keyword">let</span> indexs <span class="token operator">=</span> <span class="token function">part</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> indexs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> indexs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">part</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> less <span class="token operator">=</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> more <span class="token operator">=</span> right<span class="token punctuation">;</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> more<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 当前值比基准值小，`less` 和 `left` 都加一</span>\n     <span class="token operator">++</span>less<span class="token punctuation">;</span>\n       <span class="token operator">++</span>left<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 当前值比基准值大，将当前值和右边的值交换</span>\n      <span class="token comment">// 并且不改变 `left`，因为当前换过来的值还没有判断过大小</span>\n      <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token operator">--</span>more<span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 和基准值相同，只移动下标</span>\n      left<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 将基准值和比基准值大的第一个值交换位置</span>\n  <span class="token comment">// 这样数组就变成 `[比基准值小, 基准值, 比基准值大]`</span>\n  <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> right<span class="token punctuation">,</span> more<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span>less<span class="token punctuation">,</span> more<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-5">算法分析<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-5">§</a></h4>\n<p>该算法的复杂度和归并排序是相同的，但是额外空间复杂度比归并排序少，只需 O(logn)，并且相比归并排序来说，所需的常数时间也更少。</p>\n<h3 id="%E5%A0%86%E6%8E%92%E5%BA%8Fheap-sort">堆排序（Heap Sort）<a class="anchor" href="#%E5%A0%86%E6%8E%92%E5%BA%8Fheap-sort">§</a></h3>\n<p>堆排序利用了二叉堆的特性来做，二叉堆通常用数组表示，并且二叉堆是一颗完全二叉树（所有叶节点（最底层的节点）都是从左往右顺序排序，并且其他层的节点都是满的）。二叉堆又分为大根堆与小根堆。</p>\n<ul>\n<li>大根堆是某个节点的所有子节点的值都比他小</li>\n<li>小根堆是某个节点的所有子节点的值都比他大</li>\n</ul>\n<p>堆排序的原理就是组成一个大根堆或者小根堆。以小根堆为例，某个节点的左边子节点索引是 i _ 2 + 1，右边是 i _ 2 + 2，父节点是 (i - 1) /2。</p>\n<h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-6">算法描述<a class="anchor" href="#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-6">§</a></h4>\n<ol>\n<li>首先遍历数组，判断该节点的父节点是否比他小，如果小就交换位置并继续判断，直到他的父节点比他大</li>\n<li>重新以上操作 1，直到数组首位是最大值</li>\n<li>然后将首位和末尾交换位置并将数组长度减一，表示数组末尾已是最大值，不需要再比较大小</li>\n<li>对比左右节点哪个大，然后记住大的节点的索引并且和父节点对比大小，如果子节点大就交换位置</li>\n<li>重复以上操作 3 - 4 直到整个数组都是大根堆。</li>\n</ol>\n<h4 id="%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-6">过程演示<a class="anchor" href="#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-6">§</a></h4>\n<p><img src="/sortGif/HeapSort.gif" alt="堆排序"></p>\n<h4 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-6">代码实现<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-6">§</a></h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">heap</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">checkArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>\n  <span class="token comment">// 将最大值交换到首位</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">heapInsert</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> size <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token property-access">length</span>\n  <span class="token comment">// 交换首位和末尾</span>\n  <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">--</span>size<span class="token punctuation">)</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">heapify</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span>\n    <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">--</span>size<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> array\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">heapInsert</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 如果当前节点比父节点大，就交换</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token comment">// 将索引变成父节点</span>\n    index <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> index<span class="token punctuation">,</span> size</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 判断左右节点大小</span>\n    <span class="token keyword">let</span> largest <span class="token operator">=</span>\n      left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> left\n    <span class="token comment">// 判断子节点和父节点大小</span>\n    largest <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">?</span> largest <span class="token operator">:</span> index\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>largest <span class="token operator">===</span> index<span class="token punctuation">)</span> <span class="token keyword control-flow">break</span>\n    <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> index<span class="token punctuation">,</span> largest<span class="token punctuation">)</span>\n    index <span class="token operator">=</span> largest\n    left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>以上代码实现了小根堆，如果需要实现大根堆，只需要把节点对比反一下就好。</p>\n<h4 id="%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-6">算法分析<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-6">§</a></h4>\n<ul>\n<li>最佳情况：T(n) = O(nlogn)</li>\n<li>最差情况：T(n) = O(nlogn)</li>\n<li>平均情况：T(n) = O(nlogn)</li>\n</ul>\n<h3 id="%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8Fcounting-sort">计数排序（Counting Sort）<a class="anchor" href="#%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8Fcounting-sort">§</a></h3>\n<p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p>\n<p>计数排序是一种稳定的排序算法。计数排序使用一个额外的数组 C，其中第 i 个元素是待排序数组 A 中值等于 i 的元素的个数。然后根据数组 C 来将 A 中的元素排到正确的位置。它只能对整数进行排序。</p>\n<h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-7">算法描述<a class="anchor" href="#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-7">§</a></h4>\n<ol>\n<li>找出待排序的数组中最大和最小的元素；</li>\n<li>统计数组中每个值为 i 的元素出现的次数，存入数组 C 的第 i 项；</li>\n<li>对所有的计数累加（从 C 中的第一个元素开始，每一项和前一项相加）；</li>\n<li>反向填充目标数组：将每个元素 i 放在新数组的第 C(i)项，每放一个元素就将 C(i)减去 1。</li>\n</ol>\n<h4 id="%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-7">过程演示<a class="anchor" href="#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-7">§</a></h4>\n<p><img src="/sortGif/CountingSort.gif" alt="计数排序"></p>\n<h4 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-7">代码实现<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-7">§</a></h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">countingSort</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">checkArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>\n  <span class="token keyword">let</span> bias<span class="token punctuation">,</span>\n    min <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    max <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      max <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      min <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  bias <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> min\n  <span class="token keyword">let</span> bucket <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    bucket<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> bias<span class="token punctuation">]</span><span class="token operator">++</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    i <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> bias\n      bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span>\n      index<span class="token operator">++</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      i<span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> array\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-7">算法分析<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-7">§</a></h4>\n<p>当输入的元素是 n 个 0 到 k 之间的整数时，它的运行时间是 O(n + k)。计数排序不是比较排序，排序的速度快于任何比较排序算法。由于用来计数的数组 C 的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上 1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。</p>\n<ul>\n<li>最佳情况：T(n) = O(n+k)</li>\n<li>最差情况：T(n) = O(n+k)</li>\n<li>平均情况：T(n) = O(n+k)</li>\n</ul>\n<h3 id="%E6%A1%B6%E6%8E%92%E5%BA%8Fbucket-sort">桶排序（Bucket Sort）<a class="anchor" href="#%E6%A1%B6%E6%8E%92%E5%BA%8Fbucket-sort">§</a></h3>\n<p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。</p>\n<p>桶排序的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排</p>\n<h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-8">算法描述<a class="anchor" href="#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-8">§</a></h4>\n<ol>\n<li>人为设置一个 BucketSize，作为每个桶所能放置多少个不同数值（例如当 BucketSize==5 时，该桶可以存放｛1,2,3,4,5｝这几种数字，但是容量不限，即可以存放 100 个 3）；</li>\n<li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li>\n<li>对每个不是空的桶进行排序，可以使用其它排序方法，也可以递归使用桶排序；</li>\n<li>从不是空的桶里把排好序的数据拼接起来。</li>\n</ol>\n<p>注意，如果递归使用桶排序为各个桶排序，则当桶数量为 1 时要手动减小 BucketSize 增加下一循环桶的数量，否则会陷入死循环，导致内存溢出。</p>\n<h4 id="%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-8">过程演示<a class="anchor" href="#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-8">§</a></h4>\n<p><img src="/sortGif/BucketSort.png" alt="桶排序"></p>\n<h4 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-8">代码实现<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-8">§</a></h4>\n<p>数组替代链表版本</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> bucketCount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> arr\n  <span class="token punctuation">}</span>\n  bucketCount <span class="token operator">=</span> bucketCount <span class="token operator">||</span> <span class="token number">10</span>\n  <span class="token comment">//初始化桶</span>\n  <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">,</span>\n    buckets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    min <span class="token operator">=</span> min <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> min <span class="token operator">:</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    max <span class="token operator">=</span> max <span class="token operator">>=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> max <span class="token operator">:</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//求出每一个桶的数值范围</span>\n  <span class="token keyword">var</span> space <span class="token operator">=</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> bucketCount\n  <span class="token comment">//将数值装入桶中</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//找到相应的桶序列</span>\n    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> space<span class="token punctuation">)</span>\n    <span class="token comment">//判断是否桶中已经有数值</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//数组从小到大排列</span>\n      <span class="token keyword">var</span> bucket <span class="token operator">=</span> buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span>\n      <span class="token keyword">var</span> k <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span>\n      <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>k <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>\n        k<span class="token operator">--</span>\n      <span class="token punctuation">}</span>\n      buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">//新增数值入桶，暂时用数组模拟链表</span>\n      buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n      buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//开始合并数组</span>\n  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> bucketCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    n<span class="token operator">++</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> result\n<span class="token punctuation">}</span>\n</code></pre>\n<p>模拟链表实现版本</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token constant">L</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'linklist\'</span><span class="token punctuation">)</span> <span class="token comment">//链表</span>\n<span class="token keyword">function</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> bucketCount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> arr\n  <span class="token punctuation">}</span>\n  bucketCount <span class="token operator">=</span> bucketCount <span class="token operator">||</span> <span class="token number">10</span>\n  <span class="token comment">//初始化桶</span>\n  <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">,</span>\n    buckets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    min <span class="token operator">=</span> min <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> min <span class="token operator">:</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    max <span class="token operator">=</span> max <span class="token operator">>=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> max <span class="token operator">:</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//求出每一个桶的数值范围</span>\n  <span class="token keyword">var</span> space <span class="token operator">=</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> bucketCount\n  <span class="token comment">//将数值装入桶中</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//找到相应的桶序列</span>\n    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> space<span class="token punctuation">)</span>\n    <span class="token comment">//判断是否桶中已经有数值</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//数组从小到大排列</span>\n      <span class="token keyword">var</span> bucket <span class="token operator">=</span> buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span>\n      <span class="token keyword">var</span> insert <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">//插入标石</span>\n      <span class="token constant">L</span><span class="token punctuation">.</span><span class="token method function property-access">reTraversal</span><span class="token punctuation">(</span>bucket<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> item<span class="token punctuation">.</span><span class="token property-access">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">//小于，左边插入</span>\n          <span class="token constant">L</span><span class="token punctuation">.</span><span class="token method function property-access">append</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token function">_val</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          insert <span class="token operator">=</span> <span class="token boolean">true</span>\n          <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//退出遍历</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>insert<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//大于，右边插入</span>\n        <span class="token constant">L</span><span class="token punctuation">.</span><span class="token method function property-access">append</span><span class="token punctuation">(</span>bucket<span class="token punctuation">,</span> <span class="token function">_val</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> bucket <span class="token operator">=</span> <span class="token constant">L</span><span class="token punctuation">.</span><span class="token method function property-access">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token constant">L</span><span class="token punctuation">.</span><span class="token method function property-access">append</span><span class="token punctuation">(</span>bucket<span class="token punctuation">,</span> <span class="token function">_val</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> bucket <span class="token comment">//链表实现</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//开始合并数组</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token constant">L</span><span class="token punctuation">.</span><span class="token method function property-access">reTraversal</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// console.log(i+":"+item.v);</span>\n      result<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token property-access">v</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token comment">//链表存储对象</span>\n<span class="token keyword">function</span> <span class="token function">_val</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n    v<span class="token operator">:</span> v\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>其中，linklist 为引用的第三方库，地址 <a href="https://github.com/dead-horse/js-linklist">linklist</a></p>\n<h4 id="%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-8">算法分析<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-8">§</a></h4>\n<p>桶排序最好情况下使用线性时间 O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为 O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。</p>\n<ul>\n<li>最佳情况：T(n) = O(n+k)</li>\n<li>最差情况：T(n) = O(n+k)</li>\n<li>平均情况：T(n) = O(n2)</li>\n</ul>\n<h3 id="%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8Fradix-sort">基数排序（Radix Sort）<a class="anchor" href="#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8Fradix-sort">§</a></h3>\n<p>基数排序也是非比较的排序算法，对每一位进行排序，从最低位开始排序，复杂度为 O(kn),为数组长度，k 为数组中的数的最大的位数；</p>\n<p>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以是稳定的。</p>\n<h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-9">算法描述<a class="anchor" href="#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-9">§</a></h4>\n<ol>\n<li>取得数组中的最大数，并取得位数；</li>\n<li>arr 为原始数组，从最低位开始取每个位组成 radix 数组；</li>\n<li>对 radix 进行计数排序（利用计数排序适用于小范围数的特点）；</li>\n</ol>\n<h4 id="%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-9">过程演示<a class="anchor" href="#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-9">§</a></h4>\n<p><img src="/sortGif/RadixSort.gif" alt="基数排序"></p>\n<h4 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-9">代码实现<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-9">§</a></h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> maxDigit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> mod <span class="token operator">=</span> <span class="token number">10</span>\n  <span class="token keyword">var</span> dev <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">time</span><span class="token punctuation">(</span><span class="token string">\'基数排序耗时\'</span><span class="token punctuation">)</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxDigit<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> dev <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">,</span> mod <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> bucket <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">/</span> dev<span class="token punctuation">)</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>counter<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        counter<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n      counter<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> pos <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> counter<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>counter<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">=</span> counter<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          array<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">timeEnd</span><span class="token punctuation">(</span><span class="token string">\'基数排序耗时\'</span><span class="token punctuation">)</span>\n  <span class="token keyword control-flow">return</span> array\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-9">算法分析<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-9">§</a></h4>\n<ul>\n<li>最佳情况：T(n) = O(n * k)</li>\n<li>最差情况：T(n) = O(n * k)</li>\n<li>平均情况：T(n) = O(n * k)</li>\n</ul>\n<p>基数排序有两种方法：</p>\n<ul>\n<li>MSD 从高位开始进行排序</li>\n<li>LSD 从低位开始进行排序</li>\n</ul>\n<h3 id="%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F-vs-%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F-vs-%E6%A1%B6%E6%8E%92%E5%BA%8F">基数排序 vs 计数排序 vs 桶排序<a class="anchor" href="#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F-vs-%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F-vs-%E6%A1%B6%E6%8E%92%E5%BA%8F">§</a></h3>\n<p>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p>\n<ul>\n<li>基数排序：根据键值的每位数字来分配桶</li>\n<li>计数排序：每个桶只存储单一键值</li>\n<li>桶排序：每个桶存储一定范围的数值</li>\n</ul>\n<h2 id="%E7%9F%AD%E9%93%BE%E6%8E%A5%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0">短链接原理及实现<a class="anchor" href="#%E7%9F%AD%E9%93%BE%E6%8E%A5%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0">§</a></h2>\n<h3 id="%E4%BB%80%E4%B9%88%E6%98%AF%E7%9F%AD%E9%93%BE%E6%8E%A5">什么是短链接<a class="anchor" href="#%E4%BB%80%E4%B9%88%E6%98%AF%E7%9F%AD%E9%93%BE%E6%8E%A5">§</a></h3>\n<blockquote>\n<p>就是把<code>普通网址</code>，转换成比较短的网址。比如：<code>https://t.cn/zyqd5JGm</code> 这种，在微博这些限制字数的应用里。好处不言而喻。短、字符少、美观、便于发布、传播。</p>\n</blockquote>\n<ul>\n<li>百度短网址服务 <a href="http://dwz.cn/">http://dwz.cn/</a></li>\n<li>谷歌短网址服务 <a href="https://goo.gl/">https://goo.gl/</a></li>\n</ul>\n<h3 id="%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90">原理解析<a class="anchor" href="#%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90">§</a></h3>\n<p>当我们在浏览器里输入 ·<a href="https://t.cn/zyqd5JGm%60">https://t.cn/zyqd5JGm`</a> 时</p>\n<ol>\n<li>DNS 首先解析获得 <code>http://t.cn</code> 的 IP 地址</li>\n<li>当 DNS 获得 IP 地址以后（比如：<code>116.211.169.137</code>），会向这个地址发送 <code>HTTP</code> <code>GET</code> 请求，查询短码 <code>zyqd5JGm</code></li>\n<li><code>http://t.cn</code> 服务器会通过短码 <code>zyqd5JGm</code> 获取对应的长 URL</li>\n<li>请求通过 <code>HTTP</code> （301 或 302） 转到对应的长 URL <a href="https://www.itdongdong.com">https://www.itdongdong.com</a> 。</li>\n</ol>\n<p>::: tip\n<strong>重定向的问题(301还是302)</strong></p>\n<p><code>301</code> 是永久重定向，<code>302</code> 是临时重定向。\n因为短地址一经生成就不会变化，所以用 <code>301</code> 是符合 <code>http</code> 语义的。同时对服务器压力也会有一定减少。\n但是如果使用了 <code>301</code>，就无法统计到短地址被点击的次数了。而这个点击次数是一个非常有意思的大数据分析数据源。能够分析出的东西非常非常多。所以选择<code>302</code>虽然会增加服务器压力，但是也是一个很好的选择。</p>\n<p>具体选择，可以根据自己的业务需求来选择！</p>\n<p>:::</p>\n<h3 id="%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0">算法实现<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0">§</a></h3>\n<h4 id="hash%E5%AE%9E%E7%8E%B0">Hash实现<a class="anchor" href="#hash%E5%AE%9E%E7%8E%B0">§</a></h4>\n<p>通过一定方式将任意长的文本转化为一个固定长的字符串，只要目标文本长度适当，那么我们对于不同的输入通过哈希几乎(注意是几乎)不可能得到对应同一个字符串．通过对长链接进行Hash运算，将Hash值作为这个长链接的唯一标示．但是通过Hash实现可能会造成碰撞．不一样的长网址缩短成了同一个短网址，那也就做不到复原了．</p>\n<p>对于碰撞问题，有一种缓冲方法就是在呈现碰撞了以后后边在增加随机字符，随机字符的增加能够缓解碰撞的疑问，但是这终究是一种缓冲的办法，没有彻底解决碰撞．</p>\n<h4 id="%E8%87%AA%E5%A2%9E%E5%BA%8F%E5%88%97%E7%AE%97%E6%B3%95">自增序列算法<a class="anchor" href="#%E8%87%AA%E5%A2%9E%E5%BA%8F%E5%88%97%E7%AE%97%E6%B3%95">§</a></h4>\n<p>自增序列算法也叫永不重复算法。</p>\n<p>设置 id 自增，一个 10进制 id 对应一个 62进制的数值，1对1，也就不会出现重复的情况。这个利用的就是低进制转化为高进制时，字符数会减少的特性。</p>\n<p>短址的长度一般设为 6 位，而每一位是由 [a - z, A - Z, 0 - 9] 总共 62 个字母组成的，所以 6 位的话，总共会有 62^6 ~= 568亿种组合，基本上够用了。</p>\n<p>附上一个进制转换工具 <a href="http://tool.lu/hexconvert/">http://tool.lu/hexconvert/</a></p>\n<h4 id="%E6%91%98%E8%A6%81%E7%AE%97%E6%B3%95">摘要算法<a class="anchor" href="#%E6%91%98%E8%A6%81%E7%AE%97%E6%B3%95">§</a></h4>\n<ol>\n<li>将长网址 <code>md5</code> 生成 32 位签名串,分为 4 段, 每段 8 个字节</li>\n<li>对这四段循环处理, 取 8 个字节, 将他看成 16 进制串与 0x3fffffff(30位1) 与操作, 即超过 30 位的忽略处理</li>\n<li>这 30 位分成 6 段, 每 5 位的数字作为字母表的索引取得特定字符, 依次进行获得 6 位字符串</li>\n<li>总的 <code>md5</code> 串可以获得 4 个 6 位串,取里面的任意一个就可作为这个长 url 的短 url 地址</li>\n</ol>\n<p>这种算法,虽然会生成4个,但是仍然存在重复几率</p>\n<h4 id="%E4%B8%A4%E7%A7%8D%E7%AE%97%E6%B3%95%E5%AF%B9%E6%AF%94">两种算法对比<a class="anchor" href="#%E4%B8%A4%E7%A7%8D%E7%AE%97%E6%B3%95%E5%AF%B9%E6%AF%94">§</a></h4>\n<p>第一种算法的好处就是简单好理解，永不重复。但是短码的长度不固定，随着 id 变大从一位长度开始递增。如果非要让短码长度固定也可以就是让 id 从指定的数字开始递增就可以了。百度短网址用的这种算法。</p>\n<p>第二种算法，存在碰撞（重复）的可能性，虽然几率很小。短码位数是比较固定的。不会从一位长度递增到多位的。据说微博使用的这种算法。</p>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement("link", { href: "/favicon.png", rel: "icon", type: "image/png" }),
        React.createElement("link", { crossOrigin: "anonymous", href: "https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css", integrity: "sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X", rel: "stylesheet" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0", id: "%E7%AE%97%E6%B3%95" },
        "\u7B97\u6CD5",
        React.createElement("a", { className: "anchor", href: "#%E7%AE%97%E6%B3%95" }, "\u00A7")),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E6%8E%92%E5%BA%8F">排序<a class="anchor" href="#%E6%8E%92%E5%BA%8F">§</a></h2>\n<p>以下两个函数是排序中会用到的通用函数，就不一一写了</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">checkArray</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> array\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> rightValue <span class="token operator">=</span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span>\n  array<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>left<span class="token punctuation">]</span>\n  array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> rightValue\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8Fbubble-sort">冒泡排序（Bubble Sort）<a class="anchor" href="#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8Fbubble-sort">§</a></h3>\n<p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>\n<h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0">算法描述<a class="anchor" href="#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0">§</a></h4>\n<ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个；</li>\n<li>重复步骤 1~3，直到排序完成。</li>\n</ol>\n<h4 id="%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA">过程演示<a class="anchor" href="#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA">§</a></h4>\n<p><img src="/sortGif/BubbleSort.gif" alt="冒泡排序"></p>\n<h4 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0">代码实现<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0">§</a></h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">BubbleSort</span></span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">checkArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> array\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90">算法分析<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90">§</a></h4>\n<ul>\n<li>最佳情况：T(n) = O(n)</li>\n<li>最差情况：T(n) = O(n<sup>2</sup>)</li>\n<li>平均情况：T(n) = O(n<sup>2</sup>)</li>\n</ul>\n<h3 id="%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8Finsertion-sort">插入排序（Insertion Sort）<a class="anchor" href="#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8Finsertion-sort">§</a></h3>\n<p>插入排序是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用 in-place 排序（即只需用到 O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>\n<h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-1">算法描述<a class="anchor" href="#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-1">§</a></h4>\n<p>一般来说，插入排序都采用 in-place 在数组上实现。</p>\n<ol>\n<li>从第一个元素开始，该元素可以认为已经被排序；</li>\n<li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li>\n<li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li>\n<li>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；</li>\n<li>将新元素插入到该位置后；</li>\n<li>重复步骤 2~5。</li>\n</ol>\n<h4 id="%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-1">过程演示<a class="anchor" href="#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-1">§</a></h4>\n<p><img src="/sortGif/InsertionSort.gif" alt="插入排序"></p>\n<h4 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-1">代码实现<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-1">§</a></h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">InsertionSort</span></span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">checkArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> array\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-1">算法分析<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-1">§</a></h4>\n<ul>\n<li>最佳情况：T(n) = O(n)</li>\n<li>最坏情况：T(n) = O(n<sup>2</sup>)</li>\n<li>平均情况：T(n) = O(n<sup>2</sup>)</li>\n</ul>\n<h3 id="%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8Fshell-sort">希尔排序（Shell Sort）<a class="anchor" href="#%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8Fshell-sort">§</a></h3>\n<p>希尔排序是希尔在 1959 年提出的一种排序算法。希尔排序也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序，同时该算法是冲破 O(n<sup>2</sup>）的第一批算法之一。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。</p>\n<p>希尔排序是把记录按下表的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至 1 时，整个文件恰被分成一组，算法便终止。</p>\n<h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-2">算法描述<a class="anchor" href="#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-2">§</a></h4>\n<p>在此我们选择增量 gap=length/2，缩小增量继续以 gap = gap/2 的方式，这种增量选择我们可以用一个序列来表示，{n/2,(n/2)/2...1}，称为增量序列。</p>\n<p>希尔排序的增量序列的选择与证明是个数学难题，我们选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的。此处我们做示例使用希尔增量。</p>\n<p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p>\n<ul>\n<li>选择一个增量序列 t1，t2，…，tk，其中 ti&gt;tj，tk=1；</li>\n<li>按增量序列个数 k，对序列进行 k 趟排序；</li>\n<li>每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>\n</ul>\n<h4 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-2">代码实现<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-2">§</a></h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">ShellSort</span></span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token property-access">length</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> gap <span class="token operator">=</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">floor</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">=</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">floor</span><span class="token punctuation">(</span>gap <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i <span class="token operator">-</span> gap<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>gap <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> j<span class="token punctuation">,</span> gap <span class="token operator">+</span> j<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> array\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-2">过程演示<a class="anchor" href="#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-2">§</a></h4>\n<p><img src="/sortGif/ShellSort.png" alt="希尔排序"></p>\n<h4 id="%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-2">算法分析<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-2">§</a></h4>\n<ul>\n<li>最佳情况：T(n) = O(nlog2n)</li>\n<li>最坏情况：T(n) = O(nlog2n)</li>\n<li>平均情况：T(n) =O(nlog2n)</li>\n</ul>\n<h3 id="%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8Fselection-sort">选择排序（Selection Sort）<a class="anchor" href="#%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8Fselection-sort">§</a></h3>\n<p>选择排序是表现最稳定的排序算法之一，因为无论什么数据进去都是 O(n<sup>2</sup>) 的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</p>\n<p>选择排序是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>\n<h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-3">算法描述<a class="anchor" href="#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-3">§</a></h4>\n<p>n 个值的直接选择排序可经过 n-1 趟直接选择排序得到有序结果。</p>\n<ol>\n<li>初始状态：无序区为 R[1..n]，有序区为空；</li>\n<li>第 i 趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为 R[1..i-1]和 R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第 1 个记录 R 交换，使 R[1..i]和 R[i+1..n)分别变为记录个数增加 1 个的新有序区和记录个数减少 1 个的新无序区；</li>\n<li>n-1 趟结束，数组完成排序。</li>\n</ol>\n<h4 id="%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-3">过程演示<a class="anchor" href="#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-3">§</a></h4>\n<p><img src="/sortGif/SelectionSort.gif" alt="选择排序"></p>\n<h4 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-3">代码实现<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-3">§</a></h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">SelectionSort</span></span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">checkArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> minIndex <span class="token operator">=</span> i\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      minIndex <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">?</span> j <span class="token operator">:</span> minIndex\n    <span class="token punctuation">}</span>\n    <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> minIndex<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> array\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-3">算法分析<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-3">§</a></h4>\n<ul>\n<li>最佳情况：T(n) = O(n<sup>2</sup>)</li>\n<li>最差情况：T(n) = O(n<sup>2</sup>)</li>\n<li>平均情况：T(n) = O(n<sup>2</sup>)</li>\n</ul>\n<h3 id="%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8Fmerge-sort">归并排序（Merge Sort）<a class="anchor" href="#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8Fmerge-sort">§</a></h3>\n<p>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(nlogn）的时间复杂度。代价是需要额外的内存空间。</p>\n<p>归并排序的原理如下。递归的将数组两两分开直到最多包含两个元素，然后将数组排序合并，最终合并为排序好的数组。假设我有一组数组 [3, 1, 2, 8, 9, 7, 6]，中间数索引是 3，先排序数组 [3, 1, 2, 8] 。在这个左边数组上，继续拆分直到变成数组包含两个元素（如果数组长度是奇数的话，会有一个拆分数组只包含一个元素）。然后排序数组 [3, 1] 和 [2, 8] ，然后再排序数组 [1, 3, 2, 8] ，这样左边数组就排序完成，然后按照以上思路排序右边数组，最后将数组 [1, 2, 3, 8] 和 [6, 7, 9] 排序。</p>\n<h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-4">算法描述<a class="anchor" href="#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-4">§</a></h4>\n<ul>\n<li>把长度为 n 的输入序列分成两个长度为 n/2 的子序列；</li>\n<li>对这两个子序列分别采用归并排序；</li>\n<li>将两个排序好的子序列合并成一个最终的排序序列。</li>\n</ul>\n<h4 id="%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-4">过程演示<a class="anchor" href="#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-4">§</a></h4>\n<p><img src="/sortGif/MergeSort.gif" alt="归并算法"></p>\n<h4 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-4">代码实现<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-4">§</a></h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">checkArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>\n  <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token keyword control-flow">return</span> array\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 左右索引相同说明已经只有一个数</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> right<span class="token punctuation">)</span> <span class="token keyword control-flow">return</span>\n  <span class="token comment">// 等同于 `left + (right - left) / 2`</span>\n  <span class="token comment">// 相比 `(left + right) / 2` 来说更加安全，不会溢出</span>\n  <span class="token comment">// 使用位运算是因为位运算比四则运算快</span>\n  <span class="token keyword">let</span> mid <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>\n  <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>\n\n  <span class="token keyword">let</span> help <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">let</span> p1 <span class="token operator">=</span> left\n  <span class="token keyword">let</span> p2 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">?</span> array<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> array<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>p2 <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> help<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    array<span class="token punctuation">[</span>left <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> help<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> array\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-4">算法分析<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-4">§</a></h4>\n<ul>\n<li>最佳情况：T(n) = O(n)</li>\n<li>最差情况：T(n) = O(nlogn)</li>\n<li>平均情况：T(n) = O(nlogn)</li>\n</ul>\n<p>以上算法使用了递归的思想。递归的本质就是压栈，每递归执行一次函数，就将该函数的信息（比如参数，内部的变量，执行到的行数）压栈，直到遇到终止条件，然后出栈并继续执行函数。对于以上递归函数的调用轨迹如下</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// data = [3, 1, 2, 8, 9, 7, 6]</span>\n<span class="token function">mergeSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">// mid = 3</span>\n<span class="token function">mergeSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// mid = 1</span>\n<span class="token function">mergeSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// mid = 0</span>\n<span class="token function">mergeSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 遇到终止，回退到上一步</span>\n<span class="token function">mergeSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 遇到终止，回退到上一步</span>\n<span class="token comment">// 排序 p1 = 0, p2 = mid + 1 = 1</span>\n<span class="token comment">// 回退到 `mergeSort(data, 0, 3)` 执行下一个递归</span>\n<span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// mid = 2</span>\n<span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 遇到终止，回退到上一步</span>\n<span class="token comment">// 排序 p1 = 2, p2 = mid + 1 = 3</span>\n<span class="token comment">// 回退到 `mergeSort(data, 0, 3)` 执行合并逻辑</span>\n<span class="token comment">// 排序 p1 = 0, p2 = mid + 1 = 2</span>\n<span class="token comment">// 执行完毕回退</span>\n<span class="token comment">// 左边数组排序完毕，右边也是如上轨迹</span>\n</code></pre>\n<h3 id="%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8Fquick-sort">快速排序（Quick Sort）<a class="anchor" href="#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8Fquick-sort">§</a></h3>\n<p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p>\n<h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-5">算法描述<a class="anchor" href="#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-5">§</a></h4>\n<ol>\n<li>随机选取一个数组中的值作为基准值，从左至右取值与基准值对比大小。</li>\n<li>比基准值小的放数组左边，大的放右边，对比完成后将基准值和第一个比基准值大的值交换位置。然后将数组以基准值的位置分为两部分。</li>\n<li>继续递归以上操作。</li>\n</ol>\n<h4 id="%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-5">过程演示<a class="anchor" href="#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-5">§</a></h4>\n<p><img src="/sortGif/QuickSort.gif" alt="快速排序"></p>\n<h4 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-5">代码实现<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-5">§</a></h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">checkArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> array<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token punctuation">,</span> right<span class="token punctuation">)</span>\n    <span class="token comment">// 随机取值，然后和末尾交换，这样做比固定取一个位置的复杂度略低</span>\n    <span class="token keyword">let</span> indexs <span class="token operator">=</span> <span class="token function">part</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> indexs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> indexs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">part</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> less <span class="token operator">=</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> more <span class="token operator">=</span> right<span class="token punctuation">;</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> more<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 当前值比基准值小，`less` 和 `left` 都加一</span>\n     <span class="token operator">++</span>less<span class="token punctuation">;</span>\n       <span class="token operator">++</span>left<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 当前值比基准值大，将当前值和右边的值交换</span>\n      <span class="token comment">// 并且不改变 `left`，因为当前换过来的值还没有判断过大小</span>\n      <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token operator">--</span>more<span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 和基准值相同，只移动下标</span>\n      left<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 将基准值和比基准值大的第一个值交换位置</span>\n  <span class="token comment">// 这样数组就变成 `[比基准值小, 基准值, 比基准值大]`</span>\n  <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> right<span class="token punctuation">,</span> more<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span>less<span class="token punctuation">,</span> more<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-5">算法分析<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-5">§</a></h4>\n<p>该算法的复杂度和归并排序是相同的，但是额外空间复杂度比归并排序少，只需 O(logn)，并且相比归并排序来说，所需的常数时间也更少。</p>\n<h3 id="%E5%A0%86%E6%8E%92%E5%BA%8Fheap-sort">堆排序（Heap Sort）<a class="anchor" href="#%E5%A0%86%E6%8E%92%E5%BA%8Fheap-sort">§</a></h3>\n<p>堆排序利用了二叉堆的特性来做，二叉堆通常用数组表示，并且二叉堆是一颗完全二叉树（所有叶节点（最底层的节点）都是从左往右顺序排序，并且其他层的节点都是满的）。二叉堆又分为大根堆与小根堆。</p>\n<ul>\n<li>大根堆是某个节点的所有子节点的值都比他小</li>\n<li>小根堆是某个节点的所有子节点的值都比他大</li>\n</ul>\n<p>堆排序的原理就是组成一个大根堆或者小根堆。以小根堆为例，某个节点的左边子节点索引是 i _ 2 + 1，右边是 i _ 2 + 2，父节点是 (i - 1) /2。</p>\n<h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-6">算法描述<a class="anchor" href="#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-6">§</a></h4>\n<ol>\n<li>首先遍历数组，判断该节点的父节点是否比他小，如果小就交换位置并继续判断，直到他的父节点比他大</li>\n<li>重新以上操作 1，直到数组首位是最大值</li>\n<li>然后将首位和末尾交换位置并将数组长度减一，表示数组末尾已是最大值，不需要再比较大小</li>\n<li>对比左右节点哪个大，然后记住大的节点的索引并且和父节点对比大小，如果子节点大就交换位置</li>\n<li>重复以上操作 3 - 4 直到整个数组都是大根堆。</li>\n</ol>\n<h4 id="%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-6">过程演示<a class="anchor" href="#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-6">§</a></h4>\n<p><img src="/sortGif/HeapSort.gif" alt="堆排序"></p>\n<h4 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-6">代码实现<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-6">§</a></h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">heap</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">checkArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>\n  <span class="token comment">// 将最大值交换到首位</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">heapInsert</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> size <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token property-access">length</span>\n  <span class="token comment">// 交换首位和末尾</span>\n  <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">--</span>size<span class="token punctuation">)</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">heapify</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span>\n    <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">--</span>size<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> array\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">heapInsert</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 如果当前节点比父节点大，就交换</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token comment">// 将索引变成父节点</span>\n    index <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> index<span class="token punctuation">,</span> size</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 判断左右节点大小</span>\n    <span class="token keyword">let</span> largest <span class="token operator">=</span>\n      left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> left\n    <span class="token comment">// 判断子节点和父节点大小</span>\n    largest <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">?</span> largest <span class="token operator">:</span> index\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>largest <span class="token operator">===</span> index<span class="token punctuation">)</span> <span class="token keyword control-flow">break</span>\n    <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> index<span class="token punctuation">,</span> largest<span class="token punctuation">)</span>\n    index <span class="token operator">=</span> largest\n    left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>以上代码实现了小根堆，如果需要实现大根堆，只需要把节点对比反一下就好。</p>\n<h4 id="%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-6">算法分析<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-6">§</a></h4>\n<ul>\n<li>最佳情况：T(n) = O(nlogn)</li>\n<li>最差情况：T(n) = O(nlogn)</li>\n<li>平均情况：T(n) = O(nlogn)</li>\n</ul>\n<h3 id="%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8Fcounting-sort">计数排序（Counting Sort）<a class="anchor" href="#%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8Fcounting-sort">§</a></h3>\n<p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p>\n<p>计数排序是一种稳定的排序算法。计数排序使用一个额外的数组 C，其中第 i 个元素是待排序数组 A 中值等于 i 的元素的个数。然后根据数组 C 来将 A 中的元素排到正确的位置。它只能对整数进行排序。</p>\n<h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-7">算法描述<a class="anchor" href="#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-7">§</a></h4>\n<ol>\n<li>找出待排序的数组中最大和最小的元素；</li>\n<li>统计数组中每个值为 i 的元素出现的次数，存入数组 C 的第 i 项；</li>\n<li>对所有的计数累加（从 C 中的第一个元素开始，每一项和前一项相加）；</li>\n<li>反向填充目标数组：将每个元素 i 放在新数组的第 C(i)项，每放一个元素就将 C(i)减去 1。</li>\n</ol>\n<h4 id="%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-7">过程演示<a class="anchor" href="#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-7">§</a></h4>\n<p><img src="/sortGif/CountingSort.gif" alt="计数排序"></p>\n<h4 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-7">代码实现<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-7">§</a></h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">countingSort</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">checkArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>\n  <span class="token keyword">let</span> bias<span class="token punctuation">,</span>\n    min <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    max <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      max <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      min <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  bias <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> min\n  <span class="token keyword">let</span> bucket <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    bucket<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> bias<span class="token punctuation">]</span><span class="token operator">++</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    i <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> bias\n      bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span>\n      index<span class="token operator">++</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      i<span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> array\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-7">算法分析<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-7">§</a></h4>\n<p>当输入的元素是 n 个 0 到 k 之间的整数时，它的运行时间是 O(n + k)。计数排序不是比较排序，排序的速度快于任何比较排序算法。由于用来计数的数组 C 的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上 1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。</p>\n<ul>\n<li>最佳情况：T(n) = O(n+k)</li>\n<li>最差情况：T(n) = O(n+k)</li>\n<li>平均情况：T(n) = O(n+k)</li>\n</ul>\n<h3 id="%E6%A1%B6%E6%8E%92%E5%BA%8Fbucket-sort">桶排序（Bucket Sort）<a class="anchor" href="#%E6%A1%B6%E6%8E%92%E5%BA%8Fbucket-sort">§</a></h3>\n<p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。</p>\n<p>桶排序的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排</p>\n<h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-8">算法描述<a class="anchor" href="#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-8">§</a></h4>\n<ol>\n<li>人为设置一个 BucketSize，作为每个桶所能放置多少个不同数值（例如当 BucketSize==5 时，该桶可以存放｛1,2,3,4,5｝这几种数字，但是容量不限，即可以存放 100 个 3）；</li>\n<li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li>\n<li>对每个不是空的桶进行排序，可以使用其它排序方法，也可以递归使用桶排序；</li>\n<li>从不是空的桶里把排好序的数据拼接起来。</li>\n</ol>\n<p>注意，如果递归使用桶排序为各个桶排序，则当桶数量为 1 时要手动减小 BucketSize 增加下一循环桶的数量，否则会陷入死循环，导致内存溢出。</p>\n<h4 id="%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-8">过程演示<a class="anchor" href="#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-8">§</a></h4>\n<p><img src="/sortGif/BucketSort.png" alt="桶排序"></p>\n<h4 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-8">代码实现<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-8">§</a></h4>\n<p>数组替代链表版本</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> bucketCount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> arr\n  <span class="token punctuation">}</span>\n  bucketCount <span class="token operator">=</span> bucketCount <span class="token operator">||</span> <span class="token number">10</span>\n  <span class="token comment">//初始化桶</span>\n  <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">,</span>\n    buckets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    min <span class="token operator">=</span> min <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> min <span class="token operator">:</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    max <span class="token operator">=</span> max <span class="token operator">>=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> max <span class="token operator">:</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//求出每一个桶的数值范围</span>\n  <span class="token keyword">var</span> space <span class="token operator">=</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> bucketCount\n  <span class="token comment">//将数值装入桶中</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//找到相应的桶序列</span>\n    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> space<span class="token punctuation">)</span>\n    <span class="token comment">//判断是否桶中已经有数值</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//数组从小到大排列</span>\n      <span class="token keyword">var</span> bucket <span class="token operator">=</span> buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span>\n      <span class="token keyword">var</span> k <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span>\n      <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>k <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>\n        k<span class="token operator">--</span>\n      <span class="token punctuation">}</span>\n      buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">//新增数值入桶，暂时用数组模拟链表</span>\n      buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n      buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//开始合并数组</span>\n  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> bucketCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    n<span class="token operator">++</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> result\n<span class="token punctuation">}</span>\n</code></pre>\n<p>模拟链表实现版本</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token constant">L</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'linklist\'</span><span class="token punctuation">)</span> <span class="token comment">//链表</span>\n<span class="token keyword">function</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> bucketCount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> arr\n  <span class="token punctuation">}</span>\n  bucketCount <span class="token operator">=</span> bucketCount <span class="token operator">||</span> <span class="token number">10</span>\n  <span class="token comment">//初始化桶</span>\n  <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">,</span>\n    buckets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    min <span class="token operator">=</span> min <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> min <span class="token operator">:</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    max <span class="token operator">=</span> max <span class="token operator">>=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> max <span class="token operator">:</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//求出每一个桶的数值范围</span>\n  <span class="token keyword">var</span> space <span class="token operator">=</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> bucketCount\n  <span class="token comment">//将数值装入桶中</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//找到相应的桶序列</span>\n    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> space<span class="token punctuation">)</span>\n    <span class="token comment">//判断是否桶中已经有数值</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//数组从小到大排列</span>\n      <span class="token keyword">var</span> bucket <span class="token operator">=</span> buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span>\n      <span class="token keyword">var</span> insert <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">//插入标石</span>\n      <span class="token constant">L</span><span class="token punctuation">.</span><span class="token method function property-access">reTraversal</span><span class="token punctuation">(</span>bucket<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> item<span class="token punctuation">.</span><span class="token property-access">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">//小于，左边插入</span>\n          <span class="token constant">L</span><span class="token punctuation">.</span><span class="token method function property-access">append</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token function">_val</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          insert <span class="token operator">=</span> <span class="token boolean">true</span>\n          <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//退出遍历</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>insert<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//大于，右边插入</span>\n        <span class="token constant">L</span><span class="token punctuation">.</span><span class="token method function property-access">append</span><span class="token punctuation">(</span>bucket<span class="token punctuation">,</span> <span class="token function">_val</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> bucket <span class="token operator">=</span> <span class="token constant">L</span><span class="token punctuation">.</span><span class="token method function property-access">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token constant">L</span><span class="token punctuation">.</span><span class="token method function property-access">append</span><span class="token punctuation">(</span>bucket<span class="token punctuation">,</span> <span class="token function">_val</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> bucket <span class="token comment">//链表实现</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//开始合并数组</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token constant">L</span><span class="token punctuation">.</span><span class="token method function property-access">reTraversal</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// console.log(i+":"+item.v);</span>\n      result<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token property-access">v</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token comment">//链表存储对象</span>\n<span class="token keyword">function</span> <span class="token function">_val</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n    v<span class="token operator">:</span> v\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>其中，linklist 为引用的第三方库，地址 <a href="https://github.com/dead-horse/js-linklist">linklist</a></p>\n<h4 id="%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-8">算法分析<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-8">§</a></h4>\n<p>桶排序最好情况下使用线性时间 O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为 O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。</p>\n<ul>\n<li>最佳情况：T(n) = O(n+k)</li>\n<li>最差情况：T(n) = O(n+k)</li>\n<li>平均情况：T(n) = O(n2)</li>\n</ul>\n<h3 id="%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8Fradix-sort">基数排序（Radix Sort）<a class="anchor" href="#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8Fradix-sort">§</a></h3>\n<p>基数排序也是非比较的排序算法，对每一位进行排序，从最低位开始排序，复杂度为 O(kn),为数组长度，k 为数组中的数的最大的位数；</p>\n<p>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以是稳定的。</p>\n<h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-9">算法描述<a class="anchor" href="#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-9">§</a></h4>\n<ol>\n<li>取得数组中的最大数，并取得位数；</li>\n<li>arr 为原始数组，从最低位开始取每个位组成 radix 数组；</li>\n<li>对 radix 进行计数排序（利用计数排序适用于小范围数的特点）；</li>\n</ol>\n<h4 id="%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-9">过程演示<a class="anchor" href="#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-9">§</a></h4>\n<p><img src="/sortGif/RadixSort.gif" alt="基数排序"></p>\n<h4 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-9">代码实现<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-9">§</a></h4>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> maxDigit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> mod <span class="token operator">=</span> <span class="token number">10</span>\n  <span class="token keyword">var</span> dev <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">time</span><span class="token punctuation">(</span><span class="token string">\'基数排序耗时\'</span><span class="token punctuation">)</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxDigit<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> dev <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">,</span> mod <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> bucket <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">/</span> dev<span class="token punctuation">)</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>counter<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        counter<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n      counter<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> pos <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> counter<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>counter<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">=</span> counter<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          array<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">timeEnd</span><span class="token punctuation">(</span><span class="token string">\'基数排序耗时\'</span><span class="token punctuation">)</span>\n  <span class="token keyword control-flow">return</span> array\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-9">算法分析<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-9">§</a></h4>\n<ul>\n<li>最佳情况：T(n) = O(n * k)</li>\n<li>最差情况：T(n) = O(n * k)</li>\n<li>平均情况：T(n) = O(n * k)</li>\n</ul>\n<p>基数排序有两种方法：</p>\n<ul>\n<li>MSD 从高位开始进行排序</li>\n<li>LSD 从低位开始进行排序</li>\n</ul>\n<h3 id="%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F-vs-%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F-vs-%E6%A1%B6%E6%8E%92%E5%BA%8F">基数排序 vs 计数排序 vs 桶排序<a class="anchor" href="#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F-vs-%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F-vs-%E6%A1%B6%E6%8E%92%E5%BA%8F">§</a></h3>\n<p>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p>\n<ul>\n<li>基数排序：根据键值的每位数字来分配桶</li>\n<li>计数排序：每个桶只存储单一键值</li>\n<li>桶排序：每个桶存储一定范围的数值</li>\n</ul>\n<h2 id="%E7%9F%AD%E9%93%BE%E6%8E%A5%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0">短链接原理及实现<a class="anchor" href="#%E7%9F%AD%E9%93%BE%E6%8E%A5%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0">§</a></h2>\n<h3 id="%E4%BB%80%E4%B9%88%E6%98%AF%E7%9F%AD%E9%93%BE%E6%8E%A5">什么是短链接<a class="anchor" href="#%E4%BB%80%E4%B9%88%E6%98%AF%E7%9F%AD%E9%93%BE%E6%8E%A5">§</a></h3>\n<blockquote>\n<p>就是把<code>普通网址</code>，转换成比较短的网址。比如：<code>https://t.cn/zyqd5JGm</code> 这种，在微博这些限制字数的应用里。好处不言而喻。短、字符少、美观、便于发布、传播。</p>\n</blockquote>\n<ul>\n<li>百度短网址服务 <a href="http://dwz.cn/">http://dwz.cn/</a></li>\n<li>谷歌短网址服务 <a href="https://goo.gl/">https://goo.gl/</a></li>\n</ul>\n<h3 id="%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90">原理解析<a class="anchor" href="#%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90">§</a></h3>\n<p>当我们在浏览器里输入 ·<a href="https://t.cn/zyqd5JGm%60">https://t.cn/zyqd5JGm`</a> 时</p>\n<ol>\n<li>DNS 首先解析获得 <code>http://t.cn</code> 的 IP 地址</li>\n<li>当 DNS 获得 IP 地址以后（比如：<code>116.211.169.137</code>），会向这个地址发送 <code>HTTP</code> <code>GET</code> 请求，查询短码 <code>zyqd5JGm</code></li>\n<li><code>http://t.cn</code> 服务器会通过短码 <code>zyqd5JGm</code> 获取对应的长 URL</li>\n<li>请求通过 <code>HTTP</code> （301 或 302） 转到对应的长 URL <a href="https://www.itdongdong.com">https://www.itdongdong.com</a> 。</li>\n</ol>\n<p>::: tip\n<strong>重定向的问题(301还是302)</strong></p>\n<p><code>301</code> 是永久重定向，<code>302</code> 是临时重定向。\n因为短地址一经生成就不会变化，所以用 <code>301</code> 是符合 <code>http</code> 语义的。同时对服务器压力也会有一定减少。\n但是如果使用了 <code>301</code>，就无法统计到短地址被点击的次数了。而这个点击次数是一个非常有意思的大数据分析数据源。能够分析出的东西非常非常多。所以选择<code>302</code>虽然会增加服务器压力，但是也是一个很好的选择。</p>\n<p>具体选择，可以根据自己的业务需求来选择！</p>\n<p>:::</p>\n<h3 id="%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0">算法实现<a class="anchor" href="#%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0">§</a></h3>\n<h4 id="hash%E5%AE%9E%E7%8E%B0">Hash实现<a class="anchor" href="#hash%E5%AE%9E%E7%8E%B0">§</a></h4>\n<p>通过一定方式将任意长的文本转化为一个固定长的字符串，只要目标文本长度适当，那么我们对于不同的输入通过哈希几乎(注意是几乎)不可能得到对应同一个字符串．通过对长链接进行Hash运算，将Hash值作为这个长链接的唯一标示．但是通过Hash实现可能会造成碰撞．不一样的长网址缩短成了同一个短网址，那也就做不到复原了．</p>\n<p>对于碰撞问题，有一种缓冲方法就是在呈现碰撞了以后后边在增加随机字符，随机字符的增加能够缓解碰撞的疑问，但是这终究是一种缓冲的办法，没有彻底解决碰撞．</p>\n<h4 id="%E8%87%AA%E5%A2%9E%E5%BA%8F%E5%88%97%E7%AE%97%E6%B3%95">自增序列算法<a class="anchor" href="#%E8%87%AA%E5%A2%9E%E5%BA%8F%E5%88%97%E7%AE%97%E6%B3%95">§</a></h4>\n<p>自增序列算法也叫永不重复算法。</p>\n<p>设置 id 自增，一个 10进制 id 对应一个 62进制的数值，1对1，也就不会出现重复的情况。这个利用的就是低进制转化为高进制时，字符数会减少的特性。</p>\n<p>短址的长度一般设为 6 位，而每一位是由 [a - z, A - Z, 0 - 9] 总共 62 个字母组成的，所以 6 位的话，总共会有 62^6 ~= 568亿种组合，基本上够用了。</p>\n<p>附上一个进制转换工具 <a href="http://tool.lu/hexconvert/">http://tool.lu/hexconvert/</a></p>\n<h4 id="%E6%91%98%E8%A6%81%E7%AE%97%E6%B3%95">摘要算法<a class="anchor" href="#%E6%91%98%E8%A6%81%E7%AE%97%E6%B3%95">§</a></h4>\n<ol>\n<li>将长网址 <code>md5</code> 生成 32 位签名串,分为 4 段, 每段 8 个字节</li>\n<li>对这四段循环处理, 取 8 个字节, 将他看成 16 进制串与 0x3fffffff(30位1) 与操作, 即超过 30 位的忽略处理</li>\n<li>这 30 位分成 6 段, 每 5 位的数字作为字母表的索引取得特定字符, 依次进行获得 6 位字符串</li>\n<li>总的 <code>md5</code> 串可以获得 4 个 6 位串,取里面的任意一个就可作为这个长 url 的短 url 地址</li>\n</ol>\n<p>这种算法,虽然会生成4个,但是仍然存在重复几率</p>\n<h4 id="%E4%B8%A4%E7%A7%8D%E7%AE%97%E6%B3%95%E5%AF%B9%E6%AF%94">两种算法对比<a class="anchor" href="#%E4%B8%A4%E7%A7%8D%E7%AE%97%E6%B3%95%E5%AF%B9%E6%AF%94">§</a></h4>\n<p>第一种算法的好处就是简单好理解，永不重复。但是短码的长度不固定，随着 id 变大从一位长度开始递增。如果非要让短码长度固定也可以就是让 id 从指定的数字开始递增就可以了。百度短网址用的这种算法。</p>\n<p>第二种算法，存在碰撞（重复）的可能性，虽然几率很小。短码位数是比较固定的。不会从一位长度递增到多位的。据说微博使用的这种算法。</p>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E7%AE%97%E6%B3%95" }, "\u7B97\u6CD5"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%8E%92%E5%BA%8F" }, "\u6392\u5E8F"),
                        React.createElement("ol", null,
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8Fbubble-sort" }, "\u5192\u6CE1\u6392\u5E8F\uFF08Bubble Sort\uFF09"),
                                React.createElement("ol", null,
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0" }, "\u7B97\u6CD5\u63CF\u8FF0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA" }, "\u8FC7\u7A0B\u6F14\u793A")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0" }, "\u4EE3\u7801\u5B9E\u73B0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90" }, "\u7B97\u6CD5\u5206\u6790")))),
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8Finsertion-sort" }, "\u63D2\u5165\u6392\u5E8F\uFF08Insertion Sort\uFF09"),
                                React.createElement("ol", null,
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-1" }, "\u7B97\u6CD5\u63CF\u8FF0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-1" }, "\u8FC7\u7A0B\u6F14\u793A")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-1" }, "\u4EE3\u7801\u5B9E\u73B0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-1" }, "\u7B97\u6CD5\u5206\u6790")))),
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8Fshell-sort" }, "\u5E0C\u5C14\u6392\u5E8F\uFF08Shell Sort\uFF09"),
                                React.createElement("ol", null,
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-2" }, "\u7B97\u6CD5\u63CF\u8FF0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-2" }, "\u4EE3\u7801\u5B9E\u73B0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-2" }, "\u8FC7\u7A0B\u6F14\u793A")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-2" }, "\u7B97\u6CD5\u5206\u6790")))),
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8Fselection-sort" }, "\u9009\u62E9\u6392\u5E8F\uFF08Selection Sort\uFF09"),
                                React.createElement("ol", null,
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-3" }, "\u7B97\u6CD5\u63CF\u8FF0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-3" }, "\u8FC7\u7A0B\u6F14\u793A")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-3" }, "\u4EE3\u7801\u5B9E\u73B0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-3" }, "\u7B97\u6CD5\u5206\u6790")))),
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8Fmerge-sort" }, "\u5F52\u5E76\u6392\u5E8F\uFF08Merge Sort\uFF09"),
                                React.createElement("ol", null,
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-4" }, "\u7B97\u6CD5\u63CF\u8FF0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-4" }, "\u8FC7\u7A0B\u6F14\u793A")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-4" }, "\u4EE3\u7801\u5B9E\u73B0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-4" }, "\u7B97\u6CD5\u5206\u6790")))),
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8Fquick-sort" }, "\u5FEB\u901F\u6392\u5E8F\uFF08Quick Sort\uFF09"),
                                React.createElement("ol", null,
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-5" }, "\u7B97\u6CD5\u63CF\u8FF0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-5" }, "\u8FC7\u7A0B\u6F14\u793A")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-5" }, "\u4EE3\u7801\u5B9E\u73B0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-5" }, "\u7B97\u6CD5\u5206\u6790")))),
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E5%A0%86%E6%8E%92%E5%BA%8Fheap-sort" }, "\u5806\u6392\u5E8F\uFF08Heap Sort\uFF09"),
                                React.createElement("ol", null,
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-6" }, "\u7B97\u6CD5\u63CF\u8FF0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-6" }, "\u8FC7\u7A0B\u6F14\u793A")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-6" }, "\u4EE3\u7801\u5B9E\u73B0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-6" }, "\u7B97\u6CD5\u5206\u6790")))),
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8Fcounting-sort" }, "\u8BA1\u6570\u6392\u5E8F\uFF08Counting Sort\uFF09"),
                                React.createElement("ol", null,
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-7" }, "\u7B97\u6CD5\u63CF\u8FF0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-7" }, "\u8FC7\u7A0B\u6F14\u793A")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-7" }, "\u4EE3\u7801\u5B9E\u73B0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-7" }, "\u7B97\u6CD5\u5206\u6790")))),
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E6%A1%B6%E6%8E%92%E5%BA%8Fbucket-sort" }, "\u6876\u6392\u5E8F\uFF08Bucket Sort\uFF09"),
                                React.createElement("ol", null,
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-8" }, "\u7B97\u6CD5\u63CF\u8FF0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-8" }, "\u8FC7\u7A0B\u6F14\u793A")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-8" }, "\u4EE3\u7801\u5B9E\u73B0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-8" }, "\u7B97\u6CD5\u5206\u6790")))),
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8Fradix-sort" }, "\u57FA\u6570\u6392\u5E8F\uFF08Radix Sort\uFF09"),
                                React.createElement("ol", null,
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0-9" }, "\u7B97\u6CD5\u63CF\u8FF0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E8%BF%87%E7%A8%8B%E6%BC%94%E7%A4%BA-9" }, "\u8FC7\u7A0B\u6F14\u793A")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-9" }, "\u4EE3\u7801\u5B9E\u73B0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-9" }, "\u7B97\u6CD5\u5206\u6790")))),
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F-vs-%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F-vs-%E6%A1%B6%E6%8E%92%E5%BA%8F" }, "\u57FA\u6570\u6392\u5E8F vs \u8BA1\u6570\u6392\u5E8F vs \u6876\u6392\u5E8F")))),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E7%9F%AD%E9%93%BE%E6%8E%A5%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0" }, "\u77ED\u94FE\u63A5\u539F\u7406\u53CA\u5B9E\u73B0"),
                        React.createElement("ol", null,
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E4%BB%80%E4%B9%88%E6%98%AF%E7%9F%AD%E9%93%BE%E6%8E%A5" }, "\u4EC0\u4E48\u662F\u77ED\u94FE\u63A5")),
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90" }, "\u539F\u7406\u89E3\u6790")),
                            React.createElement("li", null,
                                React.createElement("a", { href: "#%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0" }, "\u7B97\u6CD5\u5B9E\u73B0"),
                                React.createElement("ol", null,
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#hash%E5%AE%9E%E7%8E%B0" }, "Hash\u5B9E\u73B0")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E8%87%AA%E5%A2%9E%E5%BA%8F%E5%88%97%E7%AE%97%E6%B3%95" }, "\u81EA\u589E\u5E8F\u5217\u7B97\u6CD5")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E6%91%98%E8%A6%81%E7%AE%97%E6%B3%95" }, "\u6458\u8981\u7B97\u6CD5")),
                                    React.createElement("li", null,
                                        React.createElement("a", { href: "#%E4%B8%A4%E7%A7%8D%E7%AE%97%E6%B3%95%E5%AF%B9%E6%AF%94" }, "\u4E24\u79CD\u7B97\u6CD5\u5BF9\u6BD4")))))))))),
    'author': "wangweidong",
    'contributors': [
        "wangweidong"
    ],
    'date': "2021-02-02T10:53:13.000Z",
    'updated': null,
    'excerpt': "排序 以下两个函数是排序中会用到的通用函数，就不一一写了 function checkArray(array) { if (array.length == 0) return array } function swap(array, left, right) { let rightValue = array[right] array[right] = array[...",
    'cover': "/sortGif/BubbleSort.gif",
    'sidebar': [
        {
            "link": "interview/index.html",
            "title": "面霸心经",
            "children": [
                {
                    "text": "00.数据库篇",
                    "link": "interview/index.html",
                    "pagePath": "interview/README.md"
                },
                {
                    "text": "01.阿里篇",
                    "link": "interview/Alibaba.html",
                    "pagePath": "interview/Alibaba.md"
                },
                {
                    "text": "网络",
                    "link": "interview/HTTP.html",
                    "pagePath": "interview/HTTP.md"
                },
                {
                    "text": "数据结构",
                    "link": "interview/DataStructure.html",
                    "pagePath": "interview/DataStructure.md"
                },
                {
                    "text": "算法",
                    "link": "interview/Algorithm.html",
                    "pagePath": "interview/Algorithm.md"
                }
            ],
            "pagePath": "interview/README.md",
            "text": "00.数据库篇"
        }
    ],
    'gitalk': React.createElement(Gitalk, { admin: [
            'ViktorWong'
        ], clientID: "0af8ad0c8674b58c37c0", clientSecret: "fe697a9667fc2b49387bf550e4178b3eaa5b8859", id: "interview/Algorithm.html", owner: "ViktorWong", pagerDirection: "first", repo: "my-docs", title: "\u7B97\u6CD5" })
};
